
class FilesApplicationContainer extends ApplicationContainer {
	
	height = Number( 186 );
	fileSystemItem = FileSystemItem.allowsNil;
	folder = Folder.allowsNil;
	pathTextBox = ToolbarPathTextBox.link;
	thumbnailToggleButton = ToolbarSymbolSegmentButton.link;
	filesContainer = FilesGridContainer.link;
	upButton = ToolbarSymbolButton.link;

	isThumbnailLayout = Boolean( self.application.settings.isThumbnailLayout );

}

function FilesApplicationContainer:initialise( ... )
	self:super( ... )
   self:event( ReadyInterfaceEvent, self.onReady )
end

function FilesApplicationContainer:onReady( ReadyInterfaceEvent event, Event.phases phase )
	local startingPath = self.application.arguments[1]
	if startingPath then
		if startingPath:sub( 1, 1) ~= "/" then
			startingPath = "/" .. startingPath
		end
		local folder = FileSystemItem( startingPath )
		if folder then
			self.fileSystemItem = folder
			return
		end
	end
	self.folder = Folder( "/User" )
end

function FilesApplicationContainer.fileSystemItem:set( fileSystemItem )
	if fileSystemItem then
		if fileSystemItem:typeOf( Folder ) then
			self.folder = fileSystemItem
		else
			self.folder = fileSystemItem.parent
			local path = fileSystemItem.path
			for i, fileItem in ipairs( self.filesContainer.children ) do
				if fileItem.fileSystemItem.path == path then
					fileItem:focus( FileItem )
				end
			end
		end
	end
end

function FilesApplicationContainer.folder:set( folder )
	self.folder = folder
	local path = folder.path
	self.upButton.isEnabled = path ~= "/"
	self.pathTextBox.path = path
	self:refresh()
end

function FilesApplicationContainer:refresh()
	local folder, filesContainer = self.folder, self.filesContainer
	filesContainer:disposeAll()
	for i, fileSystemItem in ipairs( folder.items ) do
		filesContainer:insert( FileItem( { fileSystemItem = fileSystemItem } ) )
	end
	filesContainer:updateLayout( true )
end

function FilesApplicationContainer.thumbnailToggleButton:action( ActionInterfaceEvent event )
	self.isThumbnailLayout = not self.isThumbnailLayout
end

function FilesApplicationContainer.upButton:action( ActionInterfaceEvent event )
    self.folder = self.folder.parent
end

function FilesApplicationContainer.isThumbnailLayout:set( isThumbnailLayout )
	self.isThumbnailLayout = isThumbnailLayout
	local thumbnailToggleButton = self.thumbnailToggleButton
	if thumbnailToggleButton then
		thumbnailToggleButton.symbolName = isThumbnailLayout and "list" or "thumbnail"
	end
	local filesContainer = self.filesContainer
	if filesContainer then
		filesContainer.style = isThumbnailLayout and FilesGridContainer.styles.THUMBNAIL or FilesGridContainer.styles.LIST
	end

	local settings = self.application.settings
	settings.isThumbnailLayout = isThumbnailLayout
	settings:save()
end
