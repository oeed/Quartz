
local DRAG_COPY_KEY = "alt"
local ADD_FOCUS_KEY = "ctrl"

local styles = FilesGridContainer.styles

class FileItem extends View implements IDraggableView implements IDragDropDestination {
	
	-- isFocused = Boolean( false );
	-- isCanvasHitTested = Boolean( false );

	fileSystemItem = FileSystemItem;
	title = String;
	subtitle = String;
	isFolder = Boolean( true );
	transition = Number( 1 );

	dropStyle = DragDropManager.dropStyles.SHRINK;
	isDropHovering = Boolean( false );

}

function FileItem:initialise( ... )
	self:super( ... )

	self:event( MouseDownEvent, self.onMouseDown )
	self:event( MouseHeldEvent, self.onMouseHeld )
	self:event( MouseDoubleClickEvent, self.onMouseDoubleClick )
	-- self:event( ParentChangedInterfaceEvent, self.onParentChanged )
	self:event( KeyDownEvent, self.onKeyDown )
	-- self:event( Event.KEY_UP, self.onKeyUp )
	-- self.event:connectGlobal( MouseUpEvent, self.onGlobalMouseUp, Event.phases.BEFORE )

	-- self.fileSystemItem = Folder( "/applications" )
	-- self.raw.style = self.application.settings.isThumbnailLayout and styles.THUMBNAIL or styles.LIST
end

function FileItem:onDraw()
	local canvas, theme, width, height, style = self.canvas, self.theme, self.width, self.height, self.parent.style
	local fileSystemItem = self.fileSystemItem
	local titleFont = theme:value( "titleFont" )
	local subtitleFont = theme:value( "subtitleFont" )
	local focusPaddingX, focusPaddingY, focusGap, leftMargin, topMargin, rightMargin, bottomMargin = theme:value( "focusPaddingX" ), theme:value( "focusPaddingY" ), theme:value( "focusGap" ), theme:value( "leftMargin" ), theme:value( "topMargin" ), theme:value( "rightMargin" ), theme:value( "bottomMargin" )

	local iconSize = height
	local isList = style == styles.LIST
	local isThumbnail = style == styles.THUMBNAIL
	if isList then
		iconSize = math.max( theme:value( "smallIconSize" ), height - topMargin - bottomMargin )
	elseif isThumbnail then
		iconSize = math.min( theme:value( "largeIconSize" ), height - topMargin - bottomMargin )
	end
	canvas:image( fileSystemItem.icon, 1 + leftMargin, 1 + topMargin, iconSize, iconSize )
	local x = leftMargin + iconSize

	local title = self.title
	local titleHeight, titleWidth = titleFont.height, math.min( titleFont:getWidth( title ), width - iconSize - leftMargin - rightMargin - focusGap - 2 * focusPaddingX )
	local subtitleHeight = subtitleFont.height
	local titleY = math.max( math.floor( ( iconSize - titleHeight - focusPaddingY - focusGap - subtitleHeight + 1 ) / 2 + 0.5 ) + 1, 1 + focusPaddingY )
	local focusRoundedRect = RoundedRectangleMask( 1 + iconSize + leftMargin + focusGap, titleY - focusPaddingY, titleWidth + 2 * focusPaddingX, titleHeight + 2 * focusPaddingY, theme:value( "focusRadius" ) )
	canvas:fill( theme:value( "focusFillColour" ), focusRoundedRect )
	canvas:fill( theme:value( "titleColour" ), TextMask( 1 + iconSize + leftMargin + focusPaddingX + focusGap, titleY, titleWidth, titleHeight, title, titleFont ) )

	local subtitle = self.subtitle


	local listSubtitleY = titleY
	local listSubtitleX = 1 + iconSize + leftMargin + focusGap + titleWidth + 2 * focusPaddingX + theme:value( "subtitleMargin" )
	local thumbnailSubtitleY = titleY + titleHeight + focusPaddingY + focusGap
	local thumbnailSubtitleX = 1 + iconSize + leftMargin + focusPaddingX + focusGap

	local transition = self.transition
	transition = math.min( math.max( isList and transition or 1 - transition, 0 ), 1 )
	local subtitleY = math.floor( transition * listSubtitleY + ( 1 - transition ) * thumbnailSubtitleY + 0.5 )
	local subtitleX = math.floor( transition * listSubtitleX + ( 1 - transition ) * thumbnailSubtitleX + 0.5 )
	local subtitleWidth = width - subtitleX - rightMargin
	if subtitleWidth >= 1 then
		canvas:fill( theme:value( "subtitleColour" ), TextMask( subtitleX, subtitleY, subtitleWidth, subtitleHeight, subtitle, subtitleFont ) )
	end
end

function FileItem.fileSystemItem:set( fileSystemItem )
    self.fileSystemItem = fileSystemItem
    self.title = fileSystemItem.name
    local association = fileSystemItem.association
    self.subtitle = fileSystemItem.sizeString .. ( association and " " .. association.name or "" )
end

-- function FileItem:updateIdealSize()
-- 	local theme, parent = self.theme, self.parent
-- 	local style = parent.style

-- 	local titleWidth = theme:value( "titleFont" ):getWidth( self.title )
-- 	local subtitleWidth = theme:value( "subtitleFont" ):getWidth( self.subtitle )
-- 	local largeIconSize, smallIconSize, focusPaddingX, focusPaddingY, focusGap, topMargin, bottomMargin = theme:value( "largeIconSize" ), theme:value( "smallIconSize" ), theme:value( "focusPaddingX" ), theme:value( "focusPaddingY" ), theme:value( "focusGap" ), theme:value( "topMargin" ), theme:value( "bottomMargin" )

-- 	local contentWidth = largeIconSize + focusGap + math.max( subtitleWidth, titleWidth ) + 2 * focusPaddingX + topMargin + bottomMargin
-- 	self.contentWidth = contentWidth

-- 	if style == styles.LIST then
-- 		if parent then
-- 			local parentWidth = parent.width
-- 			self.minWidth = parentWidth
-- 			self.idealWidth = parentWidth
-- 			self.maxWidth = parentWidth
-- 		end
-- 		self.idealHeight = smallIconSize + topMargin + bottomMargin
-- 	elseif style == styles.THUMBNAIL then
-- 		self.idealWidth = contentWidth
-- 		self.maxWidth = math.floor( contentWidth * 1.5 + 0.5 )
-- 		self.minWidth = 85
-- 		self.idealHeight = largeIconSize + topMargin + bottomMargin
-- 	end
-- 	log("updating")
-- 	log(self.idealWidth)
-- 	log(self.idealHeight)
-- 	if parent then
-- 		log("Parent too")
-- 		parent.needsLayoutUpdate = true
-- 	end
-- 	self.needsDraw = true
-- end

-- function FileItem:onParentChanged( ParentChangedInterfaceEvent event, Event.phases phase )
-- 	self:updateIdealSize()
-- end

-- function FileItem.title:set( title )
-- 	self.title = title
-- 	self:updateIdealSize()
-- end

-- function FileItem.subtitle:set( subtitle )
-- 	self.subtitle = subtitle
-- 	self:updateIdealSize()
-- end

-- function FileItem.style:set( style )
-- 	self.style = style
-- 	self:updateIdealSize()
-- 	self.transition = 0
-- 	self:animate( "transition", 1, 0.3, nil, Animation.easings.IN_OUT_SINE, nil, false )
-- end

function FileItem:updateThemeStyle()
	self.theme.style = self.isEnabled and ( self.isDropHovering and "hover" or (self.isFocused and "focused" or "default") ) or "disabled"
end

function FileItem:onMouseDown( MouseDownEvent event, Event.phases phase )
	if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
		if self.application.keyboardShortcutManager:isKeyDown( ADD_FOCUS_KEY ) then
			if self.isFocused then
				self:unfocus()
			else
				self:addFocus()
			end
		elseif not self.isFocused then
			self:focus()
		end
	end
	return true
end

function FileItem:onMouseHeld( MouseHeldEvent event, Event.phases phase )
	if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
		self:addFocus()
		local isMove = not self.application.keyboardShortcutManager:isKeyDown( DRAG_COPY_KEY )
		local views = self.application:focusesOfType( FileItem )
		self:startDragDrop( event, FileClipboardData( "" ), isMove, function( destination )
				if destination and isMove then
					for i, view in ipairs( views ) do
						view:dispose()
					end
				end
			end, views )
	end
	return true
end

function FileItem:onMouseDoubleClick( MouseDoubleClickEvent event, Event.phases phase )
	if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
		self:open()
	end
	return true
end

function FileItem:onKeyDown( KeyDownEvent event, Event.phases phase )
	if self.isEnabled and self.isFocused then
		local key = event.keyCode
		if key == keys.enter then
			self:open()
			return true
		end
	end
end

function FileItem:open()
	local fileSystemItem = self.fileSystemItem
	if fileSystemItem:typeOf( IEditableFileSystemItem ) then
		fileSystemItem:open()
	else
		self.application.container.folder = fileSystemItem
	end
end

function FileItem.isDropHovering:set( isDropHovering )
	self.isDropHovering = isDropHovering
	self:updateThemeStyle()
end

function FileItem:canAcceptDragDrop( data )
	return self.isFolder and data:typeOf( FileClipboardData )
end

function FileItem:dragDropEntered( data, dragView )
	self.isDropHovering = true
	-- self.imageObject.image = "folder-open"
end

function FileItem:dragDropMoved( data, dragView )
end

function FileItem:dragDropExited( data, dragView )
	self.isDropHovering = false
	-- self.imageObject.image = "folder"
end

function FileItem:dragDropDropped( data )
end