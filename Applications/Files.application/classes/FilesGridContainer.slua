
local cursorStatic, clickableCursorStatic = Cursor.static, ClickableCursor.static

local styles = {
	LIST = 1;
	THUMBNAIL = 2;
}

class FilesGridContainer extends GridContainer implements IDragDropDestination {
	
	style = Number; -- TODO: should be FilesGridContainer.styles
	selection = Table.allowsNil;
	isPressed = Boolean( false );
	needsSelectionFocusesUpdate = Boolean( false );

	dropStyle = DragDropManager.dropStyles.DISAPPEAR;
	isDropHovering = Boolean( false );
	outlineThickness = Number( 0 );

	styles = Enum( Number, {
		LIST = 1;
		THUMBNAIL = 2;
	} );

}

function FilesGridContainer:initialise( ... )
	self:super( ... )
	self:event( MouseDownEvent, self.onMouseDown, Event.phases.AFTER )
	self:event( MouseDragEvent, self.onMouseDrag )
	self.event:connectGlobal( MouseUpEvent, self.onGlobalMouseUp, Event.phases.BEFORE )
	self.style = self.application.settings.isThumbnailLayout and styles.THUMBNAIL or styles.LIST
end

function FilesGridContainer:onDraw()
	local selection, outlineThickness = self.selection, self.outlineThickness
	if selection or outlineThickness > 0 then
		local theme, canvas, width, height = self.theme, self.canvas, self.width, self.height
		if selection then
			local selectionX, selectionY = math.max( math.min( selection[1], selection[3] ), 1 ), math.max( math.min( selection[2], selection[4] ), 1 )
			local selectionWidth, selectionHeight = math.min( math.max( selection[1], selection[3] ), width ) - selectionX, math.min( math.max( selection[2], selection[4] ), height ) - selectionY

			if selectionWidth >= 2 and selectionHeight >= 2 then
				local rectangleMask = RectangleMask( selectionX, selectionY, selectionWidth, selectionHeight )
				canvas:fill( theme:value( "selectionFillColour" ), rectangleMask )
				canvas:outline( theme:value( "selectionOutlineColour" ), rectangleMask, theme:value( "selectionOutlineThickness" ) )
			end
		end
		if outlineThickness > 0 then
			canvas:outline( theme:value( "outlineColour" ), canvas.mask, outlineThickness )
		end
	end
end

function FilesGridContainer:onMouseDown( MouseDownEvent event, Event.phases phase )
	if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
		local x, y = event.x, event.y
		self:updateSelectionFocuses()
		self.selection = { x, y, x, y }
		for i, childView in ipairs( self.children ) do
			childView.cursor = cursorStatic
		end
	end
end

function FilesGridContainer:onMouseDrag( MouseDragEvent event, Event.phases phase )
	if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
		local selection = self.selection
		if selection then
			selection[3] = event.x
			selection[4] = event.y
			self.needsSelectionFocusesUpdate = true
			self.needsDraw = true
			return true
		end
	end
end

function FilesGridContainer:onGlobalMouseUp( MouseUpEvent event, Event.phases phase )
	local selection = self.selection
	if selection and self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
		self.selection = nil
		return true
	end
end

function FilesGridContainer:canAcceptDragDrop( ClipboardData data, Boolean isMove )
	return not isMove and data:typeOf( FileClipboardData )
end

--[[
	@desc Description
	@return Any returnedValue
]]
function FilesGridContainer:update( ... )
	if self.needsSelectionFocusesUpdate then
		self:updateSelectionFocuses()
	end
	self:super( ... )
end

function FilesGridContainer:updateSelectionFocuses()
	self.needsSelectionFocusesUpdate = false
	local selection = self.selection
	if not selection then
		self.application:unfocusAll( FileItem )
		return
	end

	local x1, y1, x2, y2 = math.min( selection[1], selection[3] ), math.min( selection[2], selection[4] ), math.max( selection[1], selection[3] ), math.max( selection[2], selection[4] )
	for i, childView in ipairs( self.children ) do
		local x, y, width, height = childView.x, childView.y, childView.width, childView.height
		local childX1, childX2, childY1, childY2 = x, y, x + width - 1, y + height - 1
		if not ( x > x2 or x + width - 1 < x1 or y > y2 or y + height - 1 < y1 ) then
			if not childView.isFocused then
				childView:addFocus()
			end
		else
			if childView.isFocused then
				childView:unfocus()
			end
		end
	end
end

function FilesGridContainer.selection:set( selection )
	local oldSelection = self.selection
    self.selection = selection
    if ( selection and not oldSelection ) or ( not selection and oldSelection ) then
    	local cursor = selection and cursorStatic or clickableCursorStatic
		for i, childView in ipairs( self.children ) do
			childView.cursor = cursor
		end
    end
    self.needsDraw = true
end

function FilesGridContainer:updateThemeStyle()
	local style, theme = self.style, self.theme
	theme.style = style == styles.LIST and "list" or "thumbnail"
	self.minimumCellWidth = theme:value( "minimumCellWidth" )
	self.cellHeight = theme:value( "cellHeight" )
end

function FilesGridContainer.style:set( style )
	if style ~= self.style then
		self.style = style
		self:updateThemeStyle()
		self.needsLayoutUpdate = true

		local theme = self.theme
		local time, easing = theme:value( "animationDuration" ), theme:value( "animationEasing" )
		for i, childView in ipairs( self.children ) do
			childView.transition = 0
			childView:animate( "transition", 1, time, nil, easing, nil, false )
		end
	end
end

function FilesGridContainer.outlineThickness:set( outlineThickness )
    self.outlineThickness = outlineThickness
    self.needsDraw = true
end

function FilesGridContainer.isDropHovering:set( isDropHovering )
	if self.isDropHovering ~= isDropHovering then
	local theme = self.theme
		self:animate( "outlineThickness", isDropHovering and theme:value( "maximumOutlineThickness" ) or 0, theme:value( "outlineAnimationDuration" ), nil, theme:value( "outlineAnimationEasing" ) )
	end
	self.isDropHovering = isDropHovering
end

function FilesGridContainer:dragDropEntered( ClipboardData data, DragView dragView, Number x, Number y )
	self.isDropHovering = true
end

function FilesGridContainer:dragDropMoved( ClipboardData data, DragView dragView, Number x, Number y )
end

function FilesGridContainer:dragDropExited( ClipboardData data, DragView dragView, Number x, Number y )
	self.isDropHovering = false
end

function FilesGridContainer:dragDropDropped( ClipboardData data, Boolean isMove, Number x, Number y )
	self.isDropHovering = false
	if not isMove then
		data.fileSystemItem:copyTo( self.application.container.folder.parent )
	end
end

