
local ANIMATION_FLY_TIME = 0.4
local ANIMATION_FLY_UP_TIME = 0.3
local ANIMATION_SCALE_TIME = 0.3
local ANIMATION_FLY_DELAY = 0.05
local ANIMATION_FLY_EASING = Animation.easings.IN_SINE
local ANIMATION_SCALE_EASING = Animation.easings.OUT_SINE
local ANIMATION_SCALE = 0.8
local ANIMATION_OVERLAP_TIME = 0.20

class HomeContainer extends Container implements ISwitchableView 
    
	property Boolean isFocusDismissable = false
	property Boolean isOpening = true
	property Number scale = 1
	property Image backgroundImage
    default hadFirstFocus = false
    

    function initialise( ... )
        super( ... )
        self.backgroundImage = Image.static:fromPath( self.application.settings.backgroundImagePath )
    end

    function initialiseCanvas()
        self.canvas = ScaleableCanvas( self.width, self.height, self )
    end

    set backgroundImage( backgroundImage )
        self.backgroundImage = backgroundImage
        self.needsDraw = true
    end

    function onDraw()
        self.canvas:image( self.backgroundImage, 1, 1, self.width, self.height ) -- TODO: image fitting options (e.g. centre, squish etc.)
    end

    set scale( scale )
        self.scale = scale
        local canvas = self.canvas
        canvas.scaleX = scale
        canvas.scaleY = scale
        local parent = self.parent
        if parent then
            parent.needsDraw = true
        end
    end

    set isFocused( isFocused )
        super( isFocused )
        if not self.hadFirstFocus then
            if isFocused then
                self.hadFirstFocus = true
            end
        elseif isFocused then
            self:flyInFocused()
        else
            self:flyOutFocused()
        end
    end

    function flyInFocused( fromLeft )
        self.scale = ANIMATION_SCALE
        self.x = -self.width
        self:animate( "x", 1, ANIMATION_FLY_TIME, nil, ANIMATION_FLY_EASING, ANIMATION_FLY_TIME / 2 - 0.1 )
        self:animate( "scale", 1, ANIMATION_SCALE_TIME, nil, ANIMATION_SCALE_EASING, ANIMATION_FLY_TIME - 0.1, false )
    end

    function flyOutFocused( toRight )
        self:animate( "x", -self.width, ANIMATION_FLY_TIME, nil, ANIMATION_FLY_EASING, ANIMATION_FLY_TIME/2 - 0.1 )
        self:animate( "scale", ANIMATION_SCALE, ANIMATION_SCALE_TIME, nil, ANIMATION_SCALE_EASING, nil, false )
    end
end