local pins = {
    LEFT = 0;
    RIGHT = 1;
}

class TopBarItem extends View 
    
    enum Number pins = {
        LEFT = 0;
        RIGHT = 1;
    }
    
	property Boolean isPressed = false
	property Number pin = TopBarItem.pins.LEFT
	property Boolean isRemoving = false
	property Number allowsNil size
	property Boolean isSeparatorVisible = true

    default height = 14
	default cursor = ClickableCursor.static


    function initialise( ... )
        super( ... )
        self:event( DownMouseEvent, self.onMouseDown )
        self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )
    end

    function onDraw()
        super()
        local width, height, theme, canvas, isPinnedRight = self.width, self.height, self.theme, self.canvas, self.pin == pins.RIGHT

        local rectangleMask = RectangleMask( isPinnedRight and 2 or 1, 1, width - 1, height )
        canvas:fill( theme:value( "fillColour" ), rectangleMask )

        if self.isSeparatorVisible then
            local separatorTopMargin, separatorBottomMargin = theme:value( "separatorTopMargin" ), theme:value( "separatorBottomMargin" )
            canvas:fill( theme:value( "separatorColour" ), theme:value( "separatorIsDashed" ) and SeparatorMask( isPinnedRight and 1 or width, 1 + separatorTopMargin, 1, height - separatorTopMargin - separatorBottomMargin ) or RectangleMask( isPinnedRight and 1 or width, 1 + separatorTopMargin, 1, separatorHeight ) )
        end
    end

    set isSeparatorVisible( isSeparatorVisible )
        self.isSeparatorVisible = isSeparatorVisible    
        self.needsDraw = true
    end

    function updateThemeStyle()
        self.theme.style = self.isPressed and "pressed" or "default"
    end

    set isPressed( isPressed )
        self.isPressed = isPressed
        self:updateThemeStyle()
    end

    function onMouseDown( DownMouseEvent event, Event.phases phase )
        if event.mouseButton == MouseEvent.mouseButtons.LEFT then
            self.isPressed = true
            self.parent.activeView = self
        end
        return true
    end

    function onGlobalMouseUp( UpMouseEvent event, Event.phases phase )
        if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then
            local parent = self.parent
            if parent.activeView == self then
                parent.activeView = nil
            end
            self.isPressed = false
            if self:hitTestEvent( event ) then
                self.eventManager:handleEvent( ActionInterfaceEvent( self, event ) )
                local result = self.eventManager:handleEvent( event )
                return result == nil and true or result
            end
        end
    end

end