local ICON_WIDTH = 9
local ICON_HEIGHT = 9

class ProgramItem extends TopBarItem 
    
	property Boolean isActive = false
	property Program program
	property Boolean isCloseActive = false

    function initialise( ... )
        super( ... )
        self:event( MouseEnteredInterfaceEvent, self.onMouseEntered )
        self:event( MouseExitedInterfaceEvent, self.onMouseExited )
        self:event( MouseMoveEvent, self.onMouseMoved )
    end

    function onDraw()
        super()
        local width, height, theme, canvas, program = self.width, self.height, self.theme, self.canvas, self.program

        local leftMargin, rightMargin, topMargin, bottomMargin, iconTitleMargin, titleStatusMargin = theme:value( "leftMargin" ), theme:value( "rightMargin" ), theme:value( "topMargin" ), theme:value( "bottomMargin" ), theme:value( "iconTitleMargin" ), theme:value( "titleStatusMargin" )
        local maxContentWidth = width - leftMargin - rightMargin

        local titleFont, statusFont = theme:value( "titleFont" ), theme:value( "statusFont" )
        local programTitle, programStatus = program.title, program.status or ""
        local titleWidth, statusWidth = titleFont:getWidth( programTitle ), statusFont:getWidth( programStatus )
        
        local isMouseInView, closeWidth, closeLeftMargin, closeRightMargin, closeSymbol = self.isMouseInView, 0, 0, 0
        if isMouseInView then
            closeLeftMargin = theme:value( "closeLeftMargin" )
            closeRightMargin = theme:value( "closeRightMargin" )
            closeSymbol = theme:value( "closeSymbol" )
            closeWidth = closeSymbol.width
            maxContentWidth = maxContentWidth - closeLeftMargin - closeRightMargin - closeWidth
        end

        local configs = {
            { ICON_WIDTH + iconTitleMargin + titleWidth + titleStatusMargin + statusWidth, true, true, true };
            { titleWidth + titleStatusMargin + statusWidth, false, true, true };
            statusWidth > 0 and { ICON_WIDTH + iconTitleMargin + statusWidth, true, false, true } or nil;
            { ICON_WIDTH + iconTitleMargin + titleWidth, true, true, false };
            { titleWidth, false, true, false };
            { ICON_WIDTH, true, false, false };
        }

        local selectedConfig
        for i, config in ipairs( configs ) do
            if maxContentWidth >= config[1] then
                selectedConfig = config
                break
            end
        end
        selectedConfig = selectedConfig or configs[#configs] -- none of them fit, revert to icon

        local x = math.floor( ( width - selectedConfig[1] ) / 2 ) + 1
        -- Icon
        if selectedConfig[2] then
            canvas:image( program.icon, x, topMargin, ICON_WIDTH, ICON_HEIGHT )
            x = x + ICON_WIDTH + ((selectedConfig[3] or selectedConfig[4]) and iconTitleMargin or 0)
        end

        -- Title
        if selectedConfig[3] then
            canvas:fill( theme:value( "titleColour" ), TextMask( x, 1 + topMargin, titleWidth, titleFont.height, programTitle, titleFont ) )
            x = x + titleWidth + (selectedConfig[4] and titleStatusMargin or 0)
        end

        -- Status
        if selectedConfig[4] then
            canvas:fill( theme:value( "statusColour" ), TextMask( x, 1 + topMargin, statusWidth, statusFont.height, programStatus, statusFont ) )
        end

        -- Close button
        if isMouseInView then
           canvas:fill( theme:value( "closeFillColour" ), RectangleMask( 1, 1, leftMargin + closeLeftMargin + closeWidth + closeRightMargin, height ) )
            canvas:fill( theme:value( "closeSymbolColour" ), SymbolMask( 1 + leftMargin + closeLeftMargin, 1 + math.floor( ( self.height - closeSymbol.height ) / 2 ), closeSymbol ) )
        end
    end

    function updateThemeStyle()
        self.theme.style = self.isCloseActive and ( self.program.programView.isFocused and ( self.isPressed and "closePressedFocused" or "closeHoverFocused" ) or ( self.isPressed and "closePressed" or "closeHover" ) ) or ( self.isPressed and "pressed" or ( self.program.programView.isFocused and "focused" or "default" ) )
    end

    set program( program )
        self.program = program
        self.needsDraw = true
        self:updateThemeStyle()
        self:event( ProgramInformationChangedInterfaceEvent, self.onProgramInformationChanged )
    end

    function onMouseExited( MouseExitedInterfaceEvent event, Event.phases phase )
        self.needsDraw = true
        self.isCloseActive = false
        self:updateThemeStyle()
    end

    function onMouseEntered( MouseEnteredInterfaceEvent event, Event.phases phase )
        if not self:updateIsCloseActive( event.x ) then
            self.needsDraw = true
        end
    end

    function onMouseMoved( MouseMoveEvent event, Event.phases phase )
        self:updateIsCloseActive( event.x )
    end

    function updateIsCloseActive( Number x )
        local theme = self.theme
        local isCloseActive = x <= theme:value( "leftMargin" ) + theme:value( "closeLeftMargin" ) + theme:value( "closeSymbol" ).width + theme:value( "closeRightMargin" )
        if isCloseActive ~= self.isCloseActive then
            self.isCloseActive = isCloseActive
            self:updateThemeStyle()
            self.needsDraw = true
            return true
        end
        return false
    end

    --[[
        @desc Fired when a program changes it's title or status
    ]]
    function onProgramInformationChanged( ProgramInformationChangedInterfaceEvent event, Event.phases phase  )
        if self.program == event.program then
            self.needsDraw = true
        end
    end

    function onGlobalMouseUp( MouseUpEvent event, Event.phases phase )
        local wasPressed = true--self.isPressed
        super( event, phase )
        if wasPressed and self:hitTestEvent( event ) then
            local mouseButton = event.mouseButton
            if self.isCloseActive or mouseButton == MouseEvent.mouseButtons.MIDDLE then
                self.program:close()
            elseif mouseButton == MouseEvent.mouseButtons.LEFT then
                self.program:focus()
                self:updateThemeStyle()
            end
        end
    end

end