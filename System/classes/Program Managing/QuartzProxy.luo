class QuartzProxy

    local _program = Program;

	property Table allowsNil screenBuffer
	property Table allowsNil silicaApplication -- we have to use table because the Application class will be different, we just have to presume it's an Application
	property Table fs = fs -- TODO: .isReadOnly

	property String userDataPath

	property String allowsNil status
    

    function initialise( Program program )
        _program = program
        local applicationUserDataFolder = self.application.userDataFolder
        local identifier = program.identifier
        local folder = applicationUserDataFolder:folderFromPath( identifier )
        if not folder then
            folder = applicationUserDataFolder:makeSubfolder( identifier )
        end

        self.userDataPath = folder.path
    end

    function redraw( Table.allowsNil pixels )
        local programView = _program.programView
        if pixels then
            programView.buffer = pixels
        end
        programView.needsDraw = true
    end

    function QuartzProxy.status:get()
        return _program.status
    end

    set status( status )
        _program.status = status
    end

end