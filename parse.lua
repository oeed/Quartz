{
    FakeFileAssociation = {
        fileEnvironment = 102,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "FileAssociation",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,mime,icon,extensions)",
                    {
                        "\
\9\9self.mime = mime\
\9\9self.icon = icon\
\9\9self.extensions = extensions\
\9\9self.programBundle = nil\
\9\9self.argumentFormat = {}\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "mime",
                        },
                        {
                            allowsNil = false,
                            type = "Icon",
                            name = "icon",
                        },
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "extensions",
                            defaultValue = "{} ",
                        },
                    },
                    [ 6 ] = {
                        "mime",
                        "icon",
                        "extensions",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "FakeFileAssociation",
        fileName = "/src/classes/File Associations/FakeFileAssociation.luo",
    },
    BitmapFont = {
        fileEnvironment = 114,
        enums = {},
        lineNumber = 23,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                decodeCharacter = {
                    "(_C_self_passed,bytes,width,height)",
                    {
                        "\
\9\9local character = {}\
\9\9local s = ceil( height / 8 )\
\9\9local function hasbit( x, y )\
\9\9\9local byte = ( x - 1 ) * s + ceil( y / 8 )\
\9\9\9local index = y % 8\
\9\9\9if index == 0 then index = 8 end\
\9\9\9local s = \"\"\
\9\9\9for i = 1, 8 do\
\9\9\9\9-- log(bytes[byte])\
\9\9\9\9s = s .. ( bhasbit( bytes[byte], i ) and 1 or 0 )\
\9\9\9end\
\9\9\9return bhasbit( bytes[byte], index )\
\9\9end\
\9\9character.width = width\
\9\9for y = 1, height do\
\9\9\9character[y] = {}\
\9\9\9for x = 1, width do\
\9\9\9\9character[y][x] = hasbit( x, y )\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " character\
",
                        },
                        "\9end",
                    },
                    26,
                    {
                        {
                            allowsNil = true,
                            name = "bytes",
                        },
                        {
                            allowsNil = true,
                            name = "width",
                        },
                        {
                            allowsNil = true,
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "bytes",
                        "width",
                        "height",
                    },
                },
                encodeFile = {
                    "(_C_self_passed,file,characters,height,metadata)",
                    {
                        "\
\9\9local h = fs.open( file, \"wb\" )\
\9\9if h then\
\9\9\9for k, v in pairs( metadata or {} ) do\
\9\9\9\9h.write( 0 )\
\9\9\9\9writestring( h, tostring( k ) )\
\9\9\9\9h.write( 0 )\
\9\9\9\9writestring( h, tostring( v ) )\
\9\9\9\9h.write( 0 )\
\9\9\9end\
\9\9\9h.write( 1 )\
\9\9\9h.write( height )\
\9\9\9for _, byte in ipairs( BitmapFont.static:encodeSet( characters, height ) ) do\
\9\9\9\9h.write( byte )\
\9\9\9end\
\9\9\9h.close()\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    111,
                    {
                        {
                            allowsNil = true,
                            name = "file",
                        },
                        {
                            allowsNil = true,
                            name = "characters",
                        },
                        {
                            allowsNil = true,
                            name = "height",
                        },
                        {
                            allowsNil = true,
                            name = "metadata",
                        },
                    },
                    [ 6 ] = {
                        "file",
                        "characters",
                        "height",
                        "metadata",
                    },
                },
                decodeFile = {
                    "(_C_self_passed,file)",
                    {
                        "\
\9\9local h = fs.open( file, \"rb\" )\
\9\9if h then\
\9\9\9local metadata = {}\
\9\9\9local v = h.read()\
\9\9\9while v == 0 do\
\9\9\9\9local key, value = readstring( h ), readstring( h )\
\9\9\9\9metadata[key] = value\
\9\9\9\9v = h.read()\
\9\9\9end\
\9\9\9local height = h.read()\
\9\9\9local bytes = {}\
\9\9\9for byte in h.read do\
\9\9\9\9bytes[#bytes + 1] = byte\
\9\9\9end\
\9\9\9local characters = BitmapFont.static:decodeSet( bytes, height )\
\9\9\9",
                        {
                            " characters, height, metadata\
",
                        },
                        "\9\9end\
\9end",
                    },
                    131,
                    {
                        {
                            allowsNil = true,
                            name = "file",
                        },
                    },
                    [ 6 ] = {
                        "file",
                    },
                },
                convertFile = {
                    "(_C_self_passed,input,output,charsetStart,height,metadata)",
                    {
                        "\
\9\9local newchar = colours.red\
\9\9local filled = colours.white\
\9\9local image = paintutils.loadImage( input )\
\9\9local n = charsetStart or 0\
\
\9\9local chars = { [n] = {} }\
\9\9for x = 1, #image[1] do\
\9\9\9if image[1][x] == newchar then\
\9\9\9\9n = n + 1\
\9\9\9\9chars[n] = {}\
\9\9\9else\
\9\9\9\9for y = 1, #image do\
\9\9\9\9\9chars[n][y] = chars[n][y] or {}\
\9\9\9\9\9chars[n][y][#chars[n][y] + 1] = image[y][x] == filled\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9",
                        {
                            " BitmapFont.encodeFile( output, chars, height, metadata )\
",
                        },
                        "\9end",
                    },
                    151,
                    {
                        {
                            allowsNil = true,
                            name = "input",
                        },
                        {
                            allowsNil = true,
                            name = "output",
                        },
                        {
                            allowsNil = true,
                            name = "charsetStart",
                        },
                        {
                            allowsNil = true,
                            name = "height",
                        },
                        {
                            allowsNil = true,
                            name = "metadata",
                        },
                    },
                    [ 6 ] = {
                        "input",
                        "output",
                        "charsetStart",
                        "height",
                        "metadata",
                    },
                },
                encodeCharacter = {
                    "(_C_self_passed,character,width,height)",
                    {
                        "\
\9\9local bytes = {}\
\9\9for x = 1, width do\
\9\9\9local byte = {}\
\9\9\9local function close()\
\9\9\9\9if #byte == 0 then return end\
\9\9\9\9local n = 0\
\9\9\9\9for i = 1, #byte do\
\9\9\9\9\9n = n * 2 + byte[i]\
\9\9\9\9end\
\9\9\9\9byte = {}\
\9\9\9\9bytes[#bytes + 1] = n\
\9\9\9end\
\9\9\9local function append( b )\
\9\9\9\9byte[#byte + 1] = b and 1 or 0\
\9\9\9\9if #byte == 8 then\
\9\9\9\9\9close()\
\9\9\9\9end\
\9\9\9end\
\9\9\9for y = 1, ceil( height / 8 ) * 8 do\
\9\9\9\9if character[y] then\
\9\9\9\9\9append( character[y][x] )\
\9\9\9\9else\
\9\9\9\9\9append()\
\9\9\9\9end\
\9\9\9end\
\9\9\9close()\
\9\9end\
\9\9",
                        {
                            " bytes\
",
                        },
                        "\9end",
                    },
                    50,
                    {
                        {
                            allowsNil = true,
                            name = "character",
                        },
                        {
                            allowsNil = true,
                            name = "width",
                        },
                        {
                            allowsNil = true,
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "character",
                        "width",
                        "height",
                    },
                },
                encodeSet = {
                    "(_C_self_passed,characters,height)",
                    {
                        "\
\9\9local bytes = {}\
\9\9for k, v in pairs( characters ) do\
\9\9\9local width = v.width or ( v[1] and #v[1] or 0 )\
\9\9\9bytes[#bytes + 1] = k\
\9\9\9bytes[#bytes + 1] = width\
\9\9\9for _, byte in ipairs( BitmapFont.encodeCharacter( v, width, height ) ) do\
\9\9\9\9bytes[#bytes + 1] = byte\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " bytes\
",
                        },
                        "\9end",
                    },
                    81,
                    {
                        {
                            allowsNil = true,
                            name = "characters",
                        },
                        {
                            allowsNil = true,
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "characters",
                        "height",
                    },
                },
                decodeSet = {
                    "(_C_self_passed,bytes,height)",
                    {
                        "\
\9\9local hf = ceil( height / 8 )\
\9\9local characters = {}\
\9\9while bytes[1] do\
\9\9\9local character = bytes[1]\
\9\9\9local width = bytes[2]\
\9\9\9table.remove( bytes, 1 )\
\9\9\9table.remove( bytes, 1 )\
\9\9\9local bitmapcount = hf * width\
\9\9\9characters[character] = BitmapFont.static:decodeCharacter( bytes, width, height )\
\9\9\9for i = 1, bitmapcount do\
\9\9\9\9table.remove( bytes, 1 )\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " characters\
",
                        },
                        "\9end",
                    },
                    94,
                    {
                        {
                            allowsNil = true,
                            name = "bytes",
                        },
                        {
                            allowsNil = true,
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "bytes",
                        "height",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Font",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "BitmapFont",
        fileName = "/src/classes/Font/BitmapFont.luo",
    },
    Symbol = {
        fileEnvironment = 153,
        implements = {},
        lineNumber = 3,
        enums = {},
        fileName = "/src/classes/Symbols/Symbol.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "Symbol",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9if path then\
\9\9\9local symbolName = self.symbolName\
\9\9\9if not symbolName then\
\9\9\9\9error( \"Symbol '\" .. tostring( self ) .. \"' does not have a symbolName.\", 0 )\
\9\9\9end\
\
\9\9\9if symbolClasses[symbolName] then\
\9\9\9\9error( \"Symbol '\" .. tostring( self ) .. \"' attempted to overwite symbol with name '\" .. symbolName .. \"' ('\" .. tostring( symbolClasses[symbolName] ) .. \"')\", 0 )\
\9\9\9end\
\
\9\9\9self.path = path\
\9\9\9symbolClasses[symbolName] = self\
\9\9end\
\9end",
                    },
                    10,
                    {
                        {
                            allowsNil = true,
                            type = "Path",
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
                fromName = {
                    "(_C_self_passed,name)",
                    {
                        "\
\9\9local symbol = symbolClasses[name]\
\9\9if not symbol then\
\9\9\9error( \"Unable to find symbol with name '\" .. name .. \"'\", 3 )\
\9\9end\
\9\9",
                        {
                            " symbol\
",
                        },
                        "\9end",
                    },
                    26,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "name",
                        },
                    },
                    [ 6 ] = {
                        "name",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                path = {
                    allowsNil = true,
                    link = false,
                    type = "Path",
                    readOnly = false,
                },
                width = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "7\
\9\
",
                },
                symbolName = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                    defaultValue = "\"\"\
\9\
",
                },
                height = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "7\
\9\
",
                },
            },
        },
    },
    Mask = {
        fileEnvironment = 121,
        implements = {},
        lineNumber = 25,
        enums = {},
        fileName = "/src/classes/Graphics/Mask.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,width,height,pixels)",
                    {
                        "\
\9\9self.x = x\
\9\9self.y = y\
\9\9self.width = width\
\9\9self.height = height\
\9\9self.pixels = pixels\9\
\9end",
                    },
                    35,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "pixels",
                            defaultValue = "{} ",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "width",
                        "height",
                        "pixels",
                    },
                },
                exclude = {
                    "(_C_self_passed,mask,x,y)",
                    {
                        "\
\9\9",
                        {
                            " shapeMode( self, mask, x, y, function( selfPixel, maskPixel ) return ( not selfPixel and maskPixel ) or ( selfPixel and not maskPixel ) end ) -- can't use ~= as it might be nil\
",
                        },
                        "\9end",
                    },
                    63,
                    {
                        {
                            allowsNil = false,
                            type = "Mask",
                            name = "mask",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "mask",
                        "x",
                        "y",
                    },
                },
                subtract = {
                    "(_C_self_passed,mask,x,y)",
                    {
                        "\
\9\9",
                        {
                            " shapeMode( self, mask, x, y, function( selfPixel, maskPixel ) return selfPixel and not maskPixel end )\
",
                        },
                        "\9end",
                    },
                    47,
                    {
                        {
                            allowsNil = false,
                            type = "Mask",
                            name = "mask",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "mask",
                        "x",
                        "y",
                    },
                },
                intersect = {
                    "(_C_self_passed,mask,x,y)",
                    {
                        "\
\9\9",
                        {
                            " shapeMode( self, mask, x, y, function( selfPixel, maskPixel ) return selfPixel and maskPixel end )\
",
                        },
                        "\9end",
                    },
                    55,
                    {
                        {
                            allowsNil = false,
                            type = "Mask",
                            name = "mask",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "mask",
                        "x",
                        "y",
                    },
                },
                add = {
                    "(_C_self_passed,mask,x,y)",
                    {
                        "\
\9\9",
                        {
                            " shapeMode( self, mask, x, y, function( selfPixel, maskPixel ) return selfPixel or maskPixel end )\
",
                        },
                        "\9end",
                    },
                    71,
                    {
                        {
                            allowsNil = false,
                            type = "Mask",
                            name = "mask",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "mask",
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                x = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                pixels = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                y = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                height = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                width = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
            },
        },
        className = "Mask",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    ChildRepositionedInterfaceEvent = {
        fileEnvironment = 52,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_child_repositioned\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\9\
",
                isSentToSender = "true\
\9\
",
                isSentToParents = "false\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,childView)",
                    {
                        "\
\9\9self.childView = childView\
\9end",
                    },
                    10,
                    {
                        {
                            allowsNil = false,
                            type = "View",
                            name = "childView",
                        },
                    },
                    [ 6 ] = {
                        "childView",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                childView = {
                    allowsNil = false,
                    link = false,
                    type = "View",
                    readOnly = false,
                },
            },
        },
        className = "ChildRepositionedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/ChildRepositionedInterfaceEvent.luo",
    },
    ResizeVerticalCursor = {
        fileEnvironment = 43,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Cursor",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ResizeVerticalCursor",
        fileName = "/src/classes/Cursors/ResizeVerticalCursor.luo",
    },
    ArgumentValueTypeParsingClassException = {
        fileEnvironment = 85,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClassException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Incorrect declaration of function or argument: \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "ArgumentValueTypeParsingClassException",
        fileName = "/src/classes/Exceptions/Class System/ArgumentValueTypeParsingClassException.luo",
    },
    TextBox = {
        fileEnvironment = 217,
        enums = {
            selectionDirections = {
                type = "Number",
                startLine = 54,
                values = "SELECTION_DIRECTIONS\
\
\9\
\
\
\
\9\
",
            },
        },
        lineNumber = 27,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                cursor = "TextCursor.static\
\
\9\
",
                width = "120\
\9\
",
                height = "15\
\9\
",
                isFocused = "false\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    maxScroll = {
                        "(_C_self_passed,maxScroll)\
\9\9self.maxScroll = math.max( maxScroll, 0 )\
\9\9self.scroll = self.scroll -- this will check that the scroll value is okay\
\9end",
                        245,
                    },
                    cursorColour = {
                        "(_C_self_passed,cursorColour)\
\9\9if self.cursorColour ~= cursorColour then\
\9\9\9self.cursorColour = cursorColour\
\9\9\9self.needsDraw = true\
\9\9end\
\9end",
                        144,
                    },
                    isPressed = {
                        "(_C_self_passed,isPressed)\
\9\9self.isPressed = isPressed\
\9\9self:updateThemeStyle()\
\9end",
                        341,
                    },
                    cursorX = {
                        "(_C_self_passed,cursorX)\
\9\9self.cursorX = cursorX\
\
\9\9-- if the cursor is extending past the visible bounds adjust scroll to keep it visible\
\9\9local width, scroll = self.width, self.scroll\
\9\9local relativeX = cursorX - scroll\
\9\9if relativeX < 0 then\
\9\9\9-- the cursor is to the left of the screen\
\9\9\9self.scroll = scroll + relativeX\
\9\9else\
\9\9\9local theme = self.theme\
\9\9\9local leftMargin, rightMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" )\
\9\9\9local rightOverflow = relativeX - width + leftMargin + rightMargin + 1\
\9\9\9if rightOverflow > 0 then\
\9\9\9\9self.scroll = scroll + rightOverflow\
\9\9\9else\
\9\9\9\9self.needsDraw = true -- we can put this here because setting scroll does it, so it's not always needed\
\9\9\9end\
\9\9end\
\9end",
                        250,
                    },
                    isMasked = {
                        "(_C_self_passed,isMasked)\
\9\9self.isMasked = isMasked\
\9\9self.needsDraw = true\
\9end",
                        332,
                    },
                    cursorPosition = {
                        "(_C_self_passed,cursorPosition)\
\9\9cursorPosition = math.max( math.min( cursorPosition, #self.text + 1 ), 1 )\
\9\9self.cursorPosition = cursorPosition\
\9\9self.cursorFlashCounter = 0\
\9\9self:updateSelection()\
\9\9self:updateCursorPosition()\
\9end",
                        189,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9if not isEnabled then\
\9\9\9self:unfocus( TextBox )\
\9\9end\
\9\9self:updateThemeStyle()\
\9end",
                        346,
                    },
                    selectionWidth = {
                        "(_C_self_passed,selectionWidth)\
\9\9self.selectionWidth = selectionWidth\
\9\9self.needsDraw = true\
\9end",
                        276,
                    },
                    selectionPosition = {
                        "(_C_self_passed,selectionPosition)\
\9\9self.selectionPosition = selectionPosition\
\9\9self.cursorFlashCounter = 0\
\9\9self:updateSelection()\
\9\9self.needsDraw = true\
\9end",
                        281,
                    },
                    isFocused = {
                        "(_C_self_passed,isFocused)\
\9\9self.isFocused = isFocused\
\9\9self.cursorPosition = self.cursorPosition or 1\
\9\9self:updateThemeStyle()\
\9end",
                        354,
                    },
                    selectionX = {
                        "(_C_self_passed,selectionX)\
\9\9self.selectionX = selectionX\
\9\9self.needsDraw = true\
\9end",
                        271,
                    },
                    placeholder = {
                        "(_C_self_passed,placeholder)\
\9\9self.placeholder = placeholder\
\9\9self.needsDraw = true\
\9end",
                        327,
                    },
                    text = {
                        "(_C_self_passed,text)\
\9\9self.text = text\
\9\9self:updateMaxScroll()\
\9\9self.needsDraw = true\
\9end",
                        321,
                    },
                    scroll = {
                        "(_C_self_passed,scroll)\
\9\9self.scroll = math.max( math.min( scroll, self.maxScroll ), 0 )\
\9\9self.needsDraw = true\
\9end",
                        240,
                    },
                },
            },
            functions = {
                write = {
                    "(_C_self_passed,text)",
                    {
                        "\
\9\9local t = {}\
\9\9local valid = self.isValidChar\
\9\9local s = \"\"\
\9\9for i = 1, #text do\
\9\9\9local char = sub( text, 1, 1 )\
\9\9\9if valid( self, char ) then\
\9\9\9\9s = s .. char\
\9\9\9end\
\9\9end\
\9\9local text = self.text\
\9\9local cursorPosition, selectionPosition = self.cursorPosition, self.selectionPosition\
\9\9if selectionPosition then\
\9\9\9-- selectionPosition = selectionPosition - 1\
\9\9\9local left, right = math.min( cursorPosition, selectionPosition ), math.max( cursorPosition, selectionPosition )\
\9\9\9self.text = text:sub( 1, left - 1 ) .. s .. text:sub( right )\
\9\9\9self.selectionPosition = nil\
\9\9\9self.cursorPosition =  math.min( cursorPosition, selectionPosition ) + #s\
\9\9else\
\9\9\9self.text = text:sub( 1, cursorPosition - 1 ) .. s .. text:sub( cursorPosition )\
\9\9\9self.cursorPosition =  cursorPosition + #s\
\9\9end\
\9end",
                    },
                    293,
                    {
                        {
                            allowsNil = true,
                            name = "text",
                        },
                    },
                    [ 6 ] = {
                        "text",
                    },
                },
                updateMaxScroll = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local theme = self.theme\
\9\9self.maxScroll = theme:value( \"font\" ):getWidth( self.text ) - ( self.width - theme:value( \"leftMargin\" ) - theme:value( \"rightMargin\" ) )\
\9end",
                    },
                    235,
                    {},
                    [ 6 ] = {},
                },
                onKeyboardShortcut = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isFocused then\
\9\9\9if event:matchesKeys( { \"ctrl\", \"left\" } ) or event:matchesKeys( { \"home\" } ) then\
\9\9\9\9self.selectionPosition = nil\
\9\9\9\9self.cursorPosition = 1\
\9\9\9elseif event:matchesKeys( { \"ctrl\", \"right\" } ) or event:matchesKeys( { \"end\" } ) then\
\9\9\9\9self.selectionPosition = nil\
\9\9\9\9self.cursorPosition = #self.text + 1\
\9\9\9elseif event:matchesKeys( { \"ctrl\", \"shift\", \"left\" } ) then\
\9\9\9\9self.selectionPosition = 1\
\9\9\9elseif event:matchesKeys( { \"ctrl\", \"shift\", \"right\" } ) then\
\9\9\9\9self.selectionPosition = #self.text + 1\
\9\9\9elseif event:matchesKeys( { \"alt\", \"left\" } ) then\
\9\9\9\9self.cursorPosition = self:wordPosition( self.cursorPosition, SELECTION_DIRECTIONS.LEFT )\
\9\9\9elseif event:matchesKeys( { \"alt\", \"right\" } ) then\
\9\9\9\9local _, right = self:wordPosition( self.cursorPosition, SELECTION_DIRECTIONS.RIGHT )\
\9\9\9\9self.cursorPosition = right\
\9\9\9elseif event:matchesKeys( { \"alt\", \"shift\", \"left\" } ) then\
\9\9\9\9self.selectionPosition = self:wordPosition( math.min( self.cursorPosition, self.selectionPosition or math.huge ), SELECTION_DIRECTIONS.LEFT )\
\9\9\9elseif event:matchesKeys( { \"alt\", \"shift\", \"right\" } ) then\
\9\9\9\9local _, right = self:wordPosition( math.max( self.cursorPosition, self.selectionPosition or 0), SELECTION_DIRECTIONS.RIGHT )\
\9\9\9\9self.selectionPosition = right\
\9\9\9elseif event:matchesKeys( { \"shift\", \"left\" } ) then\
\9\9\9\9local selectionPosition = self.selectionPosition\
\9\9\9\9if selectionPosition then\
\9\9\9\9\9self.selectionPosition = math.max( 1, selectionPosition - 1 )\
\9\9\9\9else\
\9\9\9\9\9self.selectionPosition = math.max( 1, self.cursorPosition - 1 )\
\9\9\9\9end\
\9\9\9elseif event:matchesKeys( { \"shift\", \"right\" } ) then\
\9\9\9\9local selectionPosition = self.selectionPosition\
\9\9\9\9if selectionPosition then\
\9\9\9\9\9self.selectionPosition = math.min( #self.text + 1, selectionPosition + 1 )\
\9\9\9\9else\
\9\9\9\9\9self.selectionPosition = math.min( #self.text + 1, self.cursorPosition + 1 )\
\9\9\9\9end\
\9\9\9elseif event:matchesKeys( { \"ctrl\", \"a\" } ) then\
\9\9\9\9self.cursorPosition = 1\
\9\9\9\9self.selectionPosition = #self.text + 1\
\9\9\9elseif event:matchesKeys( { \"ctrl\", \"backspace\" } ) then\
\9\9\9\9local cursorPosition = self.cursorPosition\
\9\9\9\9self.selectionPosition = nil\
\9\9\9\9self.cursorPosition = 1\
\9\9\9\9self.text = self.text:sub( cursorPosition )\
\9\9\9else\
\9\9\9\9",
                        {
                            " false\
",
                        },
                        "\9\9\9end\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    519,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onMouseScroll = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled then\
\9\9\9self.scroll = self.scroll + event.direction * SCROLL_SPEED\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    423,
                    {
                        {
                            allowsNil = false,
                            type = "ScrollMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\
\9\9if self.isFocused then\
\9\9\9local cursorFlashCounter = self.cursorFlashCounter\
\9\9\9local visible = cursorFlashCounter % 2 < 1\
\9\9\9local rem = cursorFlashCounter % 1\
\9\9\9if rem > .85 then\
\9\9\9\9if visible then\
\9\9\9\9\9self.cursorColour = ( rem > .95 and Graphics.colours.LIGHT_GREY ) or Graphics.colours.GREY\
\9\9\9\9else\
\9\9\9\9\9self.cursorColour = ( rem > .95 and Graphics.colours.GREY ) or Graphics.colours.LIGHT_GREY\
\9\9\9\9\9visible = true\
\9\9\9\9end\
\9\9\9elseif not visible then\
\9\9\9\9self.cursorColour = Graphics.colours.WHITE\
\9\9\9else\
\9\9\9\9self.cursorColour = Graphics.colours.BLACK\
\9\9\9end\
\9\9\9self.cursorFlashCounter = cursorFlashCounter + deltaTime * 2\
\9\9end\
\9end",
                    },
                    121,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                onKeyUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isFocused then\
\9\9\9\
\9\9end\
\9end",
                    },
                    471,
                    {
                        {
                            allowsNil = false,
                            type = "UpKeyEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self:event( UpKeyEvent, self.onKeyUp )\
\9\9self:event( DownKeyEvent, self.onKeyDown )\
\9\9self:event( CharacterEvent, self.onCharacter )\
\9\9self:event( DownMouseEvent, self.onMouseDown )\
\9\9self:event( UpMouseEvent, self.onMouseUp )\
\9\9self:event( DragMouseEvent, self.onMouseDrag )\
\9\9self:event( ScrollMouseEvent, self.onMouseScroll )\
\9\9self:event( KeyboardShortcutEvent, self.onKeyboardShortcut )\
\9\9self:event( DoubleClickMouseEvent, self.onMouseDoubleClick )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9end",
                    },
                    60,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                viewToCharCoords = {
                    "(_C_self_passed,x)",
                    {
                        "\
\9\9if x <= 0 then\
\9\9\9",
                        {
                            " 1\
",
                        },
                        "\9\9end\
\9\9local theme = self.theme\
\9\9x = x - theme:value( \"leftMargin\" ) + self.scroll\
\9\9local font = theme:value( \"font\" )\
\9\9local getWidth = font.getWidth\
\9\9local text = self.isMasked and string.rep( string.char( 149 ), #self.text ) or self.text\
\9\9for i = 1, #text do\
\9\9\9local characterWidth = getWidth( font, text:sub( i, i ), true )\
\9\9\9if x <= characterWidth / 2 then\
\9\9\9\9",
                        {
                            " i\
",
                        },
                        "\9\9\9end\
\9\9\9x = x - characterWidth\
\9\9end\
\9\9",
                        {
                            " #text + 1\
",
                        },
                        "\9end",
                    },
                    156,
                    {
                        {
                            allowsNil = true,
                            name = "x",
                        },
                    },
                    [ 6 ] = {
                        "x",
                    },
                },
                onMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self:focus( TextBox )\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    379,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = false\
\9\9\9if self.isEnabled and self:hitTestEvent( event ) then\
\9\9\9\9",
                        {
                            " self.eventManager:handleEvent( event )\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    365,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                charToViewCoords = {
                    "(_C_self_passed,char)",
                    {
                        "\
\9\9local text = self.isMasked and string.rep( string.char( 149 ), #self.text ) or self.text\
\9\9",
                        {
                            " self.theme:value( \"font\" ):getWidth( text:sub( 1, char - 1 ) ) + 1\
",
                        },
                        "\9end",
                    },
                    175,
                    {
                        {
                            allowsNil = true,
                            name = "char",
                        },
                    },
                    [ 6 ] = {
                        "char",
                    },
                },
                updateSelection = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local selectionPosition = self.selectionPosition\
\9\9local isVisible = self.selectionVisible\
\9\9local cursorX = math.max( self:charToViewCoords( self.cursorPosition ) - 1, 0 )\
\9\9local selectionX = selectionPosition and math.max( self:charToViewCoords( selectionPosition ) - 1, 0 )\
\9\9local _x = self.selectionX\
\9\9if not isVisible and selectionPosition then\
\9\9\9if selectionX and not _x then self.selectionX = selectionX end\
\9\9\9self.selectionVisible = true\
\9\9end\
\
\9\9local x, width, f\
\9\9if not selectionPosition or cursorX == selectionX then\
\9\9\9local _width = self.selectionWidth\
\9\9\9if not selectionPosition and not _x then\
\9\9\9\9self.selectionX = cursorX\
\9\9\9\9self.selectionWidth = 0\
\9\9\9\9",
                        {
                            "\
",
                        },
                        "\9\9\9end\
\9\9\9x = cursorX\
\9\9\9width = 0\
\9\9\9f = function() self.selectionVisible = false end\
\9\9else\
\9\9\9x = math.min( cursorX, selectionX )\
\9\9\9width = math.max( cursorX, selectionX ) - x\
\9\9end\
\9\9self:animate( \"selectionX\", x, CURSOR_ANIMATION_SPEED, nil, CURSOR_ANIMATION_EASING )\
\9\9self:animate( \"selectionWidth\", width, CURSOR_ANIMATION_SPEED, f, CURSOR_ANIMATION_EASING )\
\9end",
                    },
                    202,
                    {},
                    [ 6 ] = {},
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas, isFocused = self.width, self.height, self.theme, self.canvas, self.isFocused\
\9\9local font, text = theme:value( \"font\" ), ( self.isMasked and string.rep( string.char( 149 ), #self.text ) or self.text )\
\
\9\9local roundedRectangle = RoundedRectangleMask( 1, 1, width, height, theme:value( \"cornerRadius\" ) )\
\9\9local fillColour = theme:value( \"fillColour\" )\
\9\9canvas:fill( fillColour, roundedRectangle )\
\
\9\9local leftMargin, rightMargin, topMargin, bottomMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" )\
\
\9\9local outlineThickness = theme:value( \"outlineThickness\" )\
\9\9if #text == 0 then\
\9\9\9local placeholder = self.placeholder\
\9\9\9if placeholder then\
\9\9\9\9canvas:fill( theme:value( \"placeholderColour\" ),  roundedRectangle:intersect( TextMask( leftMargin + 1, topMargin + 1, width - leftMargin - rightMargin, height - topMargin - bottomMargin, self.placeholder, font ) ) )\
\9\9\9end\
\9\9else\
\9\9\9local scroll = self.scroll\
\9\9\9if isFocused then\
\9\9\9\9local fontHeight = font.height\
\9\9\9\9local contentMask = RectangleMask( leftMargin - 1, 1 + outlineThickness, width - leftMargin - rightMargin + 4, height - 2 * outlineThickness )\
\9\9\9\9if self.selectionVisible then\
\9\9\9\9\9local selectionWidth = self.selectionWidth\
\9\9\9\9\9if selectionWidth > 0 then\
\9\9\9\9\9\9local selectionLeftMargin, selectionRightMargin, selectionTopMargin, selectionBottomMargin = theme:value( \"selectionLeftMargin\" ), theme:value( \"selectionRightMargin\" ), theme:value( \"selectionTopMargin\" ), theme:value( \"selectionBottomMargin\" )\
\9\9\9\9\9\9local selectionMask = RoundedRectangleMask( leftMargin + 1 + self.selectionX - scroll - selectionLeftMargin, math.floor( fontHeight / 2 ) - selectionTopMargin, selectionWidth + selectionLeftMargin + selectionRightMargin, fontHeight + selectionTopMargin + selectionBottomMargin, theme:value( \"selectionRadius\" ) )\
\9\9\9\9\9\9canvas:fill( theme:value( \"selectionColour\" ), selectionMask:intersect( contentMask ) )\
\9\9\9\9\9end\
\9\9\9\9else\
\9\9\9\9\9local cursorPosition = self.cursorPosition\
\9\9\9\9\9local cursorColour = self.cursorColour\
\9\9\9\9\9if cursorColour ~= fillColour then\
\9\9\9\9\9\9local cursorMask = RectangleMask( leftMargin + 1 + self.cursorX - scroll, math.floor( fontHeight / 2 ), 1, fontHeight + 1 )\
\9\9\9\9\9\9canvas:fill( cursorColour, cursorMask:intersect( contentMask ) )\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\
\9\9\9local textMask = roundedRectangle:intersect( TextMask( leftMargin + 1 - scroll, topMargin + 1, font:getWidth( text ), height - topMargin - bottomMargin, text, font ) )\
\9\9\9canvas:fill( theme:value( \"textColour\" ), textMask\9)\
\9\9\9canvas:fill( theme:value( \"fadeOneColour\" ), OutlineMask( leftMargin, topMargin, width - leftMargin - rightMargin + 2, height - topMargin - bottomMargin + 2 * outlineThickness ):intersect( textMask )\9 )\
\9\9\9canvas:fill( theme:value( \"fadeTwoColour\" ), OutlineMask( leftMargin - 1, topMargin - 1, width - leftMargin - rightMargin + 4, height - topMargin - bottomMargin + 4 * outlineThickness ):intersect( textMask )\9 )\
\9\9\9canvas:fill( theme:value( \"fillColour\" ), OutlineMask( 1 + outlineThickness, 1 + outlineThickness, width - 2 * outlineThickness, height - 2 * outlineThickness, leftMargin - 2 - outlineThickness, topMargin - 2 - outlineThickness, rightMargin - 2 - outlineThickness, bottomMargin - 2 - outlineThickness ):intersect( textMask ) )\
\9\9end\
\9\9canvas:outline( theme:value( \"outlineColour\" ), roundedRectangle, outlineThickness )\
\9end",
                    },
                    74,
                    {},
                    [ 6 ] = {},
                },
                onKeyDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isFocused then\
\9\9\9local keyCode = event.keyCode\
\9\9\9local text = self.text\
\9\9\9local cursorPosition = self.cursorPosition\
\9\9\9local selectionPosition = self.selectionPosition\
\
\9\9\9if keyCode == keys.backspace then\
\9\9\9\9if selectionPosition then\
\9\9\9\9\9self:write \"\"\
\9\9\9\9elseif cursorPosition > 1 then\
\9\9\9\9\9self.text = text:sub( 1, cursorPosition - 2 ) .. text:sub( cursorPosition )\
\9\9\9\9\9self.cursorPosition = cursorPosition - 1\
\9\9\9\9end\
\9\9\9elseif keyCode == keys.enter then\
\9\9\9\9self.eventManager:handleEvent( ActionInterfaceEvent( self, event ) )\
\9\9\9\9self:unfocus()\
\9\9\9elseif keyCode == keys.left then\
\9\9\9\9if selectionPosition then\
\9\9\9\9\9self.selectionPosition = nil\
\9\9\9\9\9self.cursorPosition = math.min( cursorPosition, selectionPosition )\
\9\9\9\9else\
\9\9\9\9\9self.cursorPosition = cursorPosition - 1\
\9\9\9\9end\
\9\9\9elseif keyCode == keys.right then\
\9\9\9\9if selectionPosition then\
\9\9\9\9\9self.selectionPosition = nil\
\9\9\9\9\9self.cursorPosition = math.max( cursorPosition, selectionPosition )\
\9\9\9\9else\
\9\9\9\9\9self.cursorPosition = cursorPosition + 1\
\9\9\9\9end\
\9\9\9elseif keyCode == keys.delete then\
\9\9\9\9if selectionPosition then\
\9\9\9\9\9self:write \"\"\
\9\9\9\9elseif cursorPosition < #text + 1 then\
\9\9\9\9\9self.text = text:sub( 1, cursorPosition - 1 ) .. text:sub( cursorPosition + 1 )\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    430,
                    {
                        {
                            allowsNil = false,
                            type = "DownKeyEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onMouseDrag = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isPressed and self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = true\
\9\9\9self.selectionPosition = self:viewToCharCoords( event.x )\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    415,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and ( self.isPressed and \"pressed\" or ( self.isFocused and \"focused\" or \"default\" ) ) or \"disabled\"\
\9end",
                    },
                    337,
                    {},
                    [ 6 ] = {},
                },
                updateCursorPosition = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local value = math.max( self:charToViewCoords( self.selectionPosition or self.cursorPosition ) - 1, 0 )\
\9\9self:animate( \"cursorX\", value, CURSOR_ANIMATION_SPEED, nil, CURSOR_ANIMATION_EASING )\
\9end",
                    },
                    197,
                    {},
                    [ 6 ] = {},
                },
                isValidChar = {
                    "(_C_self_passed,character)",
                    {
                        "\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    185,
                    {
                        {
                            allowsNil = true,
                            name = "character",
                        },
                    },
                    [ 6 ] = {
                        "character",
                    },
                },
                wordPosition = {
                    "(_C_self_passed,fromPosition,direction,allowMiddlePunctuation)",
                    {
                        "\
\9\9local text = self.text\
\9\9local left, right\
\9\9local function go( from, to, dir )\
\9\9\9local offset = 0\
\9\9\9local hasFound = false\
\9\9\9for i = from, to, dir do\
\9\9\9\9local char = text:sub( i - 1, i - 1 )\
\9\9\9\9local isPunctuation = char:match( \"%p\" )\
\9\9\9\9local isSpace = char:match( \"[%s%c]\" )\
\9\9\9\9if hasFound and ( isSpace or ( not allowMiddlePunctuation and isPunctuation ) ) then\
\9\9\9\9\9return i - offset\
\9\9\9\9elseif allowMiddlePunctuation and isPunctuation then\
\9\9\9\9\9offset = dir\
\9\9\9\9elseif not isSpace and not isPunctuation then\
\9\9\9\9\9hasFound = true\
\9\9\9\9\9offset = 0\
\9\9\9\9end\
\9\9\9end\
\9\9\9return to\
\9\9end\
\9\9if direction == SELECTION_DIRECTIONS.LEFT or direction == SELECTION_DIRECTIONS.BOTH then\
\9\9\9left = go( fromPosition, 1, -1 )\
\9\9end\
\9\9if direction == SELECTION_DIRECTIONS.RIGHT or direction == SELECTION_DIRECTIONS.BOTH then\
\9\9\9right = go( fromPosition + 1, #text + 2, 1 ) - 1\
\9\9end\
\9\9",
                        {
                            " left, right\
",
                        },
                        "\9end",
                    },
                    484,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "fromPosition",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "direction",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "allowMiddlePunctuation",
                            defaultValue = "true ",
                        },
                    },
                    [ 6 ] = {
                        "fromPosition",
                        "direction",
                        "allowMiddlePunctuation",
                    },
                },
                onCharacter = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isFocused then\
\9\9\9self:write( event.character )\
\9\9end\
\9end",
                    },
                    477,
                    {
                        {
                            allowsNil = false,
                            type = "CharacterEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onMouseDoubleClick = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9local left, right = self:wordPosition( self:viewToCharCoords( event.x ), SELECTION_DIRECTIONS.BOTH )\
\9\9\9if left ~= right then\
\9\9\9\9self.selectionPosition = right\
\9\9\9\9self.cursorPosition = left\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    386,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = true\
\9\9\9if self.application.keyboardShortcutManager:isOnlyKeyDown( \"shift\" ) then\
\9\9\9\9self.selectionPosition = self:viewToCharCoords( event.x )\
\9\9\9else\
\9\9\9\9self.selectionPosition = nil\
\9\9\9\9self.cursorPosition = self:viewToCharCoords( event.x )\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    402,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                maxScroll = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                cursorColour = {
                    allowsNil = false,
                    link = false,
                    type = "Graphics.colours",
                    readOnly = false,
                    defaultValue = "Graphics.colours.BLACK;\
\
\9\
",
                },
                selectionVisible = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\9\
",
                },
                selectionPosition = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                cursorX = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                isMasked = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false \
\
\9\
",
                },
                text = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                    defaultValue = "\"\"\
\9\
",
                },
                maximumLength = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                selectionWidth = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                placeholder = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                cursorPosition = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                selectionX = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                scroll = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                cursorFlashCounter = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
            },
        },
        className = "TextBox",
        fileName = "/src/classes/Views/TextBox.luo",
    },
    Icon = {
        fileEnvironment = 136,
        enums = {
            iconValues = {
                type = "Number",
                startLine = 17,
                values = "iconValues\
\
\
\9\
",
            },
        },
        lineNumber = 14,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                fromIcon = {
                    "(_C_self_passed,bytes)",
                    {
                        "\
\9\9local pointer = 1 -- the index of the byte to read next\
\9\9local bitpointer = 1 -- the index of the bit to read next\
\9\9\
\9\9local bitcache = {}\
\9\9local function readByteRaw()\
\9\9\9local b = bytes[pointer]\
\9\9\9pointer = pointer +1\
\9\9\9if b == nil then\
\9\9\9\9error(\"unexpected end-of-stream \"..pointer, 2)\
\9\9\9end\
\9\9\9return b\
\9\9end\
\9\9local function readBit()\
\9\9\9if bitcache[1] == nil then\
\9\9\9\9bitcache = {}\
\9\9\9\9local byte = readByteRaw()\
\9\9\9\9bitcache[1] = byte >= 128\
\9\9\9\9bitcache[2] = (byte % 128) >= 64\
\9\9\9\9bitcache[3] = (byte % 64) >= 32\
\9\9\9\9bitcache[4] = (byte % 32) >= 16\
\9\9\9\9bitcache[5] = (byte % 16) >= 8\
\9\9\9\9bitcache[6] = (byte % 8) >= 4\
\9\9\9\9bitcache[7] = (byte % 4) >= 2\
\9\9\9\9bitcache[8] = (byte % 2) >= 1\
\9\9\9\9bitpointer = 1\
\9\9\9end\
\9\9\9local b = bitcache[bitpointer]\
\9\9\9bitpointer = bitpointer +1\
\9\9\9if bitpointer > 8 then\
\9\9\9\9bitcache = {}\
\9\9\9\9bitpointer = 1\
\9\9\9end\
\9\9\9if b == false then\
\9\9\9\9return 0\
\9\9\9elseif b == true then\
\9\9\9\9return 1\
\9\9\9end\
\9\9\9return b\
\9\9end\
\9\9local function readBits( nbits )\
\9\9\9local t = {}\
\9\9\9for a = 1, nbits do\
\9\9\9\9t[a] = readBit()\
\9\9\9end\
\9\9\9return t\
\9\9end\
\9\9local function readNumber( nbits )\
\9\9\9nbits = math.floor( nbits )\
\9\9\9if nbits <= 0 then\
\9\9\9\9return\
\9\9\9elseif nbits == 1 then\
\9\9\9\9return readBit()\
\9\9\9else\
\9\9\9\9local n = 0\
\9\9\9\9for a = nbits - 1, 0, -1 do\
\9\9\9\9\9n = n + readBit() * 2^a\
\9\9\9\9end\
\9\9\9\9return n\
\9\9\9end\
\9\9end\
\9\9local function readByte()\
\9\9\9if bitpointer == 1 then\
\9\9\9\9return readByteRaw()\
\9\9\9else\
\9\9\9\9return readBit() * 128 + readBit() * 64 + readBit() * 32 + readBit() * 16 + readBit() * 8 + readBit() * 4 + readBit() * 2 + readBit()\
\9\9\9end\
\9\9end\
\9\9local function readWord()\
\9\9\9return readByte()  *  256 + readByte()\
\9\9end\
\9\9local function readInteger()\
\9\9\9return readByte() * 2^24 + readByte() * 2^16 + readByte() * 256 + readByte()\
\9\9end\
\
\9\9local images = {}\
\9\9if readNumber( 24 ) ~= iconValues.SIGNATURE then\
\9\9\9error( \"invalid signature!\", 2 )\
\9\9end\
\9\9local sizeCount = readByte()\
\9\9local startIndex = 6 + 4 * sizeCount\
\9\9for i = 1, sizeCount do\
\9\9\9local length = readInteger()\
\9\9\9local sizeBytes = {}\
\9\9\9for n = 1, length do\
\9\9\9\9sizeBytes[n] = readByte()\
\9\9\9end\
\9\9\9local image = Image.static:fromUniversalCompressedGraphics( sizeBytes )\
\9\9\9table.insert( images, image )\
\9\9\9startIndex = startIndex + length + 1 \
\9\9end\
\9\9",
                        {
                            " Icon( images, bytes )\
",
                        },
                        "\9end",
                    },
                    46,
                    {
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "bytes",
                        },
                    },
                    [ 6 ] = {
                        "bytes",
                    },
                },
                fromFile = {
                    "(_C_self_passed,file)",
                    {
                        "\
\9\9if file.metadata.mime == mimes.SICON then\
\9\9\9",
                        {
                            " Icon.static:fromIcon( file.binaryContents )\
",
                        },
                        "\9\9end\
\9end",
                    },
                    158,
                    {
                        {
                            allowsNil = false,
                            type = "File",
                            name = "file",
                        },
                    },
                    [ 6 ] = {
                        "file",
                    },
                },
                fromNameInBundle = {
                    "(_C_self_passed,name,bundle)",
                    {
                        "\
\9\9",
                        {
                            " Icon.static:fromFile( bundle:file( name, ICON_MIMES ) )\
",
                        },
                        "\9end",
                    },
                    154,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "name",
                        },
                        {
                            allowsNil = false,
                            type = "Any",
                            name = "bundle",
                        },
                    },
                    [ 6 ] = {
                        "name",
                        "bundle",
                    },
                },
                isMIME = {
                    "(_C_self_passed,mime)",
                    {
                        "\
\9\9",
                        {
                            " mime and availableMimes[mime] or false\
",
                        },
                        "\9end",
                    },
                    143,
                    {
                        {
                            allowsNil = true,
                            type = "String",
                            name = "mime",
                        },
                    },
                    [ 6 ] = {
                        "mime",
                    },
                },
                fromName = {
                    "(_C_self_passed,name)",
                    {
                        "\
\9\9local resource = Resource( name, ICON_MIMES )\
\9\9if resource then\
\9\9\9",
                        {
                            " Icon.static:fromResource( resource )\
",
                        },
                        "\9\9end\
\9end",
                    },
                    147,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "name",
                        },
                    },
                    [ 6 ] = {
                        "name",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Image",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    pixels = {
                        "(_C_self_passed,pixels)\
\9\9self.pixels = pixels\
\9\9\
\9\9local scaledCache, width, height = {}, self.width, self.height\
\9\9scaledCache[width .. \":\" .. height] = { pixels, width, height };\
\9\9self.scaledCache = scaledCache\
\9end",
                        38,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,images,contents)",
                    {
                        "\
\9\9local maxSize = 0\
\9\9local maxWidth, maxWidth\
\9\9local pixels\
\9\9for i, image in ipairs( images ) do\
\9\9\9local width, height = image.width, image.height\
\9\9\9local size = width * height\
\9\9\9if size > maxSize then\
\9\9\9\9maxSize = size\
\9\9\9\9pixels = image.pixels\
\9\9\9\9maxWidth = width\
\9\9\9\9maxHeight = height\
\9\9\9end\
\9\9end\
\9\9self.images = images\
\9\9super( pixels, maxWidth, maxHeight, contents )\
\9end",
                    },
                    20,
                    {
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "images",
                        },
                        {
                            allowsNil = true,
                            type = "Any",
                            name = "contents",
                        },
                    },
                    [ 6 ] = {
                        "images",
                        "contents",
                    },
                },
                getScaledPixels = {
                    "(_C_self_passed,maximumWidth,maximumHeight,method)",
                    {
                        "\
\9\9size = math.floor( math.min( maximumWidth, maximumHeight ) + 0.5 )\
\
\9\9local scaledCache = self.scaledCache\
\9\9local cache = scaledCache[size]\
\9\9if cache then\
\9\9\9",
                        {
                            " cache[1]",
                            " cache[2]",
                            " cache[3]\
",
                        },
                        "\9\9end\
\
\9\9local width, height, pixels = self.width, self.height, self.pixels\
\
\9\9local bestImage\
\9\9local bestDiff = math.huge\
\9\9for i, image in ipairs( self.images ) do\
\9\9\9local width, height = image.width, image.height\
\9\9\9local diff = math.abs( math.max( width, height ) - size )\
\9\9\9if diff < bestDiff then\
\9\9\9\9bestImage = image\
\9\9\9\9bestDiff = diff\
\9\9\9end\
\9\9end\
\
\9\9local pixels, pixelsWidth, pixelsHeight = bestImage:getScaledPixels( size, size, method )\
\9\9local n = 0\
\9\9for k, v in pairs(pixels) do\
\9\9\9n = n + 1\
\9\9end\
\9\9scaledCache[size] = { pixels, pixelsWidth, pixelsHeight }\
\9\9",
                        {
                            " pixels, pixelsWidth, pixelsHeight\
",
                        },
                        "\9end",
                    },
                    164,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "maximumWidth",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "maximumHeight",
                            defaultValue = "maximumWidth",
                        },
                        {
                            allowsNil = false,
                            type = "Image.scaleMethods",
                            name = "method",
                            defaultValue = "Image.scaleMethods.FIT ",
                        },
                    },
                    [ 6 ] = {
                        "maximumWidth",
                        "maximumHeight",
                        "method",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                images = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
            },
        },
        className = "Icon",
        fileName = "/src/classes/Icon.luo",
    },
    ProgramEnvironment = {
        fileEnvironment = 13,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/System/classes/Program Managing/ProgramEnvironment.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,program)",
                    {
                        "\
        self.program = program\
        self:loadDefaultVariables()\
    end",
                    },
                    7,
                    {
                        {
                            allowsNil = true,
                            name = "program",
                        },
                    },
                    [ 6 ] = {
                        "program",
                    },
                },
                loadShell = {
                    "(_C_self_passed)",
                    {
                        "\
        local bExit = false\
        local sDir = \"\"\
        local sPath = \".:/rom/programs\"\
        local tAliases = {}\
        local tProgramStack = { self.program.bootPath }\
\
        local shell = {}\
        local tEnv = {\
            [ \"shell\" ] = shell,\
        }\
\
        -- Colours\
        local promptColour, textColour, bgColour\
        if term.isColour() then\
            promptColour = colours.yellow\
            textColour = colours.white\
            bgColour = colours.black\
        else\
            promptColour = colours.white\
            textColour = colours.white\
            bgColour = colours.black\
        end\
\
        local function run( _sCommand, ... )\
            local sPath = shell.resolveProgram( _sCommand )\
            if sPath ~= nil then\
                tProgramStack[#tProgramStack + 1] = sPath\
                if multishell then\
                    multishell.setTitle( multishell.getCurrent(), fs.getName( sPath ) )\
                end\
                local result = os.run( tEnv, sPath, ... )\
                tProgramStack[#tProgramStack] = nil\
                if multishell then\
                    if #tProgramStack > 0 then\
                        multishell.setTitle( multishell.getCurrent(), fs.getName( tProgramStack[#tProgramStack] ) )\
                    else\
                        multishell.setTitle( multishell.getCurrent(), \"shell\" )\
                    end\
                end\
                return result\
            else\
                printError( \"No such program\" )\
                return false\
            end\
        end\
\
        local function tokenise( ... )\
            local sLine = table.concat( { ... }, \" \" )\
            local tWords = {}\
            local bQuoted = false\
            for match in string.gmatch( sLine .. \"\\\"\", \"(.-)\\\"\" ) do\
                if bQuoted then\
                    table.insert( tWords, match )\
                else\
                    for m in string.gmatch( match, \"[^ \\t]+\" ) do\
                        table.insert( tWords, m )\
                    end\
                end\
                bQuoted = not bQuoted\
            end\
            return tWords\
        end\
\
        -- Install shell API\
        function shell.run( ... )\
            local tWords = tokenise( ... )\
            local sCommand = tWords[1]\
            if sCommand then\
                return run( sCommand, unpack( tWords, 2 ) )\
            end\
            return false\
        end\
\
        function shell.exit()\
            bExit = true\
        end\
\
        function shell.dir()\
            return sDir\
        end\
\
        function shell.setDir( _sDir )\
            sDir = _sDir\
        end\
\
        function shell.path()\
            return sPath\
        end\
\
        function shell.setPath( _sPath )\
            sPath = _sPath\
        end\
\
        function shell.resolve( _sPath )\
            local sStartChar = string.sub( _sPath, 1, 1 )\
            if sStartChar == \"/\" or sStartChar == \"\\\\\" then\
                return fs.combine( \"\", _sPath )\
            else\
                return fs.combine( sDir, _sPath )\
            end\
        end\
\
        function shell.resolveProgram( _sCommand )\
            -- Substitute aliases firsts\
            if tAliases[ _sCommand ] ~= nil then\
                _sCommand = tAliases[ _sCommand ]\
            end\
\
            -- If the path is a global path, use it directly\
            local sStartChar = string.sub( _sCommand, 1, 1 )\
            if sStartChar == \"/\" or sStartChar == \"\\\\\" then\
                local sPath = fs.combine( \"\", _sCommand )\
                if fs.exists( sPath ) and not fs.isDir( sPath ) then\
                    return sPath\
                end\
                return nil\
            end\
            \
            -- Otherwise, look on the path variable\
            for sPath in string.gmatch(sPath, \"[^:]+\") do\
                sPath = fs.combine( shell.resolve( sPath ), _sCommand )\
                if fs.exists( sPath ) and not fs.isDir( sPath ) then\
                    return sPath\
                end\
            end\
            \
            -- Not found\
            return nil\
        end\
\
        function shell.programs( _bIncludeHidden )\
            local tItems = {}\
            \
            -- Add programs from the path\
            for sPath in string.gmatch(sPath, \"[^:]+\") do\
                sPath = shell.resolve( sPath )\
                if fs.isDir( sPath ) then\
                    local tList = fs.list( sPath )\
                    for n,sFile in pairs( tList ) do\
                        if not fs.isDir( fs.combine( sPath, sFile ) ) and\
                           (_bIncludeHidden or string.sub( sFile, 1, 1 ) ~= \".\") then\
                            tItems[ sFile ] = true\
                        end\
                    end\
                end\
            end \
\
            -- Sort and return\
            local tItemList = {}\
            for sItem, b in pairs( tItems ) do\
                table.insert( tItemList, sItem )\
            end\
            table.sort( tItemList )\
            return tItemList\
        end\
\
        function shell.getRunningProgram()\
            if #tProgramStack > 0 then\
                return tProgramStack[#tProgramStack]\
            end\
            return nil\
        end\
\
        function shell.setAlias( _sCommand, _sProgram )\
            tAliases[ _sCommand ] = _sProgram\
        end\
\
        function shell.clearAlias( _sCommand )\
            tAliases[ _sCommand ] = nil\
        end\
\
        function shell.aliases()\
            -- Add aliases\
            local tCopy = {}\
            for sAlias, sCommand in pairs( tAliases ) do\
                tCopy[sAlias] = sCommand\
            end\
            return tCopy\
        end\
\
        self.environment.shell = shell\
    end",
                    },
                    104,
                    {},
                    [ 6 ] = {},
                },
                loadDefaultVariables = {
                    "(_C_self_passed)",
                    {
                        "\
        local environment = self.environment\
        local program = self.program\
        local programManager, application = program.programManager, self.application\
\
        local quartzProxy = QuartzProxy( program )\
        program.quartzProxy = quartzProxy\
        environment.Quartz = quartzProxy\
\
        -- TODO: maybe we should work out what these are at boot, rather than being hard coded\
        local names = { \"tostring\", \"tonumber\", \"assert\", \"error\", \"pcall\", \"xpcall\", \"setmetatable\", \"getmetatable\", \"rawget\", \"rawset\", \"rawequal\", \"type\", \"next\", \"pairs\", \"ipairs\", \"unpack\", \"select\", \"setfenv\", \"getfenv\", \"coroutine\", \"string\", \"math\", \"table\", \"__inext\", \"_MC_VERSION\", \"_VERSION\", \"_LUAJ_VERSION\", \"_CC_VERSION\", \"print\", \"read\", \"write\", \"printError\", \"keys\", \"colours\", \"help\", \"parallel\", \"rednet\", \"textutils\", \"bit\", \"bit32\", \"vector\", \"colors\", \"term\", \"window\", \"paintutils\", \"peripheral\", \"disk\", \"http\", \"gps\", \"rs\", \"redstone\"\
            ,\"log\", \"logtraceback\" -- TODO: just temporarily\
        }\
        environment.error = log -- TODO: temporary\
\
        for i, name in ipairs( names ) do\
            environment[name] = _G[name]\
        end\
\
        environment._G = environment\
\
        local bundle = program.bundle\
        environment.fs = bundle.fs\
        environment.io = bundle.io\
        function environment.loadstring( ... )\
            local loaded, err = loadstring( ... )\
            if err then error(\"loadstring error: \"..err) end\
            setfenv( loaded, environment )\
            return loaded\
        end\
\
        local envOS = {}\
        environment.os = envOS\
\
        envOS.version = os.version\
        envOS.getComputerID = os.getComputerID\
        envOS.computerID = os.computerID\
        envOS.setAlarm = os.setAlarm\
        envOS.cancelAlarm = os.cancelAlarm\
        envOS.setComputerLabel = os.setComputerLabel\
        envOS.getComputerLabel = os.getComputerLabel\
        envOS.computerLabel = os.computerLabel\
        envOS.time = os.time\
        envOS.day = os.day\
        envOS.clock = os.clock\
        envOS.pullEvent = os.pullEvent\
        envOS.pullEventRaw = os.pullEventRaw\
\
        function envOS.shutdown()\
            program:close( true )\
        end\
        function envOS.reboot()\
            program:close( true )\
            -- TODO: sandbox reboot\
            -- application.session:launchAndView( application.path )\
        end\
\
        function envOS.queueEvent( ... )\
            local t = {...}\
            program:queueEvent( ... )\
        end\
\
        local environmentTimers = {}\
        local function startTimer( time )\
            if type( time ) ~= \"number\" then return error \"expected number\" end\
            id = application:schedule( function()\
                environmentTimers[id] = nil\
                program:queueEvent( \"timer\", id )\
            end, time )\
            environmentTimers[id] = true\
\
            return id\
        end\
        envOS.startTimer = startTimer\
\
        function envOS.cancelTimer( timer )\
            if environmentTimers[id] then\
                application:unschedule( id )\
            end\
        end\
\
        local function sleep( time )\
            local timer = startTimer( time )\
            repeat\
                local sEvent, param = coroutine.yield( \"timer\" )\
            until param == timer\
        end\
        envOS.sleep = sleep\
        environment.sleep = sleep\
        self:loadShell()\
    end",
                    },
                    12,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                environment = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\
\
    \
",
                },
                program = {
                    allowsNil = false,
                    link = false,
                    type = "Program",
                    readOnly = false,
                },
            },
        },
        className = "ProgramEnvironment",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    ClipboardData = {
        fileEnvironment = 32,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/src/classes/Clipboard/ClipboardData.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {
                type = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "ClipboardData",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    ISwitchableView = {
        className = "ISwitchableView",
        enums = {},
        isInterface = true,
        instance = {
            functions = {},
            properties = {
                isOpening = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
                scale = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
            },
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    View = {
        fileEnvironment = 218,
        implements = {},
        lineNumber = 14,
        enums = {
            pins = {
                type = "String",
                startLine = 54,
                values = "pins\
\
\9\
\
\
\
\9\
",
            },
        },
        fileName = "/src/classes/Views/View.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    isVisible = {
                        "(_C_self_passed)\
\9\9return self.parent and self.isVisible -- if we don't have a parent we're effectively not visible\
\9end",
                        318,
                    },
                    isEnabled = {
                        "(_C_self_passed)\
\9\9if not self.isEnabled then\
\9\9\9return false\
\9\9else\
\9\9\9local parent = self.parent\
\9\9\9if parent and not parent.isEnabled then\
\9\9\9\9return false\
\9\9\9else\
\9\9\9\9return true\
\9\9\9end\
\9\9end\
\9end",
                        178,
                    },
                    isFirst = {
                        "(_C_self_passed)\
\9\9return self.index == 1\
\9end",
                        161,
                    },
                    index = {
                        "(_C_self_passed)\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9for i, child in ipairs( parent.children ) do\
\9\9\9\9if child == self then\
\9\9\9\9\9return i\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9return 1\
\9end",
                        195,
                    },
                    shadowMask = {
                        "(_C_self_passed)\
\9\9return self.canvas.contentMask -- self.canvas.mask is the mask of the currently drawn pixels to the canvas, i.e. everything will cast a shadow\
\9end",
                        103,
                    },
                    siblings = {
                        "(_C_self_passed)\
\9\9local siblings = {}\
\
\9\9if self.parent then\
\9\9\9for i, child in ipairs( self.parent.children ) do\
\9\9\9\9if child ~= self then\
\9\9\9\9\9siblings[#siblings + 1] = child\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9return siblings\
\9end",
                        143,
                    },
                    isLast = {
                        "(_C_self_passed)\
\9\9local parent = self.parent\
\9\9return parent and (self.index == #parent.children) or false\
\9end",
                        169,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    width = {
                        "(_C_self_passed,width)\
\9\9if self.width ~= width then\
\9\9\9self.width = width\
\9\9\9self.canvas.width = width\
\9\9\9self.needsDraw = true\
\9\9\9local parent = self.parent\
\9\9\9if parent then\
\9\9\9\9if not self.rightPin then\
\9\9\9\9\9local selfReferences = parent.childPins.references[self]\
\9\9\9\9\9if selfReferences and selfReferences[pins.RIGHT] then\
\9\9\9\9\9\9parent.needsHorizontalPinUpdate = true\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9parent.event:handleEvent( ChildRepositionedInterfaceEvent( self ) )\
\9\9\9end\
\9\9end\
\9end",
                        266,
                    },
                    y = {
                        "(_C_self_passed,y)\
\9\9if self.y ~= y then\
\9\9\9self.y = y\
\9\9\9local parent = self.parent\
\9\9\9if parent then\
\9\9\9\9if not self.topPin then\
\9\9\9\9\9local selfReferences = parent.childPins.references[self]\
\9\9\9\9\9if selfReferences and ( selfReferences[pins.TOP] or selfReferences[pins.BOTTOM] ) then\
\9\9\9\9\9\9parent.needsVerticalPinUpdate = true\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9parent.needsDraw = true\
\9\9\9\9parent.event:handleEvent( ChildRepositionedInterfaceEvent( self ) )\
\9\9\9end\
\9\9end\
\9end",
                        301,
                    },
                    isFocused = {
                        "(_C_self_passed,isFocused)\
\9\9local wasFocused = self.isFocused\
\9\9if wasFocused ~= isFocused then\
\9\9\9self.isFocused = isFocused\
\9\9\9if self:isDefinedfunction( \"updateThemeStyle\" ) then\
\9\9\9\9self:updateThemeStyle()\
\9\9\9end\
\9\9end\
\9end",
                        537,
                    },
                    topPin = {
                        "(_C_self_passed,topPin)\
\9    self.topPin = topPin\
\9    if topPin then\
\9\9    local parsed = MathParser( topPin )\
\9\9    self.parsedPins[pins.TOP] = parsed\
\9\9    local parent = self.parent\
\9\9    if parent then\
\9\9    \9local childPinTable = parent.childPins[self]\
\9\9    \9if childPinTable then\
\9\9    \9\9childPinTable[pins.TOP] = parsed\
\9\9    \9end\
\9\9    \9parent.needsVerticalPinUpdate = true\
\9\9    end\
\9\9end\
\9end",
                        595,
                    },
                    rightPin = {
                        "(_C_self_passed,rightPin)\
\9    self.rightPin = rightPin\
\9    if rightPin then\
\9\9    local parsed = MathParser( rightPin )\
\9\9    self.parsedPins[pins.RIGHT] = parsed\
\9\9    local parent = self.parent\
\9\9    if parent then\
\9\9    \9local childPinTable = parent.childPins[self]\
\9\9    \9if childPinTable then\
\9\9    \9\9childPinTable[pins.RIGHT] = parsed\
\9\9    \9end\
\9\9    \9parent.needsHorizontalPinUpdate = true\
\9\9    end\
\9\9end\
\9end",
                        579,
                    },
                    isVisible = {
                        "(_C_self_passed,isVisible)\
\9\9self.isVisible = isVisible\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9self.parent.needsDraw = true\
\9\9end\
\9end",
                        322,
                    },
                    leftPin = {
                        "(_C_self_passed,leftPin)\
\9    self.leftPin = leftPin\
\9    if leftPin then\
\9\9    local parsed = MathParser( leftPin )\
\9\9    self.parsedPins[pins.LEFT] = parsed\
\9\9    local parent = self.parent\
\9\9    if parent then\
\9\9    \9local childPinTable = parent.childPins[self]\
\9\9    \9if childPinTable then\
\9\9    \9\9childPinTable[pins.LEFT] = parsed\
\9\9    \9end\
\9\9    \9parent.needsHorizontalPinUpdate = true\
\9\9    end\
\9\9end\
\9end",
                        563,
                    },
                    bottomPin = {
                        "(_C_self_passed,bottomPin)\
\9    self.bottomPin = bottomPin\
\9    if bottomPin then\
\9\9    local parsed = MathParser( bottomPin )\
\9\9    self.parsedPins[pins.BOTTOM] = parsed\
\9\9    local parent = self.parent\
\9\9    if parent then\
\9\9    \9local childPinTable = parent.childPins[self]\
\9\9    \9if childPinTable then\
\9\9    \9\9childPinTable[pins.BOTTOM] = parsed\
\9\9    \9end\
\9\9    \9parent.needsVerticalPinUpdate = true\
\9\9    end\
\9\9end\
\9end",
                        611,
                    },
                    index = {
                        "(_C_self_passed,index)\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9local containerChildren = parent.children\
\9\9\9index = math.max( math.min( index, #containerChildren), 1 )\
\
\9\9\9local currentIndex\
\9\9\9for i, child in ipairs( containerChildren ) do\
\9\9\9\9if child == self then\
\9\9\9\9\9currentIndex = i\
\9\9\9\9\9break\
\9\9\9\9end\
\9\9\9end\
\
\9\9\9if currentIndex ~= index then\
\9\9\9\9table.remove( containerChildren, currentIndex )\
\9\9\9\9table.insert( containerChildren, index, self )\
\9\9\9end\
\9\9end\
\9end",
                        210,
                    },
                    needsDraw = {
                        "(_C_self_passed,needsDraw)\
\9\9self.needsDraw = needsDraw\
\9\9if needsDraw then\
\9\9\9local parent = self.parent\
\9\9\9if parent then\
\9\9\9\9parent.needsDraw = needsDraw -- if we need to draw the parent also has to redraw\
\9\9\9end\
\9\9end\
\9end",
                        127,
                    },
                    x = {
                        "(_C_self_passed,x)\
\9\9if self.x ~= x then\
\9\9\9self.x = x\
\9\9\9local parent = self.parent\
\9\9\9if parent then\
\9\9\9\9if not self.leftPin then\
\9\9\9\9\9local selfReferences = parent.childPins.references[self]\
\9\9\9\9\9if selfReferences and ( selfReferences[pins.LEFT] or selfReferences[pins.RIGHT] ) then\
\9\9\9\9\9\9parent.needsHorizontalPinUpdate = true\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9parent.needsDraw = true\
\9\9\9\9parent.event:handleEvent( ChildRepositionedInterfaceEvent( self ) )\
\9\9\9end\
\9\9end\
\9end",
                        284,
                    },
                    height = {
                        "(_C_self_passed,height)\
\9\9if self.height ~= height then\
\9\9\9self.height = height\
\9\9\9self.canvas.height = height\
\9\9\9self.needsDraw = true\
\9\9\9local parent = self.parent\
\9\9\9if parent then\
\9\9\9\9if not self.bottomPin then\
\9\9\9\9\9local selfReferences = parent.childPins.references[self]\
\9\9\9\9\9if selfReferences and selfReferences[pins.BOTTOM] then\
\9\9\9\9\9\9parent.needsVerticalPinUpdate = true\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9parent.event:handleEvent( ChildRepositionedInterfaceEvent( self ) )\
\9\9\9end\
\9\9end\
\9end",
                        248,
                    },
                    shadowSize = {
                        "(_C_self_passed,shadowSize)\
\9\9self.shadowSize = shadowSize\
\9\9self.needsDraw = true \
\9end",
                        107,
                    },
                },
            },
            functions = {
                getCoordinates = {
                    "(_C_self_passed,x,y,parent)",
                    {
                        "\
\9\9local currentParrent = self\
\9\9while currentParrent and currentParrent ~= parent do\
\9\9\9x = x - currentParrent.x + 1\
\9\9\9y = y - currentParrent.y + 1\
\9\9\9currentParrent = currentParrent.parent\
\9\9end\
\
\9\9",
                        {
                            " x, y\
",
                        },
                        "\9end",
                    },
                    369,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Any",
                            name = "parent",
                            defaultValue = "self.application.container ",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "parent",
                    },
                },
                focus = {
                    "(_C_self_passed,filter)",
                    {
                        "\
\9\9self.application:focus( self, filter )\
\9end",
                    },
                    547,
                    {
                        {
                            allowsNil = true,
                            name = "filter",
                        },
                    },
                    [ 6 ] = {
                        "filter",
                    },
                },
                initialiseCanvas = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.canvas = Canvas( self.width, self.height, self )\
\9end",
                    },
                    96,
                    {},
                    [ 6 ] = {},
                },
                unfocus = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.application:unfocus( self )\
\9end",
                    },
                    555,
                    {},
                    [ 6 ] = {},
                },
                getCoordinatesTo = {
                    "(_C_self_passed,x,y,parent)",
                    {
                        "\
\9\9local currentParrent = { parent = self }\
\9\9while currentParrent.parent and currentParrent.parent ~= parent do\
\9\9\9currentParrent = currentParrent.parent\
\9\9\9x = x + currentParrent.x - 1\
\9\9\9y = y + currentParrent.y - 1\
\9\9end\
\9\9",
                        {
                            " x, y\
",
                        },
                        "\9end",
                    },
                    336,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Any",
                            name = "parent",
                            defaultValue = "self.application.container ",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "parent",
                    },
                },
                draw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.canvas:clear()\
\9\9self:onDraw() -- we have no children, just draw our own content\
\9end",
                    },
                    115,
                    {},
                    [ 6 ] = {},
                },
                onGlobalUpSpecialMouseEvents = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self.specialMouseTimes.up[event.mouseButton] = os.clock()\
\9end",
                    },
                    526,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed,dt)",
                    {
                        "\
\9\9local animations = self.animations\
\9\9for i = #animations, 1, -1 do\
\9\9\9local animation = animations[i]\
\9\9\9animation.animation:update( dt )\
\9\9\9if animation.animation.time >= animation.animation.duration then\
\9\9\9\9table.remove( animations, i )\
\9\9\9\9if animation.onFinish then\
\9\9\9\9\9animation.onFinish( self )\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    417,
                    {
                        {
                            allowsNil = true,
                            name = "dt",
                        },
                    },
                    [ 6 ] = {
                        "dt",
                    },
                },
                animateMove = {
                    "(_C_self_passed,x,y,time,onFinish,easing,delay)",
                    {
                        "\
\9\9self:animate( \"x\", x, time, onFinish, easing, delay )\
\9\9self:animate( \"y\", y, time, nil, easing, delay )\
\9end",
                    },
                    465,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "time",
                            defaultValue = "ANIMATION_DEFAULT_TIME",
                        },
                        {
                            allowsNil = true,
                            type = "Function",
                            name = "onFinish",
                        },
                        {
                            allowsNil = false,
                            type = "Animation.easings",
                            name = "easing",
                            defaultValue = "DEFAULT_EASING",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "delay",
                            defaultValue = "0 ",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "time",
                        "onFinish",
                        "easing",
                        "delay",
                    },
                },
                initialise = {
                    "(_C_self_passed,properties)",
                    {
                        "\
\9\9self:initialiseEventManager()\
\9\9self.theme = ThemeOutlet( self )\
\9\9self:initialiseCanvas()\
\
\9\9if properties then\
\9\9\9for k, v in pairs(properties) do\
\9\9\9\9self[k] = v\
\9\9\9end\
\9\9end\
\
\9\9local setPins = {\
\9\9\9[pins.LEFT] = self.leftPin;\
\9\9\9[pins.RIGHT] = self.rightPin;\
\9\9\9[pins.TOP] = self.topPin;\
\9\9\9[pins.BOTTOM] = self.bottomPin;\
\9\9}\
\9\9local parsedPins = self.parsedPins\
\9\9for k, v in pairs( setPins ) do\
\9\9\9parsedPins[k] = MathParser( v )\
\9\9end\
\
\9\9self:event( DownMouseEvent, self.onDownSpecialMouseEvents )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalUpSpecialMouseEvents )\
\9end",
                    },
                    60,
                    {
                        {
                            allowsNil = true,
                            type = "Table",
                            name = "properties",
                        },
                    },
                    [ 6 ] = {
                        "properties",
                    },
                },
                siblingsOfType = {
                    "(_C_self_passed,_class)",
                    {
                        "\
\9\9local siblings = {}\
\
\9\9for i, sibling in ipairs( self.siblings ) do\
\9\9\9if sibling:typeOf( _class ) then\
\9\9\9\9siblings[#siblings + 1] = sibling\
\9\9\9end\
\9\9end\
\
\9\9",
                        {
                            " siblings\
",
                        },
                        "\9end",
                    },
                    236,
                    {
                        {
                            allowsNil = true,
                            name = "_class",
                        },
                    },
                    [ 6 ] = {
                        "_class",
                    },
                },
                hitTestEvent = {
                    "(_C_self_passed,event,parent)",
                    {
                        "\
\9\9if not parent then\
\9\9\9",
                        {
                            " false\
\9\9elseif event:typeOf( MouseEvent ) then\
\9\9\9event:makeRelative( parent )\
\9\9\9local x, y = event.x, event.y\
\9\9\9return self:hitTest( x, y )\
",
                        },
                        "\9\9else\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    401,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Any",
                            name = "parent",
                            defaultValue = "self.parent ",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "parent",
                    },
                },
                dispose = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.eventManager:dispose()\
\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9parent:remove( self )\
\9\9end\
\
\9\9if self.isFocused then\
\9\9\9self:unfocus()\
\9\9end\
\9end",
                    },
                    628,
                    {},
                    [ 6 ] = {},
                },
                onDownSpecialMouseEvents = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local eventManager = self.eventManager\
\9\9local hasHeld, hasDouble = eventManager:hasConnections( HeldMouseEvent ), eventManager:hasConnections( DoubleClickMouseEvent )\
\9\9if hasHeld or hasDouble then\
\9\9\9local mouseButton, time = event.mouseButton, os.clock()\
\9\9\9local specialMouseTimes = self.specialMouseTimes\
\9\9\9local down, timers = specialMouseTimes.down, specialMouseTimes.timers\
\9\9\9local lastMouseDown = down[mouseButton]\
\9\9\9down[mouseButton] = time\
\
\9\9\9if hasDouble then\
\9\9\9\9if lastMouseDown and time - lastMouseDown < MAX_DOUBLE_CLICK_TIME then\
\9\9\9\9\9-- double click\
\9\9\9\9\9if eventManager:handleEvent( DoubleClickMouseEvent( mouseButton, event.x, event.y, event.globalX, event.globalY ) ) then\
\9\9\9\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9\9\9\
\9\9\9-- start a held timer\
\9\9\9if hasHeld then\
\9\9\9\9local application = self.application \
\9\9\9\9local timer = timers[mouseButton]\
\9\9\9\9if timer then\
\9\9\9\9\9application:unschedule( timer )\
\9\9\9\9end\
\
\9\9\9\9local x, y, globalX, globalY = event.x, event.y, event.globalX, event.globalY\
\9\9\9\9timer = application:schedule( function()\
\9\9\9\9\9timers[mouseButton] = nil\
\9\9\9\9\9local lastMouseUp = specialMouseTimes.up[mouseButton]\
\9\9\9\9\9if not lastMouseUp or lastMouseUp < time then\
\9\9\9\9\9\9if eventManager:handleEvent( HeldMouseEvent( mouseButton, x, y, globalX, globalY ) ) then\
\9\9\9\9\9\9\9return true\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end, MIN_MOUSE_HOLD_TIME )\
\9\9\9\9timers[mouseButton] = timer\
\9\9\9end\
\9\9end\
\9end",
                    },
                    481,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                getPosition = {
                    "(_C_self_passed,parent)",
                    {
                        "\
\9\9local selfParent = self.parent\
\9\9if not selfParent or parent == selfParent then\
\9\9\9",
                        {
                            " self.x, self.y\
",
                        },
                        "\9\9else\
\9\9\9local x, y = self:getCoordinatesTo( 1, 1, parent )\
\9\9\9",
                        {
                            " x, y\
",
                        },
                        "\9\9end\
\9end",
                    },
                    353,
                    {
                        {
                            allowsNil = false,
                            type = "Any",
                            name = "parent",
                            defaultValue = "self.application.container ",
                        },
                    },
                    [ 6 ] = {
                        "parent",
                    },
                },
                initialiseEventManager = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.eventManager = EventManager( self )\
\9end",
                    },
                    89,
                    {},
                    [ 6 ] = {},
                },
                clearFocus = {
                    "(_C_self_passed,filter)",
                    {
                        "\
\9\9self.application:clearFocus( filter )\
\9end",
                    },
                    559,
                    {
                        {
                            allowsNil = true,
                            name = "filter",
                        },
                    },
                    [ 6 ] = {
                        "filter",
                    },
                },
                addFocus = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.application:addFocus( self )\
\9end",
                    },
                    551,
                    {},
                    [ 6 ] = {},
                },
                startDragDrop = {
                    "(_C_self_passed,event,data,hideSource,completion,views)",
                    {
                        "\
\9\9self.application.dragDropManager:start( views or { self }, data, event.globalX, event.globalY, hideSource, completion )\
\9end",
                    },
                    533,
                    {
                        {
                            allowsNil = false,
                            type = "MouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "hideSource",
                            defaultValue = "true",
                        },
                        {
                            allowsNil = true,
                            type = "Function",
                            name = "completion",
                        },
                        {
                            allowsNil = true,
                            type = "Table",
                            name = "views",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "data",
                        "hideSource",
                        "completion",
                        "views",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\
\9end",
                    },
                    123,
                    {},
                    [ 6 ] = {},
                },
                animate = {
                    "(_C_self_passed,propertyName,value,time,onFinish,easing,delay,round)",
                    {
                        "\
\9\9-- if the value hasn't changed then just call the callback and return\
\9\9if self[propertyName] == value then\
\9\9\9if onFinish then\
\9\9\9\9onFinish( self )\
\9\9\9end\
\9\9\9",
                        {
                            "\
",
                        },
                        "\9\9end\
\
\9\9local addAnimation = function()\
\9\9\9local animations = self.animations\
\9\9\9for i = #animations, 1, -1 do\
\9\9\9\9if animations[i].label == propertyName then\
\9\9\9\9\9table.remove( animations, i )\
\9\9\9\9end\
\9\9\9end\
\9\9\9\
\9\9\9local animation = Animation( time, self, { [propertyName] = value }, easing, round )\
\9\9\9animations[#animations + 1] = { label = propertyName, animation = animation, onFinish = onFinish }\
\9\9end\
\
\9\9if delay <= 0 then\
\9\9\9addAnimation()\
\9\9else\
\9\9\9self.application:schedule( addAnimation, delay )\
\9\9end\
\9end",
                    },
                    434,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "propertyName",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "value",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "time",
                            defaultValue = "ANIMATION_DEFAULT_TIME",
                        },
                        {
                            allowsNil = true,
                            type = "Function",
                            name = "onFinish",
                        },
                        {
                            allowsNil = false,
                            type = "Animation.easings",
                            name = "easing",
                            defaultValue = "DEFAULT_EASING",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "delay",
                            defaultValue = "0",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "round",
                            defaultValue = "true ",
                        },
                    },
                    [ 6 ] = {
                        "propertyName",
                        "value",
                        "time",
                        "onFinish",
                        "easing",
                        "delay",
                        "round",
                    },
                },
                animateResize = {
                    "(_C_self_passed,width,height,time,onFinish,easing,delay)",
                    {
                        "\
\9\9self:animate( \"width\", width, time, onFinish, easing, delay )\
\9\9self:animate( \"height\", height, time, nil, easing, delay )\
\9end",
                    },
                    473,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "time",
                            defaultValue = "ANIMATION_DEFAULT_TIME",
                        },
                        {
                            allowsNil = true,
                            type = "Function",
                            name = "onFinish",
                        },
                        {
                            allowsNil = false,
                            type = "Animation.easings",
                            name = "easing",
                            defaultValue = "DEFAULT_EASING",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "delay",
                            defaultValue = "0 ",
                        },
                    },
                    [ 6 ] = {
                        "width",
                        "height",
                        "time",
                        "onFinish",
                        "easing",
                        "delay",
                    },
                },
                hitTest = {
                    "(_C_self_passed,x,y)",
                    {
                        "\
\9\9local _x, _y = self.x, self.y\
\9\9",
                        {
                            " self.isVisible and _x <= x\
\9\9   and x <= _x + self.width - 1\
\9\9   and _y <= y and y <= _y + self.height - 1\
\9\9   and ( not self.isCanvasHitTested or self.canvas:hitTest( x - _x + 1, y - _y + 1 ) )\
",
                        },
                        "\9end",
                    },
                    386,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                cursor = {
                    allowsNil = true,
                    link = false,
                    type = "Cursor",
                    readOnly = false,
                },
                x = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                parsedPins = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                isFirst = {
                    allowsNil = true,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
                shadowSize = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                bottomPin = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                siblings = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                topPin = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                isVisible = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
                rightPin = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                leftPin = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                canvas = {
                    allowsNil = false,
                    link = false,
                    type = "Canvas",
                    readOnly = false,
                },
                theme = {
                    allowsNil = false,
                    link = false,
                    type = "ThemeOutlet",
                    readOnly = false,
                },
                shadowMask = {
                    allowsNil = true,
                    link = false,
                    type = "Mask",
                    readOnly = false,
                },
                specialMouseTimes = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{ timers = {}; up = {}; down = {}; }\
\
\9\
",
                },
                animations = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{ names = {} }\
\
\9\
",
                },
                isCanvasHitTested = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                eventManager = {
                    allowsNil = false,
                    link = false,
                    type = "EventManager",
                    readOnly = false,
                },
                isMouseInView = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false \
\9\
",
                },
                height = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                isFocusDismissable = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true \
\9\
",
                },
                isSingleFocusOnly = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false \
\9\
",
                },
                isFocused = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                y = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                interfaceProperties = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                isEnabled = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
                identifier = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                index = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                parent = {
                    allowsNil = true,
                    link = false,
                    type = "Container",
                    readOnly = false,
                },
                width = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                needsDraw = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
                isLast = {
                    allowsNil = true,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
            },
        },
        className = "View",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    ScaleableCanvas = {
        fileEnvironment = 127,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Canvas",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    contentMask = {
                        "(_C_self_passed)\
\9\9local scaleX, scaleY = self.scaleX, self.scaleY\
\9\9local width, height = self.width, self.height\
\9\9local scaledWidth, scaledHeight = floor( width * scaleX + 0.5 ), floor( height * scaleY + 0.5 )\
\9\9local widthRatio = width / scaledWidth\
\9\9local heightRatio = height / scaledHeight\
\9\9local xMin, yMin = floor( ( width - scaledWidth ) / 2 ) + 1, floor( ( height - scaledHeight ) / 2 )\
\
\9\9local pixels, maskPixels = self.pixels, {}\
\9\9local TRANSPARENT = Graphics.colours.TRANSPARENT\
\9\9for _x = 1, scaledWidth do\
\9\9\9for _y = 0, scaledHeight - 1 do\
\9\9\9\9local pixelX, pixelY = ceil( _x * widthRatio ), ceil( _y * heightRatio )\
\9\9\9\9local colour = pixels[pixelY * width + pixelX]\
\9\9\9\9if colour ~= TRANSPARENT then\
\9\9\9\9\9maskPixels[( yMin + _y ) * width + xMin + _x] = true\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9return Mask( 1, 1, width, height, maskPixels )\
\9end",
                        18,
                    },
                },
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,width,height,owner)",
                    {
                        "\
\9\9self.width = width\
\9\9self.height = height\
\9\9self.owner = owner\
\9end",
                    },
                    9,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = true,
                            type = "View",
                            name = "owner",
                        },
                    },
                    [ 6 ] = {
                        "width",
                        "height",
                        "owner",
                    },
                },
                drawTo = {
                    "(_C_self_passed,destinationCanvas,x,y,mask)",
                    {
                        "\
\9\9local scaleX, scaleY = self.scaleX, self.scaleY\
\9\9if scaleX == 1 and scaleY == 1 then\
\9\9\9",
                        {
                            " super( destinationCanvas, x, y, mask )\
",
                        },
                        "\9\9end\
\9\9local pixels, width, height = self.pixels, self.width, self.height\
\9\9local scaledWidth, scaledHeight = floor( width * scaleX + 0.5 ), floor( height * scaleY + 0.5 )\
\9\9local widthRatio = width / scaledWidth\
\9\9local heightRatio = height / scaledHeight\
\9\9local xMin, yMin = floor( ( width - scaledWidth ) / 2 + 0.5 ), floor( ( height - scaledHeight ) / 2 + 0.5 )\
\9\9local destinationWidth, destinationHeight, destinationPixels = destinationCanvas.width, destinationCanvas.height, destinationCanvas.pixels\
\9\9local TRANSPARENT = Graphics.colours.TRANSPARENT\
\9\9local maskX, maskY, maskWidth, maskHeight, maskPixels = mask and mask.x, mask and mask.y, mask and mask.width, mask and mask.height, mask and mask.pixels\
\9\9local minX, minY = math.max( 1, x ), math.max( 1, y )\
\9\9local maxX, maxY = math.min( destinationWidth, x + width - 1 ), math.min( destinationHeight, y + height - 1 )\
\9\9for _x = 0, scaledWidth - 1 do\
\9\9\9for _y = 0, scaledHeight - 1 do\
\9\9\9\9local pixelX, pixelY = ceil( ( _x + 1 ) * widthRatio ), ceil( _y * heightRatio )\
\9\9\9\9local destX, destY = x + xMin + _x, y + yMin + _y\
\9\9\9\9if destX >= minX and destX <= maxX and destY >= minY and destY <= maxY then\
\9\9\9\9\9local colour = pixels[pixelY * width + pixelX]\
\9\9\9\9\9if colour and colour ~= TRANSPARENT then\
\9\9\9\9\9\9local isOkay = true\
\9\9\9\9\9\9if mask then\
\9\9\9\9\9\9\9local mx = pixelX - maskX + 1\
\9\9\9\9\9\9\9local my = pixelY - maskY + 1\
\9\9\9\9\9\9\9if mx >= 1 and mx <= maskWidth and my >= 1 and my <= maskHeight then\
\9\9\9\9\9\9\9\9isOkay = maskPixels[ (my - 1) * maskWidth + mx ]\
\9\9\9\9\9\9\9else\
\9\9\9\9\9\9\9\9isOkay = false\
\9\9\9\9\9\9\9end\
\9\9\9\9\9\9end\
\9\9\9\9\9\9if isOkay then\
\9\9\9\9\9\9\9destinationPixels[( destY - 1 ) * destinationWidth + destX] = colour\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    69,
                    {
                        {
                            allowsNil = false,
                            type = "Canvas",
                            name = "destinationCanvas",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = true,
                            type = "Mask",
                            name = "mask",
                        },
                    },
                    [ 6 ] = {
                        "destinationCanvas",
                        "x",
                        "y",
                        "mask",
                    },
                },
                clear = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.pixels = {}\
\9end",
                    },
                    43,
                    {},
                    [ 6 ] = {},
                },
                hitTest = {
                    "(_C_self_passed,x,y)",
                    {
                        "\
\9\9local scaleX, scaleY = self.scaleX, self.scaleY\
\9\9local pixelX, pixelY = x, y\
\9\9local width = self.width\
\9\9if scaleX ~= 1 or scaleY ~= 1 then\
\9\9\9local height = self.height\
\9\9\9local scaledWidth, scaledHeight = floor( width * scaleX + 0.5 ), floor( height * scaleY + 0.5 )\
\9\9\9local widthRatio = width / scaledWidth\
\9\9\9local heightRatio = height / scaledHeight\
\9\9\9pixelX, pixelY = ceil( x * widthRatio ), ceil( y * heightRatio )\
\9\9end\
\9\9local colour = self.pixels[ ( pixelY - 1 ) * width + pixelX ]\
\9\9",
                        {
                            " colour and colour ~= Graphics.colours.TRANSPARENT\
",
                        },
                        "\9end",
                    },
                    51,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                scaleX = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                scaleY = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\
\
\9\
",
                },
            },
        },
        className = "ScaleableCanvas",
        fileName = "/src/classes/Graphics/ScaleableCanvas.luo",
    },
    FileAssociation = {
        fileEnvironment = 103,
        implements = {
            "ISerialiseable",
        },
        lineNumber = 3,
        enums = {},
        fileName = "/src/classes/File Associations/FileAssociation.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,name,mime,icon,extensions,argumentFormat,programBundle)",
                    {
                        "\
\9\9self.id = n\
\9\9n = n + 1\
\9\9self.name = name\
\9\9self.mime = mime\
\9\9self.icon = icon\
\9\9self.extensions = extensions\
\9\9self.programBundle = programBundle\
\9\9self.argumentFormat = argumentFormat\
\9end",
                    },
                    13,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "name",
                        },
                        {
                            allowsNil = false,
                            type = "String",
                            name = "mime",
                        },
                        {
                            allowsNil = true,
                            type = "Icon",
                            name = "icon",
                        },
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "extensions",
                        },
                        {
                            allowsNil = true,
                            type = "Table",
                            name = "argumentFormat",
                        },
                        {
                            allowsNil = false,
                            type = "Bundle",
                            name = "programBundle",
                        },
                    },
                    [ 6 ] = {
                        "name",
                        "mime",
                        "icon",
                        "extensions",
                        "argumentFormat",
                        "programBundle",
                    },
                },
                serialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local icon = self.icon\
\9\9local programBundle = self.programBundle\
\9\9",
                        {
                            " textutils.serialise( {\
\9\9\9id = self.id;\
\9\9\9name = self.name;\
\9\9\9mime = self.mime;\
\9\9\9icon = icon and icon.contents;\
\9\9\9extensions = self.extensions;\
\9\9} )\
",
                        },
                        "\9end",
                    },
                    24,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                argumentFormat = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{ true }\
\
\9\
",
                },
                icon = {
                    allowsNil = true,
                    link = false,
                    type = "Icon",
                    readOnly = false,
                },
                id = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                programBundle = {
                    allowsNil = true,
                    link = false,
                    type = "Bundle",
                    readOnly = false,
                },
                extensions = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                name = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                mime = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "FileAssociation",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                unserialise = {
                    "(_C_self_passed,serialisedContent)",
                    {
                        "\
\9\9local info = textutils.unserialise( serialisedContent )\
\9\9",
                        {
                            " BridgedFileAssociation( info )\
",
                        },
                        "\9end",
                    },
                    36,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "serialisedContent",
                        },
                    },
                    [ 6 ] = {
                        "serialisedContent",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
    },
    BridgedCursor = {
        fileEnvironment = 38,
        enums = {
            bridgeKeys = {
                type = "Number",
                startLine = 12,
                values = "{bridgeKeys}\
\
\
\9\
",
            },
        },
        lineNumber = 10,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                drawTo = {
                    "(_C_self_passed,canvas,x,y)",
                    {
                        "\
\9\9local image = self.image\
\9\9if image then\
\9\9\9canvas:image( self.image, x - self.hotSpotX + 1, y - self.hotSpotY + 1 )\
\9\9else\
\9\9\9",
                        {
                            " cursorStatic:drawTo( canvas, x, y )\
",
                        },
                        "\9\9end\
\9end",
                    },
                    33,
                    {
                        {
                            allowsNil = false,
                            type = "Canvas",
                            name = "canvas",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "canvas",
                        "x",
                        "y",
                    },
                },
                updateAppearance = {
                    "(_C_self_passed)",
                    {
                        "\
\9end",
                    },
                    15,
                    {},
                    [ 6 ] = {},
                },
                updateBridge = {
                    "(_C_self_passed,bridge)",
                    {
                        "\
\9\9if not bridge then\
\9\9\9self.image = nil\
\9\9else\
\9\9\9self.hotSpotX = bridge[bridgeKeys.HOT_SPOT_X]\
\9\9\9self.hotSpotY = bridge[bridgeKeys.HOT_SPOT_Y]\
\9\9\9self.image = Image( bridge[bridgeKeys.PIXELS], bridge[bridgeKeys.WIDTH], bridge[bridgeKeys.HEIGHT], bridge )\
\9\9end\
\9\9local applicationContainer = self.application.container\
\9\9if applicationContainer then\
\9\9\9self.hasUpdatedApperance = true\
\9\9\9applicationContainer.needsCursorUpdate = true\
\9\9end\
\9end",
                    },
                    18,
                    {
                        {
                            allowsNil = true,
                            type = "Table",
                            name = "bridge",
                        },
                    },
                    [ 6 ] = {
                        "bridge",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Cursor",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "BridgedCursor",
        fileName = "/src/classes/Cursors/BridgedCursor.luo",
    },
    CharacterEvent = {
        fileEnvironment = 69,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"char\"\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Event",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,character)",
                    {
                        "\
\9\9self.character = character\
\9end",
                    },
                    12,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "character",
                        },
                    },
                    [ 6 ] = {
                        "character",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                character = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "CharacterEvent",
        fileName = "/src/classes/Events/Keyboard Events/CharacterEvent.luo",
    },
    Document = {
        fileEnvironment = 161,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/src/classes/Utilities/Document.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    contents = {
                        "(_C_self_passed,contents)\
\9\9self.contents = contents\
\9\9-- if self.hasInitialised then\
\9\9\9self.isModified = true\
\9\9-- end\
\9end",
                        111,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9self.path = path\
\9\9\9\
\9\9local file = FileSystemItem( path )\
\
\9\9if file then\
\9\9\9if file:typeOf( IEditableFileSystemItem ) then\
\9\9\9\9local isBinary = self.isBinary\
\9\9\9\9if isBinary and not file:typeOf( File ) then\
\9\9\9\9\9-- TODO: error, binary cannot be used on non-File FileSystemItems (i.e. Bundles)\
\9\9\9\9end\
\9\9\9\9-- TODO: error handling\
\9\9\9\9local rawContents = self.isBinary and file.binaryContents or file.contents\
\9\9\9\9if rawContents then\
\9\9\9\9\9local contents, err = self:parse( rawContents )\
\9\9\9\9\9if contents then\
\9\9\9\9\9\9self.contents = contents\
\9\9\9\9\9else\
\9\9\9\9\9\9-- TODO: Error, content empty or corrupt\
\9\9\9\9\9end\
\9\9\9\9else\
\9\9\9\9\9-- TODO: Error, content empty or corrupt\
\9\9\9\9end\
\9\9\9else\
\9\9\9\9-- TODO: Error, tried to open folder\
\9\9\9end\
\9\9else\
\9\9\9self:blank()\
\9\9end\
\
\9\9if err then\
\9\9\9self:onError( err )\
\9\9end\
\9end",
                    },
                    13,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
                onClose = {
                    "(_C_self_passed,callback)",
                    {
                        "\
\9\9-- self:save()\
\9\9callback( false )\
\9end",
                    },
                    206,
                    {
                        {
                            allowsNil = true,
                            name = "callback",
                        },
                    },
                    [ 6 ] = {
                        "callback",
                    },
                },
                onError = {
                    "(_C_self_passed,err)",
                    {
                        "\
\9\9-- TODO: alert window\
\9\9error( err )\
\9end",
                    },
                    106,
                    {
                        {
                            allowsNil = true,
                            name = "err",
                        },
                    },
                    [ 6 ] = {
                        "err",
                    },
                },
                blank = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.contents = \"\"\
\9end",
                    },
                    79,
                    {},
                    [ 6 ] = {},
                },
                save = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if self.isBinary then\
\9\9\9self.file.binaryContents = self.contents\
\9\9else\
\9\9\9self.file.contents = self.contents\
\9\9end\
\9\9if not err then\
\9\9\9self.isModified = false\
\9\9end\
\9\9",
                        {
                            " err\
",
                        },
                        "\9end",
                    },
                    123,
                    {},
                    [ 6 ] = {},
                },
                serialiseHandle = {
                    "(_C_self_passed,handle)",
                    {
                        "\
\9end",
                    },
                    159,
                    {
                        {
                            allowsNil = true,
                            name = "handle",
                        },
                    },
                    [ 6 ] = {
                        "handle",
                    },
                },
                close = {
                    "(_C_self_passed,callback)",
                    {
                        "\
\9\9if not self.isModified then\
\9\9\9self.application.document = false\
\9\9\9callback( true )\
\9\9else\
\9\9\9self:onClose( function( isClosed ) \
\9\9\9\9if isClosed then self.application.document = false end\
\9\9\9\9callback( isClosed )\
\9\9\9end )\
\9\9end\
\9end",
                    },
                    190,
                    {
                        {
                            allowsNil = true,
                            name = "callback",
                        },
                    },
                    [ 6 ] = {
                        "callback",
                    },
                },
                serialise = {
                    "(_C_self_passed,contents)",
                    {
                        "\
\9\9",
                        {
                            " contents\
",
                        },
                        "\9end",
                    },
                    171,
                    {
                        {
                            allowsNil = true,
                            name = "contents",
                        },
                    },
                    [ 6 ] = {
                        "contents",
                    },
                },
                parse = {
                    "(_C_self_passed,rawContents)",
                    {
                        "\
\9\9",
                        {
                            " rawContents\
",
                        },
                        "\9end",
                    },
                    98,
                    {
                        {
                            allowsNil = true,
                            name = "rawContents",
                        },
                    },
                    [ 6 ] = {
                        "rawContents",
                    },
                },
                saveAs = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9if not path then\
\9\9\9-- show save as dialouge\
\9\9else\
\9\9\9local file = self.file.new( path )\
\9\9\9if self.isBinary then\
\9\9\9\9file.binaryContents = self.contents\
\9\9\9else\
\9\9\9\9file.contents = self.contents\
\9\9\9end\
\9\9end\
\9end",
                    },
                    140,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
                parseHandle = {
                    "(_C_self_passed,handle)",
                    {
                        "\
\9end",
                    },
                    89,
                    {
                        {
                            allowsNil = true,
                            name = "handle",
                        },
                    },
                    [ 6 ] = {
                        "handle",
                    },
                },
                onOverwrite = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9-- TODO: alert window\
\9\9error( \"Already exists: \" .. path )\
\9end",
                    },
                    181,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                contents = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                file = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                isBinary = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                isModified = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\9\
\
\
\
\
\9\
",
                },
            },
        },
        className = "Document",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                open = {
                    "(_C_self_passed,documentClass,path)",
                    {
                        "\
\9\9local function f( path )\
\9\9\9local document = documentClass( path )\
\9\9\9if document.contents then\
\9\9\9\9local oldDocument = Document.application.document\
\9\9\9\9if oldDocument then\
\9\9\9\9\9oldDocument:close( function( isClosed )\
\9\9\9\9\9\9if isClosed then Document.application.document = document end\
\9\9\9\9\9end )\
\9\9\9\9else\
\9\9\9\9\9Document.application.document = document\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9if path then\
\9\9\9f( path )\
\9\9else \
\9\9\9-- TODO: open file dialouge\
\9\9\9f( \"test.txt\" )\
\9\9end\
\9end",
                    },
                    53,
                    {
                        {
                            allowsNil = true,
                            name = "documentClass",
                        },
                        {
                            allowsNil = true,
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "documentClass",
                        "path",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
    },
    SegmentButton = {
        fileEnvironment = 212,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Button",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    width = {
                        "(_C_self_passed,width)\
\9\9super( width + ( self.isLast and 0 or 1 ) ) -- add extra room for the separator\
\9end",
                        45,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self:event( ParentChangedInterfaceEvent, self.onSiblingOrParentChanged )\
\9\9self:event( SiblingAddedInterfaceEvent, self.onSiblingOrParentChanged )\
\9end",
                    },
                    5,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onSiblingOrParentChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self.needsDraw = true\
\9end",
                    },
                    53,
                    {
                        {
                            allowsNil = false,
                            type = "InterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas, isPressed, isFirst, isLast = self.width, self.height, self.theme, self.canvas, self.isPressed, self.isFirst, self.isLast\
\
\9\9-- get all the shadow size details so we can adjust the compression as needed\
\9\9local defaultShadowSize = theme:value( \"shadowSize\", \"default\" )\
\9\9local shadowPressedSize = theme:value( \"shadowSize\", \"pressed\" )\
\9\9local shadowSize = theme:value( \"shadowSize\" )\
\9\9local shadowOffset = defaultShadowSize - shadowSize\
\9\9local shadowPressedOffset = defaultShadowSize - shadowPressedSize\
\9\9local shadowX = math.floor( shadowOffset * SHADOW_RATIO + 0.5 )\
\
\9\9local cornerRadius, outlineThickness, fillColour, outlineColour = theme:value( \"cornerRadius\" ), theme:value( \"outlineThickness\" ), theme:value( \"fillColour\" ), theme:value( \"outlineColour\" )\
\9\9-- background shape\
\9\9local roundedRectangle = RoundedRectangleMask( shadowX + 1, shadowOffset + 1, width - math.floor( shadowPressedOffset * SHADOW_RATIO + 0.5 ), height - shadowPressedOffset, isFirst and cornerRadius or 0, isLast and cornerRadius or 0 )\
\9\9canvas:fill( fillColour, roundedRectangle )\
\9\9canvas:outline( outlineColour, roundedRectangle, isFirst and outlineThickness or 0, outlineThickness, isLast and outlineThickness or 0 )\
\
\9\9if not isLast then\
\9\9\9local separatorTopMargin, separatorBottomMargin = theme:value( \"separatorTopMargin\" ), theme:value( \"separatorBottomMargin\" )\
\9\9\9local separatorHeight = height - shadowPressedOffset - separatorBottomMargin - separatorTopMargin\
\9\9\9local separatorX = width - 1\
\9\9\9local backgroundMask = RectangleMask( separatorX, 1, 1, height - shadowPressedOffset )\
\9\9\9canvas:fill( theme:value( \"fillColour\", \"default\" ), backgroundMask )\
\9\9\9canvas:outline( theme:value( \"outlineColour\", \"default\" ), backgroundMask, 0, outlineThickness, 0 )\
\9\9\9canvas:fill( theme:value( \"separatorColour\" ), theme:value( \"separatorIsDashed\" ) and SeparatorMask( separatorX, 1 + separatorTopMargin, 1, separatorHeight ) or RectangleMask( separatorX, 1 + separatorTopMargin, 1, separatorHeight ) )\
\9\9end\
\
\9\9local leftMargin, rightMargin, topMargin, bottomMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" )\
\9\9-- text\
\9\9canvas:fill( theme:value( \"textColour\" ),  TextMask( leftMargin + shadowX + 1, topMargin + 1 + shadowOffset, width - leftMargin - rightMargin, height - topMargin - bottomMargin, self.text, theme:value( \"font\" ) ) )\
\
\9\9self.shadowSize = shadowSize\
\9end",
                    },
                    11,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "SegmentButton",
        fileName = "/src/classes/Views/SegmentButton.luo",
    },
    LayoutContainer = {
        fileEnvironment = 174,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    height = {
                        "(_C_self_passed,height)\
\9\9if self.height ~= height then\
\9\9\9self.needsLayoutUpdate = true\
\9\9end\
\9    super( height )\
\9end",
                        33,
                    },
                    width = {
                        "(_C_self_passed,width)\
\9\9if self.width ~= width then\
\9\9    self.needsLayoutUpdate = true\
\9\9end\
\9    super( width )\
\9end",
                        26,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self:event( ChildAddedInterfaceEvent, self.onChildAdded )\
\9\9self:event( ChildRemovedInterfaceEvent, self.onChildRemoved )\
\9\9self:event( ReadyInterfaceEvent, self.onReady, Event.phases.AFTER )\
\9end",
                    },
                    8,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self:updateLayout( true )\
\9end",
                    },
                    15,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onChildRemoved = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    45,
                    {
                        {
                            allowsNil = false,
                            type = "ChildRemovedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onChildAdded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self.needsLayoutUpdate = true\
\9\9self.dontAnimateLayoutUpdate = true\
\9end",
                    },
                    40,
                    {
                        {
                            allowsNil = false,
                            type = "ChildAddedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9if self.needsLayoutUpdate and not self.isLayoutLocked then\
\9\9\9self:updateLayout()\
\9\9end\
\9end",
                    },
                    19,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                updateLayout = {
                    "(_C_self_passed,dontAnimate)",
                    {
                        "\
\9end",
                    },
                    49,
                    {
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "dontAnimate",
                            defaultValue = "false ",
                        },
                    },
                    [ 6 ] = {
                        "dontAnimate",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                dontAnimateLayoutUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                isLayoutLocked = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\
\9\
",
                },
                needsLayoutUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "LayoutContainer",
        fileName = "/src/classes/Views/Containers/LayoutContainer.luo",
    },
    Cursor = {
        fileEnvironment = 40,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/src/classes/Cursors/Cursor.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "Cursor",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                onThemeChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self:updateAppearance()\
\9end",
                    },
                    37,
                    {
                        {
                            allowsNil = false,
                            type = "ThemeChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                drawTo = {
                    "(_C_self_passed,canvas,x,y)",
                    {
                        "\
\9\9local image = self.image\
\9\9if image then\
\9\9\9canvas:image( image, x - self.hotSpotX + 1, y - self.hotSpotY + 1 )\
\9\9end\
\9end",
                    },
                    41,
                    {
                        {
                            allowsNil = false,
                            type = "Canvas",
                            name = "canvas",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "canvas",
                        "x",
                        "y",
                    },
                },
                updateAppearance = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local theme = self.theme\
\9\9self.image = theme:value( \"image\" )\
\9\9self.hotSpotX = theme:value( \"hotSpotX\" )\
\9\9self.hotSpotY = theme:value( \"hotSpotY\" )\
\9\9local applicationContainer = self.application.container\
\9\9if applicationContainer then\
\9\9\9self.hasUpdatedApperance = true\
\9\9\9applicationContainer.needsCursorUpdate = true\
\9\9end\
\9end",
                    },
                    25,
                    {},
                    [ 6 ] = {},
                },
                setup = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme = ThemeOutlet( self )\
\9\9local event = EventManager( self )\
\9\9self.eventManager = event\
\9\9event:connectGlobal( ThemeChangedInterfaceEvent, self.onThemeChanged )\
\9end",
                    },
                    18,
                    {},
                    [ 6 ] = {},
                },
                setupAll = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self:setup()\
\9\9for i, subclass in ipairs( Cursor.subclasses ) do\
\9\9\9subclass.static:setup()\
\9\9end\
\9end",
                    },
                    10,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                eventManager = {
                    allowsNil = false,
                    link = false,
                    type = "EventManager",
                    readOnly = false,
                },
                image = {
                    allowsNil = true,
                    link = false,
                    type = "Image",
                    readOnly = false,
                },
                theme = {
                    allowsNil = false,
                    link = false,
                    type = "ThemeOutlet",
                    readOnly = false,
                },
                hasUpdatedApperance = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\9\
",
                },
                hotSpotY = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                hotSpotX = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
            },
        },
    },
    ExitedInterfaceMouseEvent = {
        fileEnvironment = 61,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_mouse_exited\"\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Event",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y)",
                    {
                        "\
\9\9self.x = x\
\9\9self.y = y\
\9end",
                    },
                    9,
                    {
                        {
                            allowsNil = true,
                            name = "x",
                        },
                        {
                            allowsNil = true,
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                y = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                x = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
            },
        },
        className = "ExitedInterfaceMouseEvent",
        fileName = "/src/classes/Events/Interface Events/MouseExitedInterfaceEvent.luo",
    },
    ThemeChangedInterfaceEvent = {
        fileEnvironment = 68,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_theme_changed\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,newTheme,oldTheme)",
                    {
                        "\
\9\9self.newTheme = newTheme\
\9\9self.oldTheme = oldTheme\
\9end",
                    },
                    14,
                    {
                        {
                            allowsNil = false,
                            type = "Theme",
                            name = "newTheme",
                        },
                        {
                            allowsNil = false,
                            type = "Theme",
                            name = "oldTheme",
                        },
                    },
                    [ 6 ] = {
                        "newTheme",
                        "oldTheme",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                oldTheme = {
                    allowsNil = false,
                    link = false,
                    type = "Theme",
                    readOnly = false,
                },
                newTheme = {
                    allowsNil = false,
                    link = false,
                    type = "Theme",
                    readOnly = false,
                },
            },
        },
        className = "ThemeChangedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/ThemeChangedInterfaceEvent.luo",
    },
    Canvas = {
        fileEnvironment = 117,
        implements = {},
        lineNumber = 5,
        enums = {
            shadows = {
                type = "Number",
                startLine = 15,
                values = "{\
\9\9property SHADOW_RATIO SHADOW_RATIO\
\9\9property SHADOW_COLOUR SHADOW_COLOUR\
\9}\
\
\
\9\
",
            },
        },
        fileName = "/src/classes/Graphics/Canvas.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    mask = {
                        "(_C_self_passed)\
\9\9return RectangleMask( 1, 1, self.width, self.height )\
\9end",
                        30,
                    },
                    contentMask = {
                        "(_C_self_passed)\
\9\9local pixels = {}\
\9\9for k, v in pairs( self.pixels ) do\
\9\9\9if v ~= TRANSPARENT then\
\9\9\9\9pixels[k] = true\
\9\9\9end\
\9\9end\
\9\9return Mask( 1, 1, self.width, self.height, pixels )\
\9end",
                        37,
                    },
                },
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,width,height,owner)",
                    {
                        "\
\9\9self.width = width\
\9\9self.height = height\
\9\9self.owner = owner\
\9end",
                    },
                    21,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = true,
                            type = "View",
                            name = "owner",
                        },
                    },
                    [ 6 ] = {
                        "width",
                        "height",
                        "owner",
                    },
                },
                outline = {
                    "(_C_self_passed,colour,mask,leftThickness,topThickness,rightThickness,bottomThickness)",
                    {
                        "\
\9\9if colour == TRANSPARENT then ",
                        {
                            "",
                        },
                        " end\
\9\9local width, height, pixels = self.width, self.height, self.pixels\
\9\9local maskX, maskY, maskWidth, maskHeight, maskPixels = mask and mask.x, mask and mask.y, mask and mask.width, mask and mask.height, mask and mask.pixels\
\9\9local function xScanline( min, max, inc, thickness )\
\9\9\9for y = 1, height do\
\9\9\9\9local distance = 0\
\9\9\9\9for x = min, max, inc do\
\9\9\9\9\9local mx = x - maskX + 1\
\9\9\9\9\9local my = y - maskY + 1\
\9\9\9\9\9if mx >= 1 and mx <= maskWidth and my >= 1 and my <= maskHeight and maskPixels[ (my - 1) * maskWidth + mx ] then\
\9\9\9\9\9\9if distance < thickness then\
\9\9\9\9\9\9\9distance = distance + 1\
\9\9\9\9\9\9\9pixels[(y - 1) * width + x] = colour\
\9\9\9\9\9\9\9if distance >= thickness then\
\9\9\9\9\9\9\9\9break\
\9\9\9\9\9\9\9end\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9local function yScanline( min, max, inc, thickness )\
\9\9\9for x = 1, width do\
\9\9\9\9local distance = 0\
\9\9\9\9for y = min, max, inc do\
\9\9\9\9\9local mx = x - maskX + 1\
\9\9\9\9\9local my = y - maskY + 1\
\9\9\9\9\9if mx >= 1 and mx <= maskWidth and my >= 1 and my <= maskHeight and maskPixels[ (my - 1) * maskWidth + mx ] then\
\9\9\9\9\9\9if distance < thickness then\
\9\9\9\9\9\9\9distance = distance + 1\
\9\9\9\9\9\9\9pixels[(y - 1) * width + x] = colour\
\9\9\9\9\9\9\9if distance >= thickness then\
\9\9\9\9\9\9\9\9break\
\9\9\9\9\9\9\9end\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9xScanline( 1, width, 1, leftThickness )\
\9\9xScanline( width, 1, -1, rightThickness )\
\9\9yScanline( 1, height, 1, topThickness )\
\9\9yScanline( height, 1, -1, bottomThickness )\
\
\9\9",
                        {
                            " pixels\
",
                        },
                        "\9end",
                    },
                    84,
                    {
                        {
                            allowsNil = false,
                            type = "Graphics.colours",
                            name = "colour",
                        },
                        {
                            allowsNil = false,
                            type = "Mask",
                            name = "mask",
                            defaultValue = "self.contentMask",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "leftThickness",
                            defaultValue = "1",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "topThickness",
                            defaultValue = "leftThickness",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "rightThickness",
                            defaultValue = "leftThickness",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "bottomThickness",
                            defaultValue = "topThickness ",
                        },
                    },
                    [ 6 ] = {
                        "colour",
                        "mask",
                        "leftThickness",
                        "topThickness",
                        "rightThickness",
                        "bottomThickness",
                    },
                },
                drawShadow = {
                    "(_C_self_passed,shadowColour,x,y,shadowSize,shadowMask)",
                    {
                        "\
\9\9if shadowSize == 0 or shadowColour == TRANSPARENT then ",
                        {
                            "",
                        },
                        " end\
\9\9x = math.floor( x + shadowSize * SHADOW_RATIO + 0.5 )\
\9\9y = y + shadowSize\
\9\9local pixels, width, height = self.pixels, self.width, self.height\
\9\9local maskX, maskY, maskWidth, maskHeight = shadowMask.x, shadowMask.y, shadowMask.width, shadowMask.height\
\9\9for index, isFilled in pairs( shadowMask.pixels ) do\
\9\9\9if isFilled then\
\9\9\9\9local x = (index - 1) % maskWidth + maskX + x - 1\
\9\9\9\9local y = math.floor( ( index - 1) / maskWidth ) + maskY + y - 1\
\9\9\9\9if x >= 1 and x <= width and y >= 1 and y <= height then\
\9\9\9\9\9pixels[( y - 1 ) * width + x] = shadowColour\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    208,
                    {
                        {
                            allowsNil = false,
                            type = "Graphics.colours",
                            name = "shadowColour",
                            defaultValue = "SHADOW_COLOUR",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "shadowSize",
                        },
                        {
                            allowsNil = false,
                            type = "Mask",
                            name = "shadowMask",
                            defaultValue = "self.contentMask ",
                        },
                    },
                    [ 6 ] = {
                        "shadowColour",
                        "x",
                        "y",
                        "shadowSize",
                        "shadowMask",
                    },
                },
                drawTo = {
                    "(_C_self_passed,destinationCanvas,x,y,mask)",
                    {
                        "\
\9\9local width, height = self.width, self.height\
\9\9local destinationWidth, destinationHeight, destinationPixels = destinationCanvas.width, destinationCanvas.height, destinationCanvas.pixels\
\9\9local maskX, maskY, maskWidth, maskHeight, maskPixels = mask and mask.x, mask and mask.y, mask and mask.width, mask and mask.height, mask and mask.pixels\
\9\9local maxIndex = width * height\
\9\9for index, colour in pairs( self.pixels ) do\
\9\9\9if index >= 1 and index <= maxIndex and colour and colour ~= TRANSPARENT then\
\9\9\9\9local _x = (index - 1) % width + x\
\9\9\9\9local _y = math.floor( ( index - 1) / width ) + y\
\9\9\9\9if _x >= 1 and _x <= destinationWidth and _y >= 1 and _y <= destinationHeight then\
\9\9\9\9\9local isOkay = true\
\9\9\9\9\9if mask then\
\9\9\9\9\9\9local mx = _x - maskX + 1\
\9\9\9\9\9\9local my = _y - maskY + 1\
\9\9\9\9\9\9if mx >= 1 and mx <= maskWidth and my >= 1 and my <= maskHeight then\
\9\9\9\9\9\9\9isOkay = maskPixels[ (my - 1) * maskWidth + mx ]\
\9\9\9\9\9\9else\
\9\9\9\9\9\9\9isOkay = false\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9\9if isOkay then\
\9\9\9\9\9\9destinationPixels[( _y - 1 ) * destinationWidth + _x] = colour\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    137,
                    {
                        {
                            allowsNil = false,
                            type = "Canvas",
                            name = "destinationCanvas",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = true,
                            type = "Mask",
                            name = "mask",
                        },
                    },
                    [ 6 ] = {
                        "destinationCanvas",
                        "x",
                        "y",
                        "mask",
                    },
                },
                transfer = {
                    "(_C_self_passed,destinationCanvas)",
                    {
                        "\
\9\9local pixels, destinationPixels = self.pixels, destinationCanvas.pixels\
\9\9for i = 1, #pixels do\
\9\9\9destinationPixels[i] = pixels[i]\
\9\9end\
\9end",
                    },
                    168,
                    {
                        {
                            allowsNil = false,
                            type = "Canvas",
                            name = "destinationCanvas",
                        },
                    },
                    [ 6 ] = {
                        "destinationCanvas",
                    },
                },
                image = {
                    "(_C_self_passed,image,x,y,width,height,method)",
                    {
                        "\
\9\9local pixels, pixelsWidth, pixelsHeight = image:getScaledPixels( width, height, method )\
\9\9if pixelsWidth ~= width then\
\9\9\9x = x + math.ceil( ( width - pixelsWidth ) / 2 )\
\9\9end\
\9\9if pixelsHeight ~= height then\
\9\9\9y = y + math.ceil( ( height - pixelsHeight ) / 2 )\
\9\9end\
\9\9local selfWidth, selfHeight, selfPixels = self.width, self.height, self.pixels\
\9\9local xLimit, yLimit = math.min( selfWidth, pixelsWidth + x - 1 ), math.min( selfHeight, pixelsHeight + y - 1 )\
\9\9for _y = y, yLimit do\
\9\9\9for _x = x, xLimit do\
\9\9\9\9local pixel = pixels[(_y - y) * pixelsWidth + (_x - x + 1)]\
\9\9\9\9if pixel and pixel ~= TRANSPARENT then\
\9\9\9\9\9selfPixels[(_y - 1) * selfWidth + _x] = pixel\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    185,
                    {
                        {
                            allowsNil = false,
                            type = "Image",
                            name = "image",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                            defaultValue = "image.width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                            defaultValue = "image.height",
                        },
                        {
                            allowsNil = false,
                            type = "Image.scaleMethods",
                            name = "method",
                            defaultValue = "Image.scaleMethods.FIT ",
                        },
                    },
                    [ 6 ] = {
                        "image",
                        "x",
                        "y",
                        "width",
                        "height",
                        "method",
                    },
                },
                toImage = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9",
                        {
                            " Image.static:fromPixels( self.pixels, self.width, self.height )\
",
                        },
                        "\9end",
                    },
                    178,
                    {},
                    [ 6 ] = {},
                },
                fill = {
                    "(_C_self_passed,colour,mask)",
                    {
                        "\
\9\9if colour == TRANSPARENT then ",
                        {
                            "",
                        },
                        " end\
\9\9local pixels, width, height = self.pixels, self.width, self.height\
\9\9local maskX, maskY, maskWidth, maskHeight = mask.x, mask.y, mask.width, mask.height\
\9\9for index, isFilled in pairs( mask.pixels ) do\
\9\9\9if isFilled then\
\9\9\9\9local x = (index - 1) % maskWidth + maskX\
\9\9\9\9local y = math.floor( ( index - 1) / maskWidth ) + maskY\
\9\9\9\9if x >= 1 and x <= width and y >= 1 and y <= height then\
\9\9\9\9\9pixels[( y - 1 ) * width + x] = colour\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    66,
                    {
                        {
                            allowsNil = false,
                            type = "Graphics.colours",
                            name = "colour",
                        },
                        {
                            allowsNil = false,
                            type = "Mask",
                            name = "mask",
                            defaultValue = "self.mask ",
                        },
                    },
                    [ 6 ] = {
                        "colour",
                        "mask",
                    },
                },
                clear = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.pixels = {}\
\9end",
                    },
                    50,
                    {},
                    [ 6 ] = {},
                },
                hitTest = {
                    "(_C_self_passed,x,y)",
                    {
                        "\
\9\9local colour = self.pixels[ ( y - 1 ) * self.width + x ]\
\9\9",
                        {
                            " colour and colour ~= TRANSPARENT\
",
                        },
                        "\9end",
                    },
                    58,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                owner = {
                    allowsNil = true,
                    link = false,
                    type = "View",
                    readOnly = false,
                },
                width = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                pixels = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\
\9\
",
                },
                mask = {
                    allowsNil = true,
                    link = false,
                    type = "Mask",
                    readOnly = false,
                },
                height = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                contentMask = {
                    allowsNil = true,
                    link = false,
                    type = "Mask",
                    readOnly = false,
                },
            },
        },
        className = "Canvas",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    File = {
        fileEnvironment = 107,
        enums = {},
        lineNumber = 23,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                make = {
                    "(_C_self_passed,path,mime,overwrite,contents)",
                    {
                        "\
\9\9local exists = fs.exists( path )\
\9\9if overwrite and exists then\
\9\9\9fs.delete( path )\
\9\9\9exists = false\
\9\9end\
\
\9\9if not exists then\
\9\9\9local h = fs.open( path, \"w\" )\
\9\9\9h.write( contents or \"\" )\
\9\9\9h.close()\
\9\9\9local file = self.class( path )\
\9\9\9file.metadata.mime = mime\
\9\9\9",
                        {
                            " file\
",
                        },
                        "\9\9else\
\9\9\9local file = File( path )\
\9\9\9if contents then\
\9\9\9\9file.contents = contents\
\9\9\9end\
\9\9\9",
                        {
                            " file\
",
                        },
                        "\9\9end\
\9end",
                    },
                    42,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                        {
                            allowsNil = true,
                            name = "mime",
                        },
                        {
                            allowsNil = true,
                            name = "overwrite",
                        },
                        {
                            allowsNil = true,
                            name = "contents",
                        },
                    },
                    [ 6 ] = {
                        "path",
                        "mime",
                        "overwrite",
                        "contents",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IEditableFileSystemItem",
        },
        extends = "FileSystemItem",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    contents = {
                        "(_C_self_passed)\
\9\9local handle = fs.open( self.path, \"r\" )\
\9\9if handle then\
\9\9\9local contents = handle.readAll( contents )\
\9\9\9handle.close()\
\9\9\9return contents\
\9\9else\
\9\9\9-- TODO: file reading error handling\
\9\9end\
\9end",
                        92,
                    },
                    serialisedContents = {
                        "(_C_self_passed)\
\9\9return textutils.unserialize( self.contents )\
\9end",
                        103,
                    },
                    binaryContents = {
                        "(_C_self_passed)\
\9\9local handle = fs.open( self.path, \"rb\" )\
\9\9if handle then\
\9\9\9local contents = {}\
\9\9\9local read = handle.read\
\9\9\9local lastByte = read()\
\9\9\9local index = 1\
\9\9\9while lastByte do\
\9\9\9\9contents[index] = lastByte\
\9\9\9\9lastByte = read()\
\9\9\9\9index = index + 1\
\9\9\9end \
\9\9\9handle.close()\
\9\9\9return contents\
\9\9else\
\9\9\9-- TODO: file writing error handling\
\9\9end\
\9end",
                        108,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    contents = {
                        "(_C_self_passed,contents)\
\9\9local handle = fs.open( self.path, \"w\" )\
\9\9if handle then\
\9\9\9handle.write( contents )\
\9\9\9handle.close()\
\9\9else\
\9\9\9-- TODO: file writting error handling\
\9\9end\
\9end",
                        65,
                    },
                    serialisedContents = {
                        "(_C_self_passed,serialisedContents)\
\9\9self.contents = textutils.serialize( serialisedContents )\
\9end",
                        75,
                    },
                    binaryContents = {
                        "(_C_self_passed,binaryContents)\
\9\9if type( binaryContents ) ~= \"table\" then error( \"File.binaryContents must be set with a table of bytes.\", 2 ) end\
\9\9local handle = fs.open( self.path, \"wb\" )\
\9\9if handle then\
\9\9\9for i, byte in ipairs( binaryContents ) do\
\9\9\9\9handle.write( byte )\
\9\9\9end\
\9\9\9handle.close()\
\9\9else\
\9\9\9-- TODO: file writing error handling\
\9\9end\
\9end",
                        79,
                    },
                },
            },
            functions = {},
            instanceVariables = {},
            properties = {
                contents = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                serialisedContents = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                binaryContents = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
        },
        className = "File",
        fileName = "/src/classes/File System/File.luo",
    },
    SegmentContainer = {
        fileEnvironment = 182,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                updateLayout = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if self.isVisible then\
\9\9\9local width = 0\
\9\9\9local height = 0\
\9\9\9local children = self.children\
\9\9\9local childrenCount = #children\
\9\9\9for i, childView in ipairs( children ) do\
\9\9\9\9height = math.max( height, childView.height )\
\9\9\9\9childView.x = width + 1\
\9\9\9\9childView.y = 1\
\9\9\9\9width = width + childView.width\
\9\9\9\9if i ~= childrenCount then\
\9\9\9\9\9width = width - math.floor( SHADOW_RATIO * childView.theme:value( \"shadowSize\", \"default\" ) + 0.5 )\
\9\9\9\9end\
\9\9\9end\
\9\9\9self.width = width\
\9\9\9self.height = height\
\9\9end\
\9\9self.needsLayoutUpdate = false\
\9end",
                    },
                    10,
                    {},
                    [ 6 ] = {},
                },
                removeChild = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    43,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9if self.needsLayoutUpdate then\
\9\9\9self:updateLayout()\
\9\9end\
\9end",
                    },
                    31,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                insert = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    38,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                needsLayoutUpdate = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
        },
        className = "SegmentContainer",
        fileName = "/src/classes/Views/Containers/SegmentContainer.luo",
    },
    ArgumentCountClassException = {
        fileEnvironment = 83,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClassException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Incorrect number of arguments: \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "ArgumentCountClassException",
        fileName = "/src/classes/Exceptions/Class System/ArgumentCountClassException.luo",
    },
    SettingsException = {
        fileEnvironment = 97,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "FatalException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "SettingsException",
        fileName = "/src/classes/Exceptions/Settings/SettingsException.luo",
    },
    RightSymbol = {
        fileEnvironment = 150,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"right\"\
\9\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 4, 1 )\
\9\9path:lineTo( 7, 4 )\
\9\9path:lineTo( 4, 7 )\
\9\9path:lineTo( 4, 5 )\
\9\9path:lineTo( 1, 5 )\
\9\9path:lineTo( 1, 3 )\
\9\9path:lineTo( 4, 3 )\
\9\9path:lineTo( 4, 1 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    7,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "RightSymbol",
        fileName = "/src/classes/Symbols/RightSymbol.luo",
    },
    IDraggableView = {
        className = "IDraggableView",
        enums = {},
        isInterface = true,
        instance = {
            functions = {
                dragDropCancelled = {
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                },
            },
            properties = {},
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    ToolbarSymbolButton = {
        fileEnvironment = 194,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IToolbarItem",
            "IToolbarPressableItem",
        },
        extends = "SymbolButton",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ToolbarSymbolButton",
        fileName = "/src/classes/Views/Containers/Toolbar/ToolbarSymbolButton.luo",
    },
    QuartzProxy = {
        fileEnvironment = 19,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/System/classes/Program Managing/QuartzProxy.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    status = {
                        "(_C_self_passed)\
        return _program.status\
    end",
                        34,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    status = {
                        "(_C_self_passed,status)\
        _program.status = status\
    end",
                        38,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,program)",
                    {
                        "\
        _program = program\
        local applicationUserDataFolder = self.application.userDataFolder\
        local identifier = program.identifier\
        local folder = applicationUserDataFolder:folderFromPath( identifier )\
        if not folder then\
            folder = applicationUserDataFolder:makeSubfolder( identifier )\
        end\
\
        self.userDataPath = folder.path\
    end",
                    },
                    14,
                    {
                        {
                            allowsNil = false,
                            type = "Program",
                            name = "program",
                        },
                    },
                    [ 6 ] = {
                        "program",
                    },
                },
                redraw = {
                    "(_C_self_passed,pixels)",
                    {
                        "\
        local programView = _program.programView\
        if pixels then\
            programView.buffer = pixels\
        end\
        programView.needsDraw = true\
    end",
                    },
                    26,
                    {
                        {
                            allowsNil = true,
                            type = "Table",
                            name = "pixels",
                        },
                    },
                    [ 6 ] = {
                        "pixels",
                    },
                },
            },
            instanceVariables = {
                _program = "Program;\
\
\9\
",
            },
            properties = {
                silicaApplication = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                screenBuffer = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                status = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                fs = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "fs \
\
\9\
",
                },
                userDataPath = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "QuartzProxy",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    BridgedFileAssociation = {
        fileEnvironment = 101,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "FileAssociation",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,info)",
                    {
                        "\
\9\9self.id = info.id\
\9\9self.name = info.name\
\9\9self.mime = info.mime\
\9\9if info.icon then\
\9\9\9self.icon = Icon.static:fromIcon( info.icon )\
\9\9end\
\9\9self.extensions = info.extensions\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "info",
                        },
                    },
                    [ 6 ] = {
                        "info",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "BridgedFileAssociation",
        fileName = "/src/classes/File Associations/BridgedFileAssociation.luo",
    },
    Container = {
        fileEnvironment = 169,
        enums = {},
        lineNumber = 4,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                fromInterface = {
                    "(_C_self_passed,interfaceName,_class)",
                    {
                        "\
\9\9local interface = Interface( interfaceName, _class or Container )\
\9\9if interface then\
\9\9\9interface:ready()\
\9\9\9",
                        {
                            " interface.container\
",
                        },
                        "\9\9end\
\9end",
                    },
                    44,
                    {
                        {
                            allowsNil = true,
                            name = "interfaceName",
                        },
                        {
                            allowsNil = true,
                            name = "_class",
                        },
                    },
                    [ 6 ] = {
                        "interfaceName",
                        "_class",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    width = {
                        "(_C_self_passed,width)\
\9\9if width ~= self.width then\
\9\9\9self.needsHorizontalPinUpdate = true\
\9\9\9super( width )\
\9\9\9local event = self.eventManager\
\9\9\9if event then\
\9\9\9\9event:handleEvent( ParentResizedInterfaceEvent( true, false, self ) )\
\9\9\9end\
\9\9end\
\9end",
                        271,
                    },
                    needsVerticalPinUpdate = {
                        "(_C_self_passed,needsVerticalPinUpdate)\
\9\9self.needsVerticalPinUpdate = needsVerticalPinUpdate\
\9\9if needsVerticalPinUpdate then\
\9\9\9self.needsPinUpdate = true\
\9\9end\
\9end",
                        207,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9-- we need to update the isEnabled value for all children, the best way is just to send the current value\
\9\9\9childView.isEnabled = childView.raw.isEnabled\
\9\9end\
\9end",
                        293,
                    },
                    height = {
                        "(_C_self_passed,height)\
\9\9if height ~= self.height then\
\9\9\9self.needsVerticalPinUpdate = true\
\9\9\9super( height )\
\9\9\9local event = self.eventManager\
\9\9\9if event then\
\9\9\9\9event:handleEvent( ParentResizedInterfaceEvent( false, true, self ) )\
\9\9\9end\
\9\9end\
\9end",
                        282,
                    },
                    needsHorizontalPinUpdate = {
                        "(_C_self_passed,needsHorizontalPinUpdate)\
\9\9self.needsHorizontalPinUpdate = needsHorizontalPinUpdate\
\9\9if needsHorizontalPinUpdate then\
\9\9\9self.needsPinUpdate = true\
\9\9end\
\9end",
                        214,
                    },
                },
            },
            functions = {
                onReadyLoadInterface = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self:loadInterface()\
\9end",
                    },
                    52,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                findChild = {
                    "(_C_self_passed,identifier,descendTree)",
                    {
                        "\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9if childView.identifier == identifier then\
\9\9\9\9",
                        {
                            " childView\
",
                        },
                        "\9\9\9end\
\
\9\9\9-- look in child Containers \
\9\9\9if descendTree and childView:typeOf( Container ) then\
\9\9\9\9local child = childView:findChild( identifier )\
\9\9\9\9if child then\
\9\9\9\9\9",
                        {
                            " child\
",
                        },
                        "\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    508,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "identifier",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "descendTree",
                            defaultValue = "true ",
                        },
                    },
                    [ 6 ] = {
                        "identifier",
                        "descendTree",
                    },
                },
                updatePins = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local keys = { pins.LEFT, pins.TOP, pins.RIGHT, pins.BOTTOM, \"x\", \"y\", \"width\", \"height\" }\
\9\9local childPins = self.childPins\
\9\9local childPinReferences = {}\
\9\9childPins.references = childPinReferences\
\9\9for i = self.needsHorizontalPinUpdate and 1 or 2, self.needsVerticalPinUpdate and 2 or 1 do\
\9\9\9local parentSize = i == 1 and self.width or self.height\
\9\9\9local positionPin, sizePin, positionProperty, sizeProperty = keys[i], keys[i + 2], keys[i + 4], keys[i + 6]\
\9\9\9local allowedPins = { [positionPin] = true, [sizePin] = true }\
\9\9\9local allowedProperties = { [positionProperty] = true, [sizeProperty] = true }\
\9\9\9local pinConvert = { [positionPin] = positionProperty, [sizePin] = sizeProperty }\
\
\9\9\9local values = {}\
\9\9\9local references = {}\
\9\9\9local stack = {}\
\9\9\9for childView, childPins in pairs( childPins ) do\
\9\9\9\9if childView ~= \"references\" then\
\9\9\9\9\9local valueReference = {}\
\9\9\9\9\9setmetatable( valueReference, {\
\9\9\9\9\9\9__index = function( _, key, noSelfSourcing )\
\9\9\9\9\9\9\9if not allowedPins[key] then\
\9\9\9\9\9\9\9\9error( \"access bad key \"..key ) -- only the right orientation pins can be referenced too\
\9\9\9\9\9\9\9else\
\9\9\9\9\9\9\9\9local stackView = stack[childView]\
\9\9\9\9\9\9\9\9if stackView and stackView[key] then\
\9\9\9\9\9\9\9\9\9error( \"circular reference\" )\
\9\9\9\9\9\9\9\9elseif stackView then\
\9\9\9\9\9\9\9\9\9stackView[key] = true\
\9\9\9\9\9\9\9\9else\
\9\9\9\9\9\9\9\9\9stackView = { [key] = true }\
\9\9\9\9\9\9\9\9\9stack[childView] = stackView\
\9\9\9\9\9\9\9\9end\
\
\9\9\9\9\9\9\9\9local propertyName = pinConvert[key]\
\9\9\9\9\9\9\9\9local mathParser = childPins[key]\
\9\9\9\9\9\9\9\9local value\
\9\9\9\9\9\9\9\9if mathParser then\
\9\9\9\9\9\9\9\9\9references.self = valueReference\
\9\9\9\9\9\9\9\9\9if noSelfSourcing then\
\9\9\9\9\9\9\9\9\9\9local rawValue = rawget( valueReference, key )\
\9\9\9\9\9\9\9\9\9\9if rawValue then\
\9\9\9\9\9\9\9\9\9\9\9return rawValue\
\9\9\9\9\9\9\9\9\9\9end\
\9\9\9\9\9\9\9\9\9end\
\9\9\9\9\9\9\9\9\9value = mathParser:value( parentSize, propertyName, references )\
\9\9\9\9\9\9\9\9\9references.self = nil\
\9\9\9\9\9\9\9\9elseif not noSelfSourcing then\
\9\9\9\9\9\9\9\9\9if key == positionPin then\
\9\9\9\9\9\9\9\9\9\9value = childView[positionProperty]\
\9\9\9\9\9\9\9\9\9else\
\9\9\9\9\9\9\9\9\9\9value = valueReference[positionPin] + childView[sizeProperty]\
\9\9\9\9\9\9\9\9\9end\
\9\9\9\9\9\9\9\9end\
\9\9\9\9\9\9\9\9valueReference[key] = value\
\9\9\9\9\9\9\9\9stackView[key] = nil\
\9\9\9\9\9\9\9\9return value\
\9\9\9\9\9\9\9end\
\9\9\9\9\9\9end\
\9\9\9\9\9} )\
\9\9\9\9\9values[childView] = valueReference\
\9\9\9\9\9local identifier = childView.identifier\
\9\9\9\9\9if identifier then\
\9\9\9\9\9\9local referenceValue = {}\
\9\9\9\9\9\9setmetatable( referenceValue, {\
\9\9\9\9\9\9\9__index = function( _, key )\
\9\9\9\9\9\9\9\9local ref = childPinReferences[childView]\
\9\9\9\9\9\9\9\9if not ref then\
\9\9\9\9\9\9\9\9\9ref = {}\
\9\9\9\9\9\9\9\9\9childPinReferences[childView] = ref\
\9\9\9\9\9\9\9\9end\
\9\9\9\9\9\9\9\9ref[key] = true\
\9\9\9\9\9\9\9\9return valueReference[key]\
\9\9\9\9\9\9\9end\
\9\9\9\9\9\9} )\
\9\9\9\9\9\9references[identifier] = referenceValue\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9\9for childView, childPins in pairs( childPins ) do\
\9\9\9\9if childPins[positionPin] or childPins[sizePin] then\
\9\9\9\9\9local valueReference = values[childView]\
\9\9\9\9\9local getValue = getmetatable( valueReference ).__index\
\9\9\9\9\9local childPosition, childSize = childView[positionProperty], childView[sizeProperty]\
\
\9\9\9\9\9local position = getValue( nil, positionPin, true )\
\9\9\9\9\9local sizePosition = getValue( nil, sizePin, true )\
\9\9\9\9\9local newPosition, newSize = childPosition, childSize\
\9\9\9\9\9if position and sizePosition then\
\9\9\9\9\9\9if sizePosition < position then\
\9\9\9\9\9\9\9error( sizePin .. \" pin was less than \" .. positionPin )\
\9\9\9\9\9\9end\
\9\9\9\9\9\9newPosition = position\
\9\9\9\9\9\9newSize = sizePosition - position + 1\
\9\9\9\9\9elseif position then\
\9\9\9\9\9\9newPosition = position\
\9\9\9\9\9elseif sizePosition then\
\9\9\9\9\9\9newPosition = sizePosition - childSize + 1\
\9\9\9\9\9end\
\
\9\9\9\9\9if childPosition ~= newPosition then\
\9\9\9\9\9\9childView[positionProperty] = newPosition\
\9\9\9\9\9end\
\9\9\9\9\9if childSize ~= newSize then\
\9\9\9\9\9\9childView[sizeProperty] = newSize\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9self.needsVerticalPinUpdate = false\
\9\9self.needsHorizontalPinUpdate = false\
\9\9self.needsPinUpdate = false\
\9end",
                    },
                    94,
                    {},
                    [ 6 ] = {},
                },
                connectInterfaceLink = {
                    "(_C_self_passed,propertyName,childView)",
                    {
                        "\
\9\9local oldChildView = self[propertyName]\
\9\9if oldChildView ~= childView then -- don't touch anything if it's the same view\
\9\9\9local action = self.interfaceLinkActions[propertyName]\
\9\9\9if action then\
\9\9\9\9if oldChildView then\
\9\9\9\9\9-- if there's an old view disconnect the old action handler\
\9\9\9\9\9oldView.event:disconnect( ActionInterfaceEvent, action, Event.phases.BEFORE, nil, self )\
\9\9\9\9end\
\9\9\9\9-- connect the new event view to the handler\
\9\9\9\9if childView then\
\9\9\9\9\9childView:event( ActionInterfaceEvent, action, Event.phases.BEFORE, nil, self )\
\9\9\9\9end\
\9\9\9end\
\
\9\9\9try( function() \
\9\9\9\9self[propertyName] = childView\
\9\9\9end ) {\
\
\9\9\9\9catch( InvalidValueTypeClassException, function( exception )\
\9\9\9\9\9error( \"Attempted to attach \" .. tostring( childView ) .. \" with identifier '\" .. childView.identifier .. \"' to property '\" .. propertyName .. \"' with an invalid ValueType of \" .. tostring( self ) .. \". The ValueType you specified in the properties table is not the same as the one being linked to, either change the property' ValueType or change the identifier of the invalid View.\" )\
\9\9\9\9end )\
\
\9\9\9}\
\9\9\9\
\9\9end\
\9end",
                    },
                    416,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "propertyName",
                        },
                        {
                            allowsNil = false,
                            type = "View",
                            name = "childView",
                        },
                    },
                    [ 6 ] = {
                        "propertyName",
                        "childView",
                    },
                },
                onChildOfChildAdded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if event.container ~= self then\
\9\9\9local childView = event.childView\
\9\9\9local identifier = childView.identifier\
\9\9\9if identifier then\
\9\9\9\9for propertyName, linkIdentifier in pairs( self.interfaceLinks ) do\
\9\9\9\9\9if linkIdentifier == identifier then\
\9\9\9\9\9\9self:connectInterfaceLink( propertyName, childView )\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    332,
                    {
                        {
                            allowsNil = false,
                            type = "ChildAddedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                loadInterface = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local interfaceName = self.interfaceName\
\9\9if interfaceName then\
\9\9\9-- this does all the work for us\
\9\9\9Interface( interfaceName, self.class, self ):ready( true )\
\9\9end\
\9end",
                    },
                    65,
                    {},
                    [ 6 ] = {},
                },
                findChildren = {
                    "(_C_self_passed,identifier,descendTree)",
                    {
                        "\
\9\9descendTree = (descendTree == nil and true or descendTree)\
\9\9\
\9\9local children = {}\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9if childView.identifier == identifier then\
\9\9\9\9table.insert( children, childView )\
\9\9\9end\
\
\9\9\9-- look in child Containers \
\9\9\9if descendTree and childView:typeOf( Container ) then\
\9\9\9\9local childChildren = childView:findChildren( identifier )\
\9\9\9\9for i2, childChild in ipairs( childChildren ) do\
\9\9\9\9\9table.insert( children, childChild )\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " children\
",
                        },
                        "\9end",
                    },
                    530,
                    {
                        {
                            allowsNil = true,
                            name = "identifier",
                        },
                        {
                            allowsNil = true,
                            name = "descendTree",
                        },
                    },
                    [ 6 ] = {
                        "identifier",
                        "descendTree",
                    },
                },
                onLoadedInterfacePinUpdate = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.needsPinUpdate then\
\9\9\9self:updatePins()\
\9\9end\
\9end",
                    },
                    56,
                    {
                        {
                            allowsNil = false,
                            type = "LoadedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9if self.needsPinUpdate then\
\9\9\9self:updatePins()\
\9\9end\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9childView:update( deltaTime )\
\9\9end\
\9end",
                    },
                    84,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                insert = {
                    "(_C_self_passed,childView,position)",
                    {
                        "\
\9\9local children = self.children\
\9\9if position then\
\9\9\9table.insert( children, position, childView )\
\9\9else\
\9\9\9children[#children + 1] = childView\
\9\9end\
\
\9\9local oldParent = childView.parent \
\9\9childView.parent = self\
\
\9\9local parsedPins = childView.parsedPins\
\9\9self.childPins[childView] = parsedPins\
\9\9if parsedPins[pins.LEFT] or parsedPins[pins.RIGHT] then\
\9\9\9self.needsHorizontalPinUpdate = true\
\9\9end\
\9\9if parsedPins[pins.TOP] or parsedPins[pins.BOTTOM] then\
\9\9\9self.needsVerticalPinUpdate = true\
\9\9end\
\
\9\9-- we need to update the isEnabled value\
\9\9childView.isEnabled = childView.raw.isEnabled\
\
\9\9for i, _childView in ipairs( children ) do\
\9\9\9if _childView == childView then\
\9\9\9\9_childView.event:handleEvent( ParentChangedInterfaceEvent( self, oldParent ) )\
\9\9\9else\
\9\9\9\9_childView.event:handleEvent( SiblingAddedInterfaceEvent( childView ) )\
\9\9\9end\
\9\9end\
\
\9\9local identifier = childView.identifier\
\9\9if identifier then\
\9\9\9for propertyName, linkIdentifier in pairs( self.interfaceLinks ) do\
\9\9\9\9if linkIdentifier == identifier then\
\9\9\9\9\9self:connectInterfaceLink( propertyName, childView )\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9self.eventManager:handleEvent( ChildAddedInterfaceEvent( childView, self ) )\
\
\9\9self.needsDraw = true\
\
\9\9",
                        {
                            " childView\
",
                        },
                        "\9end",
                    },
                    366,
                    {
                        {
                            allowsNil = false,
                            type = "View",
                            name = "childView",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "position",
                        },
                    },
                    [ 6 ] = {
                        "childView",
                        "position",
                    },
                },
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self:event( ChildAddedInterfaceEvent, self.onChildOfChildAdded )\
\9\9self:event( ChildRemovedInterfaceEvent, self.onChildOfChildRemoved )\
\9\9self:event( ChildRepositionedInterfaceEvent, self.onChildRepositionedMouseEnterExit )\
\9\9self:event( ReadyInterfaceEvent, self.onReadyLoadInterface )\
\9\9self:event( LoadedInterfaceEvent, self.onLoadedInterfacePinUpdate )\
\9\9self:event( MoveMouseEvent, self.onUpdateChildMouseEnterExit )\
\9\9self:event( ExitedInterfaceMouseEvent, self.onUpdateChildMouseEnterExit )\
\9\9self:event( EnteredInterfaceMouseEvent, self.onUpdateChildMouseEnterExit )\
\9end",
                    },
                    25,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                sendToFront = {
                    "(_C_self_passed,frontView,position)",
                    {
                        "\
\9\9local children = self.children\
\9\9for i, childView in ipairs( children ) do\
\9\9\9if childView == frontView then\
\9\9\9\9table.remove( children, i )\
\9\9\9\9if position then table.insert( children, position, childView )\
\9\9\9\9else table.insert( children, childView ) end\
\9\9\9end\
\9\9end\
\9\9\
\9\9-- TODO: screen order changed events?\
\9\9-- for i, childView in ipairs( self.children ) do\
\9\9--\9local onSiblingsChanged = childView.onSiblingsChanged\
\9\9--\9if onSiblingsChanged then onSiblingsChanged( childView ) end\
\9\9-- end\
\
\9\9self.needsDraw = true\
\9end",
                    },
                    305,
                    {
                        {
                            allowsNil = true,
                            name = "frontView",
                        },
                        {
                            allowsNil = true,
                            name = "position",
                        },
                    },
                    [ 6 ] = {
                        "frontView",
                        "position",
                    },
                },
                removeAll = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local children = self.children\
\9\9for i = #children, 1, -1 do\
\9\9\9self:remove( children[i] )\
\9\9end\
\9end",
                    },
                    447,
                    {},
                    [ 6 ] = {},
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local canvas, theme = self.canvas, self.theme\
\9\9local cornerRadius = theme:value( \"cornerRadius\" )\
\9\9local mask\
\9\9if cornerRadius > 0 then\
\9\9\9mask = RoundedRectangleMask( 1, 1, self.width, self.height, cornerRadius )\
\9\9end\
\9\9canvas:fill( theme:value( \"fillColour\" ), mask )\
\9\9canvas:outline( theme:value( \"outlineColour\" ), mask, theme:value( \"outlineThickness\" ) )\
\9end",
                    },
                    221,
                    {},
                    [ 6 ] = {},
                },
                dispose = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9super()\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9childView:dispose()\
\9\9end\
\9end",
                    },
                    584,
                    {},
                    [ 6 ] = {},
                },
                initialiseEventManager = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.eventManager = ContainerEventManager( self )\
\9end",
                    },
                    76,
                    {},
                    [ 6 ] = {},
                },
                disposeAll = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local children = self.children\
\9\9for i = #children, 1, -1 do\
\9\9\9children[i]:dispose()\
\9\9end\
\9\9self.needsDraw = true\
\9end",
                    },
                    457,
                    {},
                    [ 6 ] = {},
                },
                remove = {
                    "(_C_self_passed,removingView)",
                    {
                        "\
\9\9local didRemove = false\
\
\9\9local children = self.children\
\9\9for i, childView in ipairs( children ) do\
\9\9\9if childView == removingView then\
\9\9\9\9table.remove( children, i )\
\9\9\9\9didRemove = true\
\9\9\9\9break\
\9\9\9end\
\9\9end\
\
\9\9removingView.parent = nil\
\
\9\9if didRemove then\
\9\9\9self.childPins[removingView] = nil\
\9\9\9local identifier = removingView.identifier\
\9\9\9for propertyName, linkIdentifier in pairs( self.interfaceLinks ) do\
\9\9\9\9if linkIdentifier == identifier then\
\9\9\9\9\9if self[propertyName] == childView then\
\9\9\9\9\9\9self:connectInterfaceLink( propertyName, self:findChild( identifier ) )\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9\
\9\9\9self.eventManager:handleEvent( ChildRemovedInterfaceEvent( removingView, self ) )\
\9\9end\
\
\
\9\9",
                        {
                            " didRemove\
",
                        },
                        "\9end",
                    },
                    470,
                    {
                        {
                            allowsNil = true,
                            name = "removingView",
                        },
                    },
                    [ 6 ] = {
                        "removingView",
                    },
                },
                onChildRepositionedMouseEnterExit = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isMouseInView and event.childView.parent == self then\
\9\9\9self:onUpdateChildMouseEnterExit( nil, nil, self.cursorLastX, self.cursorLastY )\
\9\9end\
\9end",
                    },
                    550,
                    {
                        {
                            allowsNil = false,
                            type = "ChildRepositionedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onUpdateChildMouseEnterExit = {
                    "(_C_self_passed,event,phase,x,y)",
                    {
                        "\
\9\9local children = self.children\
\9\9self.cursorLastX = x\
\9\9self.cursorLastY = y\
\9\9for i = #children, 1, -1 do\
\9\9\9local childView = children[i]\
\9\9\9local isMouseInView = childView.isMouseInView\
\9\9\9if childView:hitTest( x, y ) then\
\9\9\9\9if not isMouseInView then\
\9\9\9\9\9-- mouse entered\
\9\9\9\9\9local _x, _y = x - childView.x + 1, y - childView.y + 1\
\9\9\9\9\9childView.event:handleEvent( EnteredInterfaceMouseEvent( _x, _y ) )\
\9\9\9\9\9childView.isMouseInView = true\
\9\9\9\9end\
\9\9\9else\
\9\9\9\9if isMouseInView then\
\9\9\9\9\9-- mouse exited\
\9\9\9\9\9local _x, _y = x - childView.x + 1, y - childView.y + 1\
\9\9\9\9\9childView.event:handleEvent( ExitedInterfaceMouseEvent( _x, _y ) )\
\9\9\9\9\9childView.isMouseInView = false\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    559,
                    {
                        {
                            allowsNil = true,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = true,
                            type = "Event.phases",
                            name = "phase",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                            defaultValue = "event.x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                            defaultValue = "event.y ",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                        "x",
                        "y",
                    },
                },
                onChildOfChildRemoved = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if event.container ~= self then\
\9\9\9local childView = event.childView\
\9\9\9local identifier = childView.identifier\
\9\9\9for propertyName, linkIdentifier in pairs( self.interfaceLinks ) do\
\9\9\9\9if linkIdentifier == identifier then\
\9\9\9\9\9if self[propertyName] == childView then\
\9\9\9\9\9\9self:connectInterfaceLink( propertyName, self:findChild( identifier ) )\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    346,
                    {
                        {
                            allowsNil = false,
                            type = "ChildRemovedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                draw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local canvas = self.canvas\
\9\9canvas:clear()\
\9\9\
\9\9-- first draw ourself\
\9\9local childMask = self:onDraw()\
\
\9\9-- then draw the children\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9-- only draw if something changed\
\9\9\9if childView.isVisible then\
\9\9\9\9local needsDraw = childView.needsDraw\
\9\9\9\9local x, y = childView.x, childView.y\
\9\9\9\9-- first draw the contents\
\9\9\9\9if needsDraw then\
\9\9\9\9\9childView:draw()\
\9\9\9\9end\
\
\9\9\9\9local shadowSize = childView.shadowSize\
\9\9\9\9if shadowSize > 0 then\
\9\9\9\9\9-- if there's a shadow draw it to the canvas\
\9\9\9\9\9local shadowMask = childView.shadowMask\
\9\9\9\9\9shadowColour = childView.theme:value( \"shadowColour\" )\
\9\9\9\9\9canvas:drawShadow( shadowColour, x, y, shadowSize, shadowMask )\
\9\9\9\9end\
\
\9\9\9\9-- draw the childView to the canvas\
\9\9\9\9childView.canvas:drawTo( canvas, x, y, childMask )\
\9\9\9\9if needsDraw then\
\9\9\9\9\9childView.needsDraw = false\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9self.needsDraw = false\
\9end",
                    },
                    235,
                    {},
                    [ 6 ] = {},
                },
                sendToBack = {
                    "(_C_self_passed,childView)",
                    {
                        "\
\9\9self:sendToFront( childView, 1 )\
\9end",
                    },
                    328,
                    {
                        {
                            allowsNil = true,
                            name = "childView",
                        },
                    },
                    [ 6 ] = {
                        "childView",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                cursorLastY = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                needsVerticalPinUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                offsetY = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                children = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                needsHorizontalPinUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                offsetX = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                interfaceLinkActions = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                cursorLastX = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                childPins = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{ references = {} }\
\
\9\
\
\
\
\
\9\
",
                },
                needsPinUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                interfaceLinks = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                interfaceName = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "Container",
        fileName = "/src/classes/Views/Containers/Container.luo",
    },
    QuartzApplication = {
        fileEnvironment = 22,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Application",
        instance = {
            defaultValues = {
                name = "\"Quartz\"\
\9\
",
                interfaceName = "\"quartz\"\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9super()\
\9\9self.programManager = ProgramManager( self )\
\9\9self:event( CharacterEvent, self.onChar )\
\9\9self.programManager:run( SilicaProgram( Bundle( \"/applications/About.application\" ) ) )\
\9end",
                    },
                    13,
                    {},
                    [ 6 ] = {},
                },
                onChar = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if event.character == 'r' then\
\9\9\9-- self.programManager:run( Program( Bundle( \"/applications/Test.application\" ) ) )\
\9\9\9self.programManager:run( SilicaProgram( Bundle( \"/applications/About.application\" ) ) )\
\9\9elseif event.character == 'f' then\
\9\9\9-- self.programManager:run( Program( Bundle( \"/applications/Test.application\" ) ) )\
\9\9\9self.programManager:run( SilicaProgram( Bundle( \"/applications/Files.application\" ) ) )\
\9\9elseif event.character == '\\\\' then\
\9\9\9os.reboot()\
\9\9end\
\9\9",
                        {
                            " false\
",
                        },
                        "\9end",
                    },
                    35,
                    {
                        {
                            allowsNil = false,
                            type = "CharacterEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9super()\
\9\9self.programManager:update()\
\9end",
                    },
                    24,
                    {},
                    [ 6 ] = {},
                },
                initialiseSettings = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.settings = QuartzSettings()\
\9end",
                    },
                    20,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                programManager = {
                    allowsNil = false,
                    link = false,
                    type = "ProgramManager",
                    readOnly = false,
                },
            },
        },
        className = "QuartzApplication",
        fileName = "/System/classes/QuartzApplication.luo",
    },
    UpKeyEvent = {
        fileEnvironment = 72,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"key_up\"\
\
\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "KeyEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "UpKeyEvent",
        fileName = "/src/classes/Events/Keyboard Events/UpKeyEvent.luo",
    },
    MultipleInstancesSettingsException = {
        fileEnvironment = 96,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "SettingsException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "MultipleInstancesSettingsException",
        fileName = "/src/classes/Exceptions/Settings/MultipleInstancesSettingsException.luo",
    },
    OutlineMask = {
        fileEnvironment = 122,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Mask",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,width,height,leftThickness,topThickness,rightThickness,bottomThickness)",
                    {
                        "\
\9\9local pixels = {}\
\9\9local i = 0\
\9\9for y = 1, height do\
\9\9\9for x = 1, width do\
\9\9\9\9i = i + 1\
\9\9\9\9pixels[i] = ( y <= topThickness or y > height - bottomThickness or x <= leftThickness or x > width - rightThickness ) or nil\
\9\9\9end\
\9\9end\
\
\9\9super( x, y, width, height, pixels )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "leftThickness",
                            defaultValue = "1",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "topThickness",
                            defaultValue = "leftThickness",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "rightThickness",
                            defaultValue = "leftThickness",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "bottomThickness",
                            defaultValue = "topThickness ",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "width",
                        "height",
                        "leftThickness",
                        "topThickness",
                        "rightThickness",
                        "bottomThickness",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "OutlineMask",
        fileName = "/src/classes/Graphics/OutlineMask.luo",
    },
    Settings = {
        fileEnvironment = 140,
        implements = {},
        lineNumber = 7,
        enums = {},
        fileName = "/src/classes/Settings.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if hasInitialised then\
\9\9\9MultipleInstanceSettingsException( \"You have already initialised another Settings instance. There can only be ONE per application, even if they are different classes. If you disagree with this make a GitHub issue, I might consider changing it.\" )\
\9\9end\
\
\9\9local defaults = {}\
\9\9for key, property in pairs( self.instanceProperties ) do\
\9\9\9if not SYSTEM_KEYS[key] then\
\9\9\9\9local propertyType = property[TYPETABLE_TYPE]\
\9\9\9\9if propertyType ~= \"string\" and propertyType ~= \"number\" and propertyType ~= \"table\" and propertyType ~= \"boolean\" then\
\9\9\9\9\9InvalidValueTypeSettingsException( \"Invalid ValueType for property '\" .. key .. \"', property values must be strings, numbers, tables or booleans.\" )\
\9\9\9\9end\
\9\9\9\9defaults[key] = self[key]\
\9\9\9end\
\9\9end\
\9\9self.defaults = defaults\
\9\9self:refresh()\
\9end",
                    },
                    13,
                    {},
                    [ 6 ] = {},
                },
                refresh = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local userDataFolder = self.application.userDataFolder\
\9\9local settingsFile = userDataFolder:fileFromPath( FILE_NAME )\
\9\9if not settingsFile then\
\9\9\9self.settingsFile = userDataFolder:makeSubfile( FILE_NAME, Metadata.mimes.SUSERDATA )\
\9\9\9self:save()\
\9\9else\
\9\9\9self.settingsFile = settingsFile\
\9\9\9local serialisedContents = settingsFile.serialisedContents\
\9\9\9for key, property in pairs( self.instanceProperties ) do\
\9\9\9\9if not SYSTEM_KEYS[key] then\
\9\9\9\9\9local value = serialisedContents[key]\
\9\9\9\9\9local propertyClass = property[TYPETABLE_CLASS]\
\9\9\9\9\9if propertyClass then\
\9\9\9\9\9\9if not propertyClass:typeOf( ISerialiseable ) then\
\9\9\9\9\9\9\9InvalidValueTypeSettingsException( \"Invalid ValueType for property '\" .. key .. \"', property values that are classes must implement ISerialiseable so they can be saved and read from files.\" )\
\9\9\9\9\9\9end\
\9\9\9\9\9\9if value then\
\9\9\9\9\9\9\9value = propertyClass.static:unserialise( value )\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9\9self[key] = value\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    35,
                    {},
                    [ 6 ] = {},
                },
                save = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local serialisedContents = {}\
\9\9for key, property in pairs( self.instanceProperties ) do\
\9\9\9if not SYSTEM_KEYS[key] then\
\9\9\9\9local value = self[key]\
\9\9\9\9local propertyClass = property[TYPETABLE_CLASS]\
\9\9\9\9if propertyClass then\
\9\9\9\9\9if not propertyClass:typeOf( ISerialiseable ) then\
\9\9\9\9\9\9InvalidValueTypeSettingsException( \"Invalid ValueType for property '\" .. key .. \"', property values that are classes must implement ISerialiseable so they can be saved and read from files.\" )\
\9\9\9\9\9end\
\9\9\9\9\9if value then\
\9\9\9\9\9\9value = value:serialise()\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9serialisedContents[key] = value\
\9\9\9end\
\9\9end\
\9\9self.settingsFile.serialisedContents = serialisedContents\
\9end",
                    },
                    62,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                settingsFile = {
                    allowsNil = false,
                    link = false,
                    type = "File",
                    readOnly = false,
                },
                defaults = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
            },
        },
        className = "Settings",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    ResizeHorizontalCursor = {
        fileEnvironment = 42,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Cursor",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ResizeHorizontalCursor",
        fileName = "/src/classes/Cursors/ResizeHorizontalCursor.luo",
    },
    CircleMask = {
        fileEnvironment = 118,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Mask",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,diameter)",
                    {
                        "\
\9\9local pixels = {}\
\
\9\9local r = diameter / 2\
\9\9if r % 1 ~= 0 then\
\9\9\9r = r - 0.25\
\9\9end\
\9\9local radius = ( diameter + 1 ) / 2\
\9\9for y = 1, diameter do\
\9\9\9local ySqrd = ( y - radius )^2\
\9\9\9for x = 1, diameter do\
\9\9\9\9-- TODO: could probably make this faster by only square rooting once per y somehow\
\9\9\9\9local distance = ( ySqrd + ( x - radius )^2 )^0.5\
\9\9\9\9if distance <= r then\
\9\9\9\9\9pixels[(y - 1) * diameter + x] = true\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9super( x, y, diameter, diameter, pixels )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "diameter",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "diameter",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "CircleMask",
        fileName = "/src/classes/Graphics/CircleMask.luo",
    },
    AlertWindow = {
        fileEnvironment = 222,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                display = {
                    "(_C_self_passed,message,title,callback,buttons,defaultButton)",
                    {
                        "\
\9\9self.application.container:insert( AlertWindow() )\
\9end",
                    },
                    20,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = false,
                            type = "String",
                            name = "title",
                            defaultValue = "\"Alert\"",
                        },
                        {
                            allowsNil = true,
                            type = "Function",
                            name = "callback",
                        },
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "buttons",
                            defaultValue = "{ \"Okay\" }",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "defaultButton",
                            defaultValue = "1 ",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "title",
                        "callback",
                        "buttons",
                        "defaultButton",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Window",
        instance = {
            defaultValues = {
                interfaceName = "\"alert-window\"\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self:event( LoadedInterfaceEvent, self.onInterfaceLoaded )\
\9\9self:event( ReadyInterfaceEvent, self.onReady )\
\9end",
                    },
                    7,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self:centre()\
\9\9self:focus()\
\9\9self.okayButton:focus()\
\9end",
                    },
                    14,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                okayButton = {
                    allowsNil = false,
                    link = true,
                    type = "Button",
                    readOnly = false,
                },
            },
        },
        className = "AlertWindow",
        fileName = "/src/classes/Views/Windows/AlertWindow.luo",
    },
    FileAssociationRegisteredInterfaceEvent = {
        fileEnvironment = 54,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_file_association_registered\";\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,fileAssociation)",
                    {
                        "\
\9\9self.fileAssociation = fileAssociation\
\9end",
                    },
                    7,
                    {
                        {
                            allowsNil = false,
                            type = "FileAssociation",
                            name = "fileAssociation",
                        },
                    },
                    [ 6 ] = {
                        "fileAssociation",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                fileAssociation = {
                    allowsNil = false,
                    link = false,
                    type = "FileAssociation",
                    readOnly = false,
                },
            },
        },
        className = "FileAssociationRegisteredInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/FileAssociationRegisteredInterfaceEvent.luo",
    },
    WindowButton = {
        fileEnvironment = 221,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                height = "9\
\9\
",
                width = "9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isPressed = {
                        "(_C_self_passed,isPressed)\
\9\9self.isPressed = isPressed\
\9\9self:updateThemeStyle()\
\9end",
                        40,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self:updateThemeStyle()\
\9end",
                        35,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9\
\9\9self:event( DownMouseEvent, self.onMouseDown )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9\9if self.onMouseUp then self:event( UpMouseEvent, self.onMouseUp ) end\
\9end",
                    },
                    14,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and ( self.isPressed and \"pressed\" or \"default\" ) or \"disabled\"\
\9end",
                    },
                    31,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = false\
\9\9\9if self.isEnabled and self:hitTestEvent( event ) then\
\9\9\9\9",
                        {
                            " self.eventManager:handleEvent( event )\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    50,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas = self.width, self.height, self.theme, self.canvas\
\
\9\9local diameter = theme:value( \"diameter\" )\
\9\9local circleMask = CircleMask( 1 + math.ceil( ( width - diameter ) / 2 ), 1 + math.ceil( ( height - diameter ) / 2 ), diameter )\
\9\9canvas:fill( theme:value( \"fillColour\" ), circleMask )\
\9\9canvas:outline( theme:value( \"outlineColour\" ), circleMask, theme:value( \"outlineThickness\" ) )\
\9end",
                    },
                    22,
                    {},
                    [ 6 ] = {},
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = true\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    64,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                window = {
                    allowsNil = false,
                    link = false,
                    type = "Window",
                    readOnly = false,
                },
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\9\
",
                },
            },
        },
        className = "WindowButton",
        fileName = "/src/classes/Views/Window Buttons/WindowButton.luo",
    },
    MaximiseWindowButton = {
        fileEnvironment = 220,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "WindowButton",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                onMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\9  \
\9\9if self.window then\
\9\9\9self.window:close()\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    3,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "MaximiseWindowButton",
        fileName = "/src/classes/Views/Window Buttons/MaximiseWindowButton.luo",
    },
    CloseWindowButton = {
        fileEnvironment = 219,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "WindowButton",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                onMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\9   \
\9\9if self.window then\
\9\9\9self.window:close()\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    3,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "CloseWindowButton",
        fileName = "/src/classes/Views/Window Buttons/CloseWindowButton.luo",
    },
    SilicaProgram = {
        fileEnvironment = 20,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Program",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialiseEnvironment = {
                    "(_C_self_passed)",
                    {
                        "\
        self.environment = SilicaProgramEnvironment( self )\
    end",
                    },
                    5,
                    {},
                    [ 6 ] = {},
                },
                update = {
                    "(_C_self_passed)",
                    {
                        "\
        super( false )\
        local silicaApplication = self.quartzProxy.silicaApplication\
        if silicaApplication then\
            silicaApplication:update()\
        end\
    end",
                    },
                    9,
                    {},
                    [ 6 ] = {},
                },
                run = {
                    "(_C_self_passed)",
                    {
                        "\
        super()\
        local environment = self.environment.environment\
        local silicafunction = loadfile( \"system/OldSilica.resourcepkg\", \"Silica Injection\" )\
        setfenv( silicafunction, environment )\
        silicafunction()\
    end",
                    },
                    17,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "SilicaProgram",
        fileName = "/System/classes/Program Managing/SilicaProgram.luo",
    },
    ActionInterfaceEvent = {
        fileEnvironment = 49,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_action\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\
\9\
\
\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,view,originalEvent)",
                    {
                        "\
\9\9self.view = view\
\9\9self.originalEvent = originalEvent\
\9end",
                    },
                    14,
                    {
                        {
                            allowsNil = false,
                            type = "View",
                            name = "view",
                        },
                        {
                            allowsNil = true,
                            type = "Event",
                            name = "originalEvent",
                        },
                    },
                    [ 6 ] = {
                        "view",
                        "originalEvent",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                originalEvent = {
                    allowsNil = true,
                    link = false,
                    type = "Event",
                    readOnly = false,
                },
                view = {
                    allowsNil = false,
                    link = false,
                    type = "View",
                    readOnly = false,
                },
            },
        },
        className = "ActionInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/ActionInterfaceEvent.luo",
    },
    SymbolSegmentButton = {
        fileEnvironment = 216,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "SegmentButton",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    symbolName = {
                        "(_C_self_passed,symbolName)\
\9\9self.symbol = Symbol.static:fromName( symbolName )\
\9end",
                        30,
                    },
                    symbol = {
                        "(_C_self_passed,symbol)\
\9\9self.symbol = symbol\
\9\9self.needsAutosize = true\
\9\9self.raw.symbolName = symbol.symbolName\
\9end",
                        24,
                    },
                },
            },
            functions = {
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9super()\
\9\9local width, height, theme, sPressed = self.width, self.height, self.theme, self.isPressed\
\
\9\9-- get all the shadow size details so we can adjust the compression as needed\
\9\9local defaultShadowSize = theme:value( \"shadowSize\", \"default\" )\
\9\9local shadowPressedSize = theme:value( \"shadowSize\", \"pressed\" )\
\9\9local shadowSize = theme:value( \"shadowSize\" )\
\9\9local shadowOffset = defaultShadowSize - shadowSize\
\9\9local shadowPressedOffset = defaultShadowSize - shadowPressedSize\
\9\9local shadowX = math.floor( shadowOffset * SHADOW_RATIO + 0.5 )\
\9\9local symbol = self.symbol\
\9\9self.canvas:fill( theme:value( \"symbolColour\" ), SymbolMask( theme:value( \"leftMargin\" ) + shadowX + 1, 1 + theme:value( \"topMargin\" ) + shadowOffset, symbol ) )\
\9end",
                    },
                    9,
                    {},
                    [ 6 ] = {},
                },
                autosize = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if self.isAutosized then\
\9\9\9local theme = self.theme\
\9\9\9local symbol = self.symbol\
\9\9\9local defaultShadowSize = theme:value( \"shadowSize\", \"default\" )\
\9\9\9local shadowSize = theme:value( \"shadowSize\", \"pressed\" )\
\9\9\9local shadowOffset = defaultShadowSize - shadowSize\
\9\9\9local shadowX = math.floor( shadowOffset * SHADOW_RATIO + 0.5 )\
\9\9\9self.width = symbol.width + theme:value( \"leftMargin\" ) + theme:value( \"rightMargin\" ) + shadowX\
\9\9\9self.height = symbol.height + theme:value( \"topMargin\" ) + theme:value( \"bottomMargin\" ) + shadowOffset\
\9\9end\
\9\9self.needsAutosize = false\
\9end",
                    },
                    34,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                symbolName = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                symbol = {
                    allowsNil = false,
                    link = false,
                    type = "Symbol",
                    readOnly = false,
                },
            },
        },
        className = "SymbolSegmentButton",
        fileName = "/src/classes/Views/SymbolSegmentButton.luo",
    },
    IDragDropDestination = {
        className = "IDragDropDestination",
        enums = {},
        isInterface = true,
        instance = {
            functions = {
                dragDropDropped = {
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isMove",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                },
                dragDropEntered = {
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                },
                dragDropMoved = {
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                },
                dragDropExited = {
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                },
                canAcceptDragDrop = {
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isMove",
                        },
                    },
                },
            },
            properties = {
                dropStyle = {
                    allowsNil = false,
                    link = false,
                    type = "DragDropManager.dropStyles",
                    readOnly = false,
                },
            },
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    FolderIcon = {
        fileEnvironment = 113,
        enums = {},
        lineNumber = 6,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                fromFolder = {
                    "(_C_self_passed,folder,isOpen)",
                    {
                        "\
\9\9local files = folder.files\
\9\9local filesCount = #files\
\9\9if filesCount > 0 then\
\9\9\9-- if the folder has any *files* (i.e. not folders) directly within it then we'll use a custom icon\
\9\9\9if not folderBackIcon then\
\9\9\9\9folderBackIcon = Icon.static:fromName( \"folder-back\" )\
\9\9\9end\
\9\9\9if not folderFrontIcon and not isOpen then\
\9\9\9\9folderFrontIcon = Icon.static:fromName( \"folder-front\" )\
\9\9\9\9folderFrontIconImages = folderFrontIcon.images\
\9\9\9elseif not folderFrontOpenIcon and isOpen then\
\9\9\9\9folderFrontOpenIcon = Icon.static:fromName( \"folder-front-open\" )\
\9\9\9\9folderFrontOpenIconImages = folderFrontOpenIcon.images\
\9\9\9end\
\9\9\9local images = {}\
\9\9\9local thumbnailCount = math.min( filesCount, VISIBLE_THUMBNAIL_COUNT )\
\9\9\9local icons = {}\
\9\9\9for n = 1, thumbnailCount do\
\9\9\9\9icons[n] = files[n].icon\
\9\9\9end\
\
\9\9\9local stepX, stepY = 4, 3\
\9\9\9local offsetMultiplier = ( VISIBLE_THUMBNAIL_COUNT - thumbnailCount ) / 2\
\9\9\9local offsetX, offsetY = math.floor( stepX * offsetMultiplier + 0.5 ), math.floor( stepY * offsetMultiplier + 0.5 )\
\9\9\9for i, _image in ipairs( folderBackIcon.images ) do\
\9\9\9\9local image = _image:copy()\
\9\9\9\9local width, height = image.width, image.height\
\9\9\9\9local size = math.max( width, height )\
\9\9\9\9if size >= MINIMUM_SIZE then\
\9\9\9\9\9local thumbnailSize = math.floor( size * THUMBNAIL_SCALE + 0.5 )\
\9\9\9\9\9for n = 1, thumbnailCount do\
\9\9\9\9\9\9local icon = icons[n]\
\9\9\9\9\9\9local iconPixels, iconWidth, iconHeight = icon:getScaledPixels( thumbnailSize )\
\9\9\9\9\9\9image:appendPixels( iconPixels, iconWidth, iconHeight, 3 + offsetX + (n - 1) * stepX, 1 + offsetY + (n - 1) * stepY )\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9if isOpen then\
\9\9\9\9\9image:appendImage( folderFrontOpenIconImages[i], 1, 1 )\
\9\9\9\9else\
\9\9\9\9\9image:appendImage( folderFrontIconImages[i], 1, 1 )\
\9\9\9\9end\
\9\9\9\9images[i] = image\
\9\9\9end\
\
\9\9\9",
                        {
                            " FolderIcon( images, folder )\
",
                        },
                        "\9\9else\
\9\9\9if isOpen then\
\9\9\9\9if not folderOpenIcon then\
\9\9\9\9\9folderOpenIcon = Icon.static:fromName( \"folder-open\" )\
\9\9\9\9end\
\9\9\9\9",
                        {
                            " folderOpenIcon\
",
                        },
                        "\9\9\9else\
\9\9\9\9if not folderIcon then\
\9\9\9\9\9folderIcon = Icon.static:fromName( \"folder\" )\
\9\9\9\9end\
\9\9\9\9",
                        {
                            " folderIcon\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    15,
                    {
                        {
                            allowsNil = false,
                            type = "Folder",
                            name = "folder",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isOpen",
                            defaultValue = "false ",
                        },
                    },
                    [ 6 ] = {
                        "folder",
                        "isOpen",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Icon",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,images,folder)",
                    {
                        "\
\9\9self.folder = folde\
\9\9super( images )\
\9end",
                    },
                    10,
                    {
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "images",
                        },
                        {
                            allowsNil = false,
                            type = "Folder",
                            name = "folder",
                        },
                    },
                    [ 6 ] = {
                        "images",
                        "folder",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                folder = {
                    allowsNil = false,
                    link = false,
                    type = "Folder",
                    readOnly = false,
                },
            },
        },
        className = "FolderIcon",
        fileName = "/src/classes/FolderIcon.luo",
    },
    LoadingClassException = {
        fileEnvironment = 90,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClassException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Error occured during class loading: \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "LoadingClassException",
        fileName = "/src/classes/Exceptions/Class System/LoadingClassException.luo",
    },
    SymbolButton = {
        fileEnvironment = 215,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Button",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    symbolName = {
                        "(_C_self_passed,symbolName)\
\9\9self.symbol = Symbol.static:fromName( symbolName )\
\9end",
                        30,
                    },
                    symbol = {
                        "(_C_self_passed,symbol)\
\9\9self.symbol = symbol\
\9\9self.needsAutosize = true\
\9\9self.raw.symbolName = symbol.symbolName\
\9end",
                        24,
                    },
                },
            },
            functions = {
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9super()\
\9\9local width, height, theme, sPressed = self.width, self.height, self.theme, self.isPressed\
\
\9\9-- get all the shadow size details so we can adjust the compression as needed\
\9\9local defaultShadowSize = theme:value( \"shadowSize\", \"default\" )\
\9\9local shadowPressedSize = theme:value( \"shadowSize\", \"pressed\" )\
\9\9local shadowSize = theme:value( \"shadowSize\" )\
\9\9local shadowOffset = defaultShadowSize - shadowSize\
\9\9local shadowPressedOffset = defaultShadowSize - shadowPressedSize\
\9\9local shadowX = math.floor( shadowOffset * SHADOW_RATIO + 0.5 )\
\9\9local symbol = self.symbol\
\9\9self.canvas:fill( theme:value( \"symbolColour\" ), SymbolMask( theme:value( \"leftMargin\" ) + shadowX + 1, 1 + theme:value( \"topMargin\" ) + shadowOffset, symbol ) )\
\9end",
                    },
                    9,
                    {},
                    [ 6 ] = {},
                },
                autosize = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if self.isAutosized then\
\9\9\9local theme = self.theme\
\9\9\9local symbol = self.symbol\
\9\9\9local defaultShadowSize = theme:value( \"shadowSize\", \"default\" )\
\9\9\9local shadowSize = theme:value( \"shadowSize\", \"pressed\" )\
\9\9\9local shadowOffset = defaultShadowSize - shadowSize\
\9\9\9local shadowX = math.floor( shadowOffset * SHADOW_RATIO + 0.5 )\
\9\9\9self.width = symbol.width + theme:value( \"leftMargin\" ) + theme:value( \"rightMargin\" ) + shadowX\
\9\9\9self.height = symbol.height + theme:value( \"topMargin\" ) + theme:value( \"bottomMargin\" ) + shadowOffset\
\9\9end\
\9\9self.needsAutosize = false\
\9end",
                    },
                    34,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                symbolName = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                symbol = {
                    allowsNil = false,
                    link = false,
                    type = "Symbol",
                    readOnly = false,
                },
            },
        },
        className = "SymbolButton",
        fileName = "/src/classes/Views/SymbolButton.luo",
    },
    Graphics = {
        fileEnvironment = 119,
        implements = {},
        lineNumber = 1,
        enums = {
            colours = {
                type = "Number",
                startLine = 3,
                values = "{\
\9\9TRANSPARENT = 0;\
\9\9WHITE = colours.white;\
\9\9ORANGE = colours.orange;\
\9\9MAGENTA = colours.magenta;\
\9\9LIGHT_BLUE = colours.lightBlue;\
\9\9YELLOW = colours.yellow;\
\9\9LIME = colours.lime;\
\9\9PINK = colours.pink;\
\9\9GREY = colours.grey;\
\9\9LIGHT_GREY = colours.lightGrey;\
\9\9CYAN = colours.cyan;\
\9\9PURPLE = colours.purple;\
\9\9BLUE = colours.blue;\
\9\9BROWN = colours.brown;\
\9\9GREEN = colours.green;\
\9\9RED = colours.red;\
\9\9BLACK = colours.black;\
\
\9\9\
\9\9GRAY = colours.grey;\
\9\9LIGHT_GRAY = colours.lightGrey;\
\9}\
\
\9\
\9alias colors = colours\
\
\
",
            },
        },
        fileName = "/src/classes/Graphics/Graphics.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "Graphics",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    SeparatorView = {
        fileEnvironment = 214,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                height = "1\
\
\
\9\
",
                width = "1\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas = self.width, self.height, self.theme\
\9\9self.canvas:fill( theme:value( \"separatorColour\" ), theme:value( \"separatorIsDashed\" ) and SeparatorMask( 1, 1, width, height ) or RectangleMask( 1, 1, width, height ) )\
\9end",
                    },
                    7,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "SeparatorView",
        fileName = "/src/classes/Views/SeparatorView.luo",
    },
    SeparatorMenuItem = {
        fileEnvironment = 213,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "MenuItem",
        instance = {
            defaultValues = {
                width = "51\
\9\
",
                height = "3\
\9\
",
                text = "\"\" \
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super:super( ... ) -- by pass the normal menuitem's event connecting, we don't need to get any events\
\9\9self:event( ThemeChangedInterfaceEvent, self.updateSize )\
\9\9self:updateSize()\
\9end",
                    },
                    8,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateSize = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local theme = self.theme\
\9\9self.height = 1 + theme:value( \"topMargin\") + theme:value( \"bottomMargin\")\
\9end",
                    },
                    22,
                    {
                        {
                            allowsNil = true,
                            type = "ThemeChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = true,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas, isPressed = self.width, self.height, self.theme, self.canvas\
\9\9canvas:fill( theme:value( \"fillColour\" ) )\
\9\9local leftMargin = theme:value( \"leftMargin\" )\
\9\9local separatorX, separatorY, separatorWidth = 1 + leftMargin, 1 + theme:value( \"topMargin\" ), width - leftMargin - theme:value( \"rightMargin\" )\
\9\9canvas:fill( theme:value( \"separatorColour\" ), theme:value( \"separatorIsDashed\" ) and SeparatorMask( separatorX, separatorY, separatorWidth, 1 ) or RectangleMask( separatorX, separatorY, separatorWidth, 1 ) )\
\9end",
                    },
                    14,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "SeparatorMenuItem",
        fileName = "/src/classes/Views/SeparatorMenuItem.luo",
    },
    SearchBox = {
        fileEnvironment = 211,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "TextBox",
        instance = {
            defaultValues = {
                placeholder = "\"Search...\"\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9super()\
\9\9local theme = self.theme\
\9\9local symbol = theme:value( \"symbol\" )\
\9\9self.canvas:fill( theme:value( \"symbolColour\" ), SymbolMask( 1 + theme:value( \"symbolMargin\" ), 1 + math.floor( ( self.height - symbol.height ) / 2 ), symbol ) )\
\9end",
                    },
                    6,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "SearchBox",
        fileName = "/src/classes/Views/SearchBox.luo",
    },
    UnknownFileAssociation = {
        fileEnvironment = 105,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "FileAssociation",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.id = 0\
\9\9self.mime = nil\
\9\9self.name = \"Unknown\"\
\9\9self.icon = Icon.static:fromName( \"unknownFile\" )\
\9\9self.extensions = {}\
\9\9self.programBundle = nil\
\9\9self.argumentFormat = {}\
\9end",
                    },
                    4,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "UnknownFileAssociation",
        fileName = "/src/classes/File Associations/UnknownFileAssociation.luo",
    },
    ToolbarSegmentContainer = {
        fileEnvironment = 192,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IToolbarItem",
            "IToolbarPressableItem",
        },
        extends = "SegmentContainer",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ToolbarSegmentContainer",
        fileName = "/src/classes/Views/Containers/Toolbar/ToolbarSegmentContainer.luo",
    },
    Radio = {
        fileEnvironment = 209,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                width = "8\
\9\
",
                height = "8\
\
\9\
",
                isEnabled = "true\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isChecked = {
                        "(_C_self_passed,isChecked)\
\9\9self.isChecked = isChecked\
\9\9if isChecked then\
\9\9\9for i, sibling in ipairs( self:siblingsOfType( Radio ) ) do\
\9\9\9\9sibling.isChecked = false\
\9\9\9end\
\9\9end\
\9\9self.eventManager:handleEvent( ActionInterfaceEvent( self ) )\
\9\9self:updateThemeStyle()\
\9end",
                        31,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self:updateThemeStyle()\
\9end",
                        47,
                    },
                    isPressed = {
                        "(_C_self_passed,isPressed)\
\9\9self.isPressed = isPressed\
\9\9self:updateThemeStyle()\
\9end",
                        52,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self:event( ParentChangedInterfaceEvent, self.onParentChanged )\
\9\9self:event( DownMouseEvent, self.onMouseDown )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9end",
                    },
                    11,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and ( self.isPressed and \"pressed\" or (self.isChecked and \"checked\" or \"default\" ) ) or ( self.isChecked and \"disabledChecked\" or \"disabled\" )\
\9end",
                    },
                    43,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = false\
\9\9\9if self:hitTestEvent( event ) then\
\9\9\9\9self.isChecked = true\
\9\9\9\9",
                        {
                            " self.eventManager:handleEvent( event )\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    69,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onParentChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local siblings = self:siblingsOfType( Radio )\
\9\9if #siblings == 0 or self.isChecked then\
\9\9\9self.isChecked = true -- if we're the first child or we're being added check ourself to ensure there's at least one and interface properties are respected\
\9\9end\
\9end",
                    },
                    57,
                    {
                        {
                            allowsNil = false,
                            type = "ParentChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas = self.width, self.height, self.theme, self.canvas\
\
\9\9local roundedRectangle = RoundedRectangleMask( 1, 1, width, height, theme:value( \"cornerRadius\" ) )\
\9\9canvas:fill( theme:value( \"fillColour\" ), roundedRectangle )\
\9\9canvas:outline( theme:value( \"outlineColour\" ), roundedRectangle, theme:value( \"outlineThickness\" ) )\
\9end",
                    },
                    19,
                    {},
                    [ 6 ] = {},
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = true\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    84,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isChecked = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\
\9\
",
                },
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "Radio",
        fileName = "/src/classes/Views/Radio.luo",
    },
    ProgressBar = {
        fileEnvironment = 208,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                width = "100\
\
\9\
",
                height = "7\
\9\
",
                isEnabled = "true\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    animationStep = {
                        "(_C_self_passed,animationStep)\
\9\9animationStep = math.floor( animationStep + 0.5 )\
\9\9local oldAnimationStep = self.animationStep\
\9\9if oldAnimationStep ~= animationStep then\
\9\9\9self.animationStep = animationStep\
\9\9\9self.needsDraw = true\
\9\9end\
\9end",
                        66,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self.theme.style = isEnabled and \"default\" or \"disabled\"\
\9end",
                        45,
                    },
                    maximum = {
                        "(_C_self_passed,maximum)\
\9\9self.maximum = math.max( maximum, 0 )\
\9end",
                        62,
                    },
                    value = {
                        "(_C_self_passed,value)\
\9\9self.value = math.min( math.max( value, 0 ), self.maximum )\
\9end",
                        54,
                    },
                },
            },
            functions = {
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas = self.width, self.height, self.theme, self.canvas\
\9\9local isIndeterminate = self.isIndeterminate\
\
\9\9-- background shape\
\9\9local outlineThickness, cornerRadius = theme:value( \"outlineThickness\" ), theme:value( \"cornerRadius\" )\
\9\9local roundedRectangle = RoundedRectangleMask( 1, 1, width, height, cornerRadius )\
\
\9\9if isIndeterminate then\
\9\9\9canvas:fill( theme:value( \"indeterminateFillColour\" ), roundedRectangle )\
\9\9\9canvas:fill( theme:value( \"indeterminateStripeColour\" ), roundedRectangle:subtract( StripeMask( 1, 1, width, height, self.animationStep, theme:value( \"indeterminateStripeWidth\" ) ) ) )\
\9\9\9canvas:outline( theme:value( \"indeterminateOutlineColour\" ), roundedRectangle, outlineThickness )\
\9\9else\
\9\9\9local barWidth = math.floor( ( self.value / self.maximum ) * width + 0.5 )\
\9\9\9if barWidth >= width then\
\9\9\9\9canvas:fill( theme:value( \"barFillColour\" ), roundedRectangle )\
\9\9\9\9canvas:outline( theme:value( \"barOutlineColour\" ), roundedRectangle, outlineThickness )\
\9\9\9else\
\9\9\9\9canvas:fill( theme:value( \"fillColour\" ), roundedRectangle )\
\9\9\9\9canvas:outline( theme:value( \"outlineColour\" ), roundedRectangle, outlineThickness )\
\
\9\9\9\9if barWidth > 0 then\
\9\9\9\9\9local barMask = RoundedRectangleMask( 1, 1, barWidth, height, cornerRadius, 0 )\
\9\9\9\9\9canvas:fill( theme:value( \"barFillColour\" ), barMask )\
\9\9\9\9\9canvas:outline( theme:value( \"barOutlineColour\" ), barMask, outlineThickness, outlineThickness, 0 )\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    15,
                    {},
                    [ 6 ] = {},
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9if self.value > 0 or self.isIndeterminate then\
\9\9\9self.animationStep = self.animationStep + deltaTime * 20\
\9\9end\
\9end",
                    },
                    79,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                maximum = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\
\
\9\
",
                },
                value = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                isIndeterminate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\
\9\
",
                },
                animationStep = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\
\9\
",
                },
            },
        },
        className = "ProgressBar",
        fileName = "/src/classes/Views/ProgressBar.luo",
    },
    MenuItem = {
        fileEnvironment = 207,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                width = "40\
\
\9\
",
                height = "12\
\9\
",
                isEnabled = "true\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isPressed = {
                        "(_C_self_passed,isPressed)\
\9\9self.isPressed = isPressed\
\9\9self:updateThemeStyle()\
\9end",
                        83,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self:updateThemeStyle()\
\9end",
                        78,
                    },
                    shortcut = {
                        "(_C_self_passed,shortcut)\
\9\9if type( shortcut ) == \"string\" and #shortcut > 0 then\
\9\9\9self.shortcut = KeyboardShortcut.static:fromString( shortcut ) or false\
\9\9elseif not shortcut then\
\9\9\9self.shortcut = false\
\9\9end\
\9\9self:updateText()\
\9end",
                        65,
                    },
                    text = {
                        "(_C_self_passed,text)\
\9\9self.text = text\
\9\9self:updateText()\
\9end",
                        60,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self:event( DownMouseEvent, self.onMouseDown )\
\9\9self:event( KeyboardShortcutEvent, self.onKeyboardShortcut )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9\9self:event( ThemeChangedInterfaceEvent, self.updateHeight )\
\9\9self:updateHeight()\
\9end",
                    },
                    17,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and ( self.isPressed and \"pressed\" or \"default\" ) or \"disabled\"\
\9end",
                    },
                    74,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = false\
\9\9\9if self.isEnabled and self:hitTestEvent( event ) then\
\9\9\9\9if self.eventManager:handleEvent( ActionInterfaceEvent( self ) ) then ",
                        {
                            " true ",
                        },
                        "end\
\9\9\9\9self.parent:close()\
\9\9\9\9local result = self.eventManager:handleEvent( event )\
\9\9\9\9",
                        {
                            " ( result ~= nil and result or true )\
",
                        },
                        "\9\9\9end\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    93,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onKeyboardShortcut = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled then\
\9\9\9local shortcut = self.shortcut\
\9\9\9if shortcut and shortcut:matchesEvent( event ) then\
\9\9\9\9local parent = self.parent\
\9\9\9\9local owner = parent.owner\
\9\9\9\9if owner:typeOf( MenuBarItem ) then owner:flash() end\
\9\9\9\9if self.eventManager:handleEvent( ActionInterfaceEvent( self ) ) then ",
                        {
                            " true ",
                        },
                        "end\
\9\9\9\9parent:close()\
\9\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    123,
                    {
                        {
                            allowsNil = false,
                            type = "KeyboardShortcutEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = true\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    111,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                updateHeight = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local theme = self.theme\
\9\9self.height = theme:value( \"font\" ).height + theme:value( \"topMargin\") + theme:value( \"bottomMargin\")\
\9end",
                    },
                    40,
                    {
                        {
                            allowsNil = true,
                            type = "ThemeChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = true,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas, font = self.width, self.height, self.theme, self.canvas\
\
\9\9canvas:fill( theme:value( \"fillColour\" ) )\
\
\9\9local leftMargin, rightMargin, topMargin, bottomMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" )\
\9\9local shortcut = self.shortcut\
\9\9if shortcut then\
\9\9\9canvas:fill( theme:value( \"shortcutColour\" ),  TextMask( leftMargin + 1, topMargin + 1, width - leftMargin - rightMargin, height - topMargin - bottomMargin, shortcut:symbols(), theme:value( \"shortcutFont\" ), Font.alignments.RIGHT ) )\
\9\9end\
\9\9canvas:fill( theme:value( \"textColour\" ),  TextMask( leftMargin + 1, topMargin + 1, width - leftMargin - rightMargin, height - topMargin - bottomMargin, self.text, theme:value( \"font\" ) ) )\
\9end",
                    },
                    27,
                    {},
                    [ 6 ] = {},
                },
                updateText = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local text = self.text\
\9\9local shortcut = self.shortcut\
\9\9local symbols = shortcut and shortcut:symbols()\
\9\9local theme = self.theme\
\9\9local textWidth = theme:value( \"font\" ):getWidth( text )\
\9\9local shortcutWidth = symbols and theme:value( \"shortcutFont\" ):getWidth( symbols ) or 0\
\9\9local width = textWidth + theme:value( \"leftMargin\" ) + theme:value( \"rightMargin\" ) + ( shortcutWidth ~= 0 and shortcutWidth + theme:value( \"shortcutMargin\") or 0 )\
\9\9self.width = width\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9parent.needsLayoutUpdate = true\
\9\9end\
\9end",
                    },
                    45,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                shortcut = {
                    allowsNil = true,
                    link = false,
                    type = "Any",
                    readOnly = false,
                },
                text = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "MenuItem",
        fileName = "/src/classes/Views/MenuItem.luo",
    },
    MenuButton = {
        fileEnvironment = 206,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Button",
        instance = {
            defaultValues = {
                width = "45\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {
                    isActive = {
                        "(_C_self_passed)\
\9\9if self.isPressed then\
\9\9\9return true\
\9\9end\
\9\9local menu = self.menu\
\9\9return menu and menu.isOpen or false\
\9end",
                        95,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    y = {
                        "(_C_self_passed,y)\
\9\9super( y )\
\9\9local menu = self.menu\
\9\9if menu then\
\9\9\9menu.y = y + self.theme:value( \"menuOffsetY\" )\
\9\9end\
\9end",
                        83,
                    },
                    x = {
                        "(_C_self_passed,x)\
\9\9super( x )\
\9\9local menu = self.menu\
\9\9if menu then\
\9\9\9menu.x = x + self.theme:value( \"menuOffsetX\" )\
\9\9end\
\9end",
                        75,
                    },
                    width = {
                        "(_C_self_passed,width)\
\9\9super( width )\
\9\9local menu = self.menu\
\9\9if menu then\
\9\9\9menu.width = width\
\9\9end\
\9end",
                        67,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self:event( MenuChangedInterfaceEvent, self.onMenuChanged )\
\9\9self:event( ParentChangedInterfaceEvent, self.onParentChanged )\
\9\9self:event( LoadedInterfaceEvent, self.onLoaded )\
\9end",
                    },
                    15,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and ( self.isPressed and \"pressed\" or ( self.isActive and \"active\" or \"default\" ) ) or \"disabled\"\
\9end",
                    },
                    103,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and self.isPressed then\
\9\9\9self.isPressed = false\
\9\9\9if self:hitTestEvent( event ) then\
\9\9\9\9self.menu:toggle()\
\9\9\9\9",
                        {
                            " self.eventManager:handleEvent( event )\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    111,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onParentChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local menu = self.menu\
\9\9if menu then\
\9\9\9if menu.parent then\
\9\9\9\9menu.parent:removeChild( menu )\
\9\9\9end\
\9\9\9menu.x = self.x - 5\
\9\9\9menu.y = self.y + 7\
\9\9\9self.parent:insert( menu )\
\9\9end\
\9end",
                    },
                    55,
                    {
                        {
                            allowsNil = false,
                            type = "ParentChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onLoaded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local menuName = self.menuName\
\9\9if not menuName then\
\9\9\9MenuNotSpecifiedException( \"A MenuButton did not specifiy the property 'menuName'. MenuButtons must specify this property as it indicates what inteface file to load the menu from.\", 0 )\
\9\9end\
\9\9menu = Menu.static:fromInterface( menuName )\
\9\9menu.owner = self\
\9\9menu.isSingleShot = false\
\9\9menu.isVisible = false\
\9\9menu.hitTestOwner = true\
\9\9local theme =self.theme\
\9\9menu.x = self.x + theme:value( \"menuOffsetX\" )\
\9\9menu.y = self.y + theme:value( \"menuOffsetY\" )\
\9\9self.menu = menu\
\9\9self.parent:insert( menu )\
\9end",
                    },
                    38,
                    {
                        {
                            allowsNil = false,
                            type = "LoadedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9super()\
\9\9local theme = self.theme\
\9\9local defaultShadowSize = theme:value( \"shadowSize\", \"default\" )\
\9\9local shadowPressedSize = theme:value( \"shadowSize\", \"pressed\" )\
\9\9local shadowSize = theme:value( \"shadowSize\" )\
\9\9local shadowOffset = defaultShadowSize - shadowSize\
\9\9local shadowPressedOffset = defaultShadowSize - shadowPressedSize\
\9\9local shadowX = math.floor( shadowOffset * SHADOW_RATIO + 0.5 )\
\
\9\9local topMargin, arrowMargin = theme:value( \"topMargin\" ), theme:value( \"arrowMargin\" )\
\9\9local symbol = theme:value( \"arrowSymbol\" )\
\9\9self.canvas:fill( theme:value( \"arrowColour\" ), SymbolMask( self.width - arrowMargin - symbol.width + shadowX, 1 + math.floor( ( self.height - symbol.height ) / 2 ) + shadowOffset, symbol ) )\
\9end",
                    },
                    23,
                    {},
                    [ 6 ] = {},
                },
                onMenuChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self:updateThemeStyle()\
\
\9\9if self.menu.isOpen then\
\9\9\9local parent = self.parent\
\9\9\9parent:sendToFront( self.menu )\
\9\9\9parent:sendToFront( self )\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    126,
                    {
                        {
                            allowsNil = false,
                            type = "MenuChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                menu = {
                    allowsNil = false,
                    link = false,
                    type = "Menu",
                    readOnly = false,
                },
                menuName = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                isActive = {
                    allowsNil = true,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
            },
        },
        className = "MenuButton",
        fileName = "/src/classes/Views/MenuButton.luo",
    },
    MenuBarItem = {
        fileEnvironment = 205,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                isEnabled = "true\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {
                    isActive = {
                        "(_C_self_passed)\
\9\9if self.isPressed then\
\9\9\9return true\
\9\9end\
\9\9local menu = self.menu\
\9\9return menu and menu.isOpen or false\
\9end",
                        123,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self:updateThemeStyle()\
\9end",
                        135,
                    },
                    isFlashing = {
                        "(_C_self_passed,isFlashing)\
\9\9self.isFlashing = isFlashing\
\9\9self:updateThemeStyle()\
\9end",
                        114,
                    },
                    isPressed = {
                        "(_C_self_passed,isPressed)\
\9\9self.isPressed = isPressed\
\9\9self:updateThemeStyle()\
\9end",
                        140,
                    },
                    x = {
                        "(_C_self_passed,x)\
\9\9super( x )\
\9\9local menu = self.menu\
\9\9if menu then\
\9\9\9menu.x = self.x + self.parent.x + - 1 + self.theme:value( \"menuOffsetX\" )\
\9\9end\
\9end",
                        86,
                    },
                    text = {
                        "(_C_self_passed,text)\
\9\9self.text = text\
\9\9self:updateWidth()\
\9end",
                        81,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9-- local menuName = self.menuName\
\9\9-- if not menuName then error( \"MenuBarItems must specify the property menuName (the name of the interface file to use).\", 0 ) end\
\9\9-- menu = Menu.fromInterface( menuName, Menu )\
\9\9-- menu.owner = self\
\9\9-- menu.isSingleShot = false\
\9\9-- menu.isVisible = false\
\9\9-- menu.hitTestOwner = true\
\9\9-- menu.topMargin = Menu.topMargin + 4\
\9\9-- self.menu = menu\
\9\9self:event( MenuChangedInterfaceEvent, self.onMenuChanged )\
\9\9self:event( DownMouseEvent, self.onMouseDown )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9\9self:event( ReadyInterfaceEvent, self.onReady )\
\9\9self:updateHeight()\
\9end",
                    },
                    20,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = true\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    164,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                flash = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.isFlashing = 0.2\
\9end",
                    },
                    110,
                    {},
                    [ 6 ] = {},
                },
                onMenuChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self:updateThemeStyle()\
\9\9\
\9\9local menu = self.menu\
\9\9if menu.isOpen then\
\9\9\9menu.parent:sendToFront( menu )\
\9\9\9menu.parent:sendToFront( self.parent )\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    176,
                    {
                        {
                            allowsNil = false,
                            type = "MenuChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas, font = self.width, self.height, self.theme, self.canvas\
\
\9\9canvas:fill( theme:value( \"fillColour\" ) )\
\9\9local leftMargin, rightMargin, topMargin, bottomMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" )\
\9\9canvas:fill( theme:value( \"textColour\" ),  TextMask( leftMargin + 1, topMargin + 1, width - leftMargin - rightMargin, height - topMargin - bottomMargin, self.text, theme:value( \"font\" ) ) )\
\9end",
                    },
                    57,
                    {},
                    [ 6 ] = {},
                },
                updateWidth = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local theme = self.theme\
\9\9local textWidth = theme:value( \"font\" ):getWidth( self.text )\
\9\9local width = textWidth + theme:value( \"leftMargin\" ) + theme:value( \"rightMargin\" )\
\9\9self.width = width\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9parent.needsLayoutUpdate = true\
\9\9end\
\9end",
                    },
                    70,
                    {
                        {
                            allowsNil = true,
                            type = "ThemeChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = true,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local menuName = self.menuName\
\9\9if not menuName then\
\9\9\9MenuNotSpecifiedException( \"A MenuBarItem did not specifiy the property 'menuName'. MenuButtons must specify this property as it indicates what inteface file to load the menu from.\", 0 )\
\9\9end\
\9\9local parent = self.parent\
\9\9menu = Menu.static:fromInterface( menuName )\
\9\9menu.owner = self\
\9\9menu.isSingleShot = false\
\9\9menu.isVisible = false\
\9\9menu.hitTestOwner = true\
\9\9local theme = self.theme\
\9\9menu.x = self.x + parent.x + theme:value( \"menuOffsetX\" )\
\9\9menu.y = self.y + parent.y + self.height + theme:value( \"menuOffsetY\" )\
\9\9self.menu = menu\
\9\9parent.parent:insert( menu )\
\9end",
                    },
                    39,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and self.isPressed then\
\9\9\9self.isPressed = false\
\9\9\9if self:hitTestEvent( event ) then\
\9\9\9\9self.menu:toggle()\
\9\9\9\9",
                        {
                            " self.eventManager:handleEvent( event )\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    150,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                updateHeight = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local theme = self.theme\
\9\9self.height = theme:value( \"font\").height + theme:value( \"topMargin\") + theme:value( \"bottomMargin\")\
\9end",
                    },
                    65,
                    {
                        {
                            allowsNil = true,
                            type = "ThemeChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = true,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9super:super( deltaTime )\
\9\9local isFlashing = self.isFlashing\
\9\9if isFlashing then\
\9\9\9if isFlashing <= 0 then\
\9\9\9\9self.isFlashing = false\
\9\9\9else\
\9\9\9\9self.isFlashing = isFlashing - deltaTime\
\9\9\9end\
\9\9end\
\9end",
                    },
                    94,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and ( self.isPressed and \"pressed\" or ( self.isActive and \"active\" or \"default\" ) ) or \"disabled\"\
\9end",
                    },
                    131,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                isFlashing = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                isActive = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
                menu = {
                    allowsNil = true,
                    link = false,
                    type = "Menu",
                    readOnly = false,
                },
                menuName = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                text = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "MenuBarItem",
        fileName = "/src/classes/Views/MenuBarItem.luo",
    },
    TopBarSeparatorView = {
        fileEnvironment = 29,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "SeparatorView",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    activeX = {
                        "(_C_self_passed,activeX)\
\9   self.activeX = activeX\
\9   self.needsDraw = true\
\9end",
                        13,
                    },
                    activeWidth = {
                        "(_C_self_passed,activeWidth)\
\9    self.activeWidth = activeWidth\
\9    self.needsDraw = true\
\9end",
                        18,
                    },
                },
            },
            functions = {
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9    super()\
\9    local theme = self.theme\
\9    self.canvas:fill( theme:value( \"activeSeparatorColour\" ), theme:value( \"activeSeparatorIsDashed\" ) and SeparatorMask( self.activeX, 1, self.activeWidth, self.height ) or RectangleMask( self.activeX, 1, self.activeWidth, self.height ) )\
\9end",
                    },
                    7,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                activeX = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                activeWidth = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\
\
\9\
",
                },
            },
        },
        className = "TopBarSeparatorView",
        fileName = "/System/classes/TopBar/TopBarSeparatorView.luo",
    },
    MaskedTextBox = {
        fileEnvironment = 204,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "TextBox",
        instance = {
            defaultValues = {
                isMasked = "true\
\
\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "MaskedTextBox",
        fileName = "/src/classes/Views/MaskedTextBox.luo",
    },
    ScrollMouseEvent = {
        fileEnvironment = 79,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"mouse_scroll\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "MouseEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,direction,x,y)",
                    {
                        "\
\9\9self.direction = direction\
\9\9self.x = x\
\9\9self.y = y\
\9\9self.globalX = x\
\9\9self.globalY = y\
\9end",
                    },
                    14,
                    {
                        {
                            allowsNil = false,
                            type = "MouseEvent.directions",
                            name = "direction",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "direction",
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                direction = {
                    allowsNil = false,
                    link = false,
                    type = "MouseEvent.directions",
                    readOnly = false,
                },
            },
        },
        className = "ScrollMouseEvent",
        fileName = "/src/classes/Events/Mouse Events/ScrollMouseEvent.luo",
    },
    Label = {
        fileEnvironment = 203,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self:updateThemeStyle()\
\9end",
                        29,
                    },
                    font = {
                        "(_C_self_passed,font)\
\9\9self.font = font\
\9\9self.needsAutosize = true\
\9end",
                        19,
                    },
                    text = {
                        "(_C_self_passed,text)\
\9\9self.text = text\
\9\9self.needsAutosize = true\
\9end",
                        24,
                    },
                },
            },
            functions = {
                autosize = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if self.isAutosized then\
\9\9\9local font, text = self.font, self.text\
\9\9\9local fontWidth = font:getWidth( text )\
\9\9\9self.width = fontWidth\
\9\9\9self.height = font.height\
\9\9end\
\9\9self.needsAutosize = false\
\9end",
                    },
                    41,
                    {},
                    [ 6 ] = {},
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and \"default\" or \"disabled\"\
\9end",
                    },
                    15,
                    {},
                    [ 6 ] = {},
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.canvas:fill( self.theme:value( \"textColour\" ), TextMask( 1, 1, self.width, self.height, self.text, self.font ) )\
\9end",
                    },
                    11,
                    {},
                    [ 6 ] = {},
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9if self.needsAutosize then\
\9\9\9self:autosize()\
\9\9end\
\9end",
                    },
                    34,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isAutosized = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\
\9\
",
                },
                needsAutosize = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
\
\9\
",
                },
                font = {
                    allowsNil = false,
                    link = false,
                    type = "Font",
                    readOnly = false,
                    defaultValue = "Font.static.systemFont\
\
\9\
",
                },
                text = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                    defaultValue = "\"\"\
\9\
",
                },
            },
        },
        className = "Label",
        fileName = "/src/classes/Views/Label.luo",
    },
    ParentChangedInterfaceEvent = {
        fileEnvironment = 62,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_parent_changed\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,newParent,oldParent)",
                    {
                        "\
\9\9self.newParent = newParent\
\9\9self.oldParent = oldParent\
\9end",
                    },
                    9,
                    {
                        {
                            allowsNil = false,
                            type = "Container",
                            name = "newParent",
                        },
                        {
                            allowsNil = false,
                            type = "Container",
                            name = "oldParent",
                        },
                    },
                    [ 6 ] = {
                        "newParent",
                        "oldParent",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                oldParent = {
                    allowsNil = false,
                    link = false,
                    type = "Container",
                    readOnly = false,
                },
                newParent = {
                    allowsNil = false,
                    link = false,
                    type = "Container",
                    readOnly = false,
                },
            },
        },
        className = "ParentChangedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/ParentChangedInterfaceEvent.luo",
    },
    RectangleMask = {
        fileEnvironment = 125,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Mask",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,width,height)",
                    {
                        "\
\9\9local pixels = {}\
\9\9for i = 1, width * height do\
\9\9\9pixels[i] = true\
\9\9end\
\
\9\9super( x, y, width, height, pixels )\
\9end",
                    },
                    6,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "width",
                        "height",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "RectangleMask",
        fileName = "/src/classes/Graphics/RectangleMask.luo",
    },
    DragView = {
        fileEnvironment = 34,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    shadowMask = {
                        "(_C_self_passed)\
\9\9return self.shadowMask\
\9end",
                        14,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    image = {
                        "(_C_self_passed,image)\
\9\9self.image = image\
\9\9self.needsDraw = true\
\9end",
                        9,
                    },
                    shadowMask = {
                        "(_C_self_passed,shadowMask)\
\9\9self.shadowMask = shadowMask\
\9\9self.needsDraw = true\
\9end",
                        18,
                    },
                },
            },
            functions = {
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.canvas:image( self.image, 1, 1, self.width, self.height )\
\9end",
                    },
                    5,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                image = {
                    allowsNil = false,
                    link = false,
                    type = "Image",
                    readOnly = false,
                },
            },
        },
        className = "DragView",
        fileName = "/src/classes/Clipboard/Drag and Drop/DragView.luo",
    },
    WindowContainer = {
        fileEnvironment = 202,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {
                leftPin = "\"1\"\
\9\
",
                bottomPin = "\"100% - 4\"\
\
\
",
                rightPin = "\"100% - 3\"\
\9\
",
                topPin = "\"11\"\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "WindowContainer",
        fileName = "/src/classes/Views/Containers/Window/WindowContainer.luo",
    },
    FileSystemItem = {
        fileEnvironment = 108,
        implements = {},
        lineNumber = 28,
        enums = {},
        fileName = "/src/classes/File System/FileSystemItem.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    association = {
                        "(_C_self_passed)\
\9\9local association = self.association\
\9\9if association then return association end\
\
\9\9association = FileAssociationManager.static:getAssociation( self.metadata.mime )\
\9\9self.association = association\
\9\9return association\
\9end",
                        129,
                    },
                    size = {
                        "(_C_self_passed)\
\9\9return fs.getSize( self.path )\
\9end",
                        146,
                    },
                    metadata = {
                        "(_C_self_passed)\
\9\9local metadata = self.metadata\
\9\9if metadata then return metadata end\
\
\9\9metadata = Metadata( self )\
\9\9self.raw.metadata = metadata\
\9\9return metadata\
\9end",
                        255,
                    },
                    sizeString = {
                        "(_C_self_passed)\
\9\9local size = self.size\
\9\9if size == 0 then return \"0B\" end\
\9\9local prefixes = { [0] = \"\"; \"k\"; \"M\"; \"G\"; \"T\"; \"P\"; }\
\9\9local order = math.floor( math.log( size ) / math.log( 1024 ) )\
\9\9local bytes = math.ceil( (size / ( 1024 ^ order) ) * 10 )\
\9\9return bytes / 10 .. prefixes[order] .. \"B\"\
\9end",
                        154,
                    },
                    metadataPath = {
                        "(_C_self_passed)\
\9\9return self.parentPath .. \"/.metadata/\" ..self.fullName\
\9end",
                        251,
                    },
                    parent = {
                        "(_C_self_passed)\
\9\9local parent = self.parent\
\9\9if parent then return parent end\
\9\9if self.path == \"/\" then return nil end\
\
\9\9local parentPath = self.parentPath\
\9\9return Folder( parentPath )\
\9end",
                        201,
                    },
                    icon = {
                        "(_C_self_passed)\
\9\9local cache = self.icon\
\9\9if cache then return cache end\
\
\9\9local mime = self.metadata.mime\
\9\9local cached = iconCache[mime]\
\9\9if cached then\
\9\9\9return cached\
\9\9end\
\
\9\9local icon\
\9\9if Image.static:isMIME( mime ) then\
\9\9\9-- this file is an image. we'll make a thumbnail icon for it instead if it's a valid image\
\9\9\9icon = ThumbnailIcon.static:fromFile( self )\
\9\9end\
\
\9\9if not icon then\
\9\9\9local association = self.association\
\9\9\9if association then\
\9\9\9\9icon = association.icon\
\9\9\9end\
\9\9end\
\
\9\9if icon then\
\9\9\9self.icon = icon\
\9\9\9return icon\
\9\9end\
\
\9\9if not unknownIcon then\
\9\9\9unknownIcon = Icon.static:fromPath( \"/src/resources/Icons/unknown.sicon\" )\
\9\9end\
\9\9return unknownIcon\
\9end",
                        167,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    path = {
                        "(_C_self_passed,path)\
\9\9path = resolve( path )\
\9\9if not fs.exists( path ) then error( \"Attempted to set FileSystemItem.path to non-existant path '\" .. path .. \"'.\", 2 ) end\
\9\9local oldPath = self.path\
\9\9if oldPath then\
\9\9\9fileCache[oldPath] = nil\
\9\9end\
\9\9self.path = path\
\9\9fileCache[path] = { self, osClock() }\
\
\9\9local parentPath, fullName = path:match( \"(.*)/(.+)\" )\
\9\9fullName = fullName or \"\"\
\9\9self.fullName = fullName\
\9\9self.raw.parentPath = ( parentPath == \"\" and \"/\" or parentPath )\
\9\9local name, extension = fullName:match( \"^(.+)%.(%w-)$\" )\
\9\9self.name = name or fullName\
\9\9self.extension = extension\
\9end",
                        110,
                    },
                    size = {
                        "(_C_self_passed,size)\
\9\9error( \"FileSystemItem.size is a read-only property.\", 2 )\
\9end",
                        150,
                    },
                    sizeString = {
                        "(_C_self_passed,sizeString)\
\9\9error( \"FileSystemItem.sizeString is a read-only property.\", 2 )\
\9end",
                        163,
                    },
                    metadata = {
                        "(_C_self_passed,metadata)\
\9\9error( \"FileSystemItem.metadata is a read-only property.\", 2 )\
\9end",
                        264,
                    },
                    parent = {
                        "(_C_self_passed,parent)\
\9\9error( \"FileSystemItem.parent is a read-only property. To move a FileSystemItem use :moveTo\", 2 )\
\9end",
                        210,
                    },
                    parentPath = {
                        "(_C_self_passed,parentPath)\
\9\9error( \"FileSystemItem.parentPath is a read-only property. To move a FileSystemItem use :moveTo\", 2 )\
\9end",
                        214,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,path,parent)",
                    {
                        "\
\9\9self.path = path\
\9\9if parent then\
\9\9\9self.raw.parent = parent\
\9\9end\
\9end",
                    },
                    103,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                        {
                            allowsNil = true,
                            name = "parent",
                        },
                    },
                    [ 6 ] = {
                        "path",
                        "parent",
                    },
                },
                rename = {
                    "(_C_self_passed,fullName)",
                    {
                        "\
\9\9local newPath = self.parentPath .. \"/\" .. fullName\
\9\9fs.move( self.path, newPath )\
\9\9self.metadata:rename( fullName )\
\9end",
                    },
                    245,
                    {
                        {
                            allowsNil = true,
                            name = "fullName",
                        },
                    },
                    [ 6 ] = {
                        "fullName",
                    },
                },
                delete = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9fs.delete( self.path )\
\9\9self.metadata:delete( folder )\
\9\9self:dispose()\
\9end",
                    },
                    218,
                    {},
                    [ 6 ] = {},
                },
                copyTo = {
                    "(_C_self_passed,folder)",
                    {
                        "\
\9\9local folderPath = folder.path\
\9\9if folderPath == self.parentPath then ",
                        {
                            "",
                        },
                        " end\
\9\9\
\9\9local newPath = folderPath .. \"/\" .. self.fullName\
\9\9fs.copy( self.path, newPath )\
\9\9local newFile = FileSystemItem( newPath )\
\9\9self.metadata:copyTo( folder, newFile )\
\9end",
                    },
                    235,
                    {
                        {
                            allowsNil = true,
                            name = "folder",
                        },
                    },
                    [ 6 ] = {
                        "folder",
                    },
                },
                moveTo = {
                    "(_C_self_passed,folder)",
                    {
                        "\
\9\9local folderPath = folder.path\
\9\9if folderPath == self.parentPath then ",
                        {
                            "",
                        },
                        " end\
\
\9\9local newPath = folderPath .. \"/\" .. self.fullName\
\9\9fs.move( self.path, newPath )\
\9\9self.metadata:moveTo( folder )\
\9\9self.raw.parentPath = folderPath\
\9\9self.raw.parent = nil -- delete the cache of the old parent\
\9end",
                    },
                    224,
                    {
                        {
                            allowsNil = true,
                            name = "folder",
                        },
                    },
                    [ 6 ] = {
                        "folder",
                    },
                },
                open = {
                    "(_C_self_passed,association)",
                    {
                        "\
\9\9FileAssociationManager.static:open( self, association )\
\9end",
                    },
                    142,
                    {
                        {
                            allowsNil = true,
                            type = "Any",
                            name = "association",
                        },
                    },
                    [ 6 ] = {
                        "association",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                icon = {
                    allowsNil = true,
                    link = false,
                    type = "Any",
                    readOnly = false,
                },
                metadataPath = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                parent = {
                    allowsNil = true,
                    link = false,
                    type = "Any",
                    readOnly = false,
                },
                metadata = {
                    allowsNil = true,
                    link = false,
                    type = "Metadata",
                    readOnly = false,
                },
                path = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                fullName = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                parentPath = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                association = {
                    allowsNil = true,
                    link = false,
                    type = "Any",
                    readOnly = false,
                },
                sizeString = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                extension = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                name = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                size = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
            },
        },
        className = "FileSystemItem",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                exists = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9",
                        {
                            " fs.exists( resolve( path ) )\
",
                        },
                        "\9end",
                    },
                    99,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
                purgeOldCache = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local minClock = osClock() - MAX_FILE_AGE\
\9\9for k, v in pairs( fileCache ) do\
\9\9\9if v[2] < minClock then\
\9\9\9\9fileCache[k] = nil\
\9\9\9end\
\9\9end\
\9end",
                    },
                    73,
                    {},
                    [ 6 ] = {},
                },
                purgeCached = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9for k, v in pairs( fileCache ) do\
\9\9\9fileCache[k] = nil\
\9\9end\
\9end",
                    },
                    67,
                    {},
                    [ 6 ] = {},
                },
                tidy = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9",
                        {
                            " tidy( path )\
",
                        },
                        "\9end",
                    },
                    85,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
                resolve = {
                    "(_C_self_passed,path,root)",
                    {
                        "\
\9\9",
                        {
                            " resolve( path, root )\
",
                        },
                        "\9end",
                    },
                    92,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "path",
                        },
                        {
                            allowsNil = true,
                            type = "String",
                            name = "root",
                        },
                    },
                    [ 6 ] = {
                        "path",
                        "root",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
    },
    Window = {
        fileEnvironment = 201,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {
                isEnabled = "false\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    width = {
                        "(_C_self_passed,width)\
\9\9super( math.max( math.min( width, self.maxWidth ), self.minWidth ) )\
\9end",
                        75,
                    },
                    height = {
                        "(_C_self_passed,height)\
\9\9super( math.max( math.min( height, self.maxHeight ), self.minHeight ) )\
\9end",
                        71,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9super( isEnabled )\
\9\9self:updateThemeStyle()\
\9end",
                        96,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self.closeButton = self:insert( CloseWindowButton( { x = 2, y = 1, window = self } ))\
\9\9self.maximiseButton = self:insert( MaximiseWindowButton( { x = 11, y = 1, window = self } ))\
\
\9\9self:loadInterface()\
\9\9\
\9\9self:event( DownMouseEvent, self.onMouseDownBefore, Event.phases.BEFORE )\
\9\9self:event( DownMouseEvent, self.onMouseDownAfter, Event.phases.AFTER )\
\9\9self.eventManager:connectGlobal( DragMouseEvent, self.onGlobalMouseDrag )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9\9self:event( LoadedInterfaceEvent, self.onInterfaceLoaded )\
\9end",
                    },
                    26,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                focus = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if not self.isEnabled then\
\9\9\9self.application:unfocusAll( Window )\
\9\9\9self.isEnabled = true\
\9\9\9self.parent:sendToFront( self )\
\9\9\9for i, sibling in ipairs( self:siblingsOfType( Window ) ) do\
\9\9\9\9sibling:unfocus()\
\9\9\9end\
\9\9end\
\9end",
                    },
                    118,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if (self.isDragging or self.isResizingX or self.isResizingY ) and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.dragX = false\
\9\9\9self.dragY = false\
\9\9\9self.isDragging = false\
\9\9\9self.isResizingX = false\
\9\9\9self.isResizingY = false\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    199,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onMouseDownAfter = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9x = event.x\
\9\9\9y = event.y\
\9\9\9local width = self.width\
\9\9\9local height = self.height\
\9\9\9local isResizingX = x >= width - 2 * RESIZE_MARGIN_X\
\9\9\9local isResizingY = y >= height - 2 * RESIZE_MARGIN_Y\
\9\9\9log(isResizingX)\
\9\9\9self.isResizingX = isResizingX\
\9\9\9self.isResizingY = isResizingY\
\9\9\9self.isDragging = not ( isResizingX or isResizingY )\
\9\9\9self.dragX = isResizingX and width - x or x\
\9\9\9self.dragY = isResizingY and height - y or y\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    150,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                unfocus = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.isEnabled = false\
\9end",
                    },
                    132,
                    {},
                    [ 6 ] = {},
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas = self.width - RESIZE_MARGIN_X, self.height - RESIZE_MARGIN_Y, self.theme, self.canvas\
\
\9\9local barHeight = 10\
\9\9local topCornerRadius, bottomCornerRadius = theme:value( \"topCornerRadius\" ), theme:value( \"bottomCornerRadius\" )\
\9\9local barRoundedRectangle = RoundedRectangleMask( 1, 1, width, barHeight, topCornerRadius, topCornerRadius, 0, 0 )\
\9\9canvas:fill( theme:value( \"barFillColour\" ), barRoundedRectangle )\
\9\9canvas:outline( theme:value( \"separatorColour\" ), barRoundedRectangle, 0, 0, 0, theme:value( \"separatorThickness\" ) )\
\
\9\9local contentMask = RoundedRectangleMask( 1, 1 + barHeight, width, height - barHeight, 0, 0, bottomCornerRadius, bottomCornerRadius )\
\9\9canvas:fill(  theme:value( \"fillColour\" ), contentMask )\
\9\9local combinedMask = contentMask:add( barRoundedRectangle )\
\9\9canvas:outline(\9 theme:value( \"outlineColour\" ), combinedMask, theme:value( \"outlineThickness\" ) )\
\
\9\9self.shadowSize = theme:value( \"shadowSize\" )\
\9\9",
                        {
                            " combinedMask\
",
                        },
                        "\9end",
                    },
                    40,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseDrag = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9local preventPropagation = false\
\9\9\9if self.isDragging then\
\9\9\9\9self.x = event.x - self.dragX + 1\
\9\9\9\9self.y = event.y - self.dragY + 1\
\9\9\9\9preventPropagation = true\
\9\9\9else\
\9\9\9\9if self.isResizingX then\
\9\9\9\9\9self.width = event.x - self.x + self.dragX + 1\
\9\9\9\9\9preventPropagation = true\
\9\9\9\9end\
\9\9\9\9if self.isResizingY then\
\9\9\9\9\9self.height = event.y - self.y + self.dragY + 1\
\9\9\9\9\9preventPropagation = true\
\9\9\9\9end\
\9\9\9end\
\9\9\9",
                        {
                            " preventPropagation\
",
                        },
                        "\9\9end\
\9end",
                    },
                    173,
                    {
                        {
                            allowsNil = false,
                            type = "DragMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                loadInterface = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local interfaceName = self.interfaceName\
\9\9if interfaceName then\
\9\9\9local interface = Interface( interfaceName, WindowContainer )\
\9\9\9local container = interface.container\
\9\9\9self.container = self:insert( container )\
\9\9\9interface:ready()\
\9\9end\
\9end",
                    },
                    61,
                    {},
                    [ 6 ] = {},
                },
                onInterfaceLoaded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local currentContainer = self.container\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9if childView:typeOf( WindowContainer ) then\
\9\9\9\9if childView ~= currentContainer then\
\9\9\9\9\9self.container = childView\
\9\9\9\9end\
\9\9\9\9",
                        {
                            "\
",
                        },
                        "\9\9\9end\
\9\9end\
\9\9self.container = self:insert( WindowContainer( { x = x, y = y, width = width, height = height } ) )\
\9end",
                    },
                    79,
                    {
                        {
                            allowsNil = false,
                            type = "LoadedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                close = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.isVisible = false\
\9\9self.parent:remove( self )\
\9end",
                    },
                    213,
                    {},
                    [ 6 ] = {},
                },
                centre = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9self.x = math.ceil( ( parent.width - self.width + RESIZE_MARGIN_X ) / 2 )\
\9\9\9self.y = math.ceil( ( parent.height - self.height + RESIZE_MARGIN_Y ) / 2 )\
\9\9end\
\9end",
                    },
                    104,
                    {},
                    [ 6 ] = {},
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and \"default\" or \"disabled\"\
\9end",
                    },
                    92,
                    {},
                    [ 6 ] = {},
                },
                onMouseDownBefore = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self:focus()\
\9end",
                    },
                    141,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isResizingY = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\9\
",
                },
                minWidth = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "60\
\9\
",
                },
                isResizingX = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                minHeight = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "40\
\9\
",
                },
                maxHeight = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "math.huge\
\
\9\
\
\
\
\
\9\
",
                },
                closeButton = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                maxWidth = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "math.huge\
\9\
",
                },
                dragY = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                maximiseButton = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                dragX = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                container = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                isDragging = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "Window",
        fileName = "/src/classes/Views/Containers/Window/Window.luo",
    },
    Metadata = {
        fileEnvironment = 111,
        implements = {},
        lineNumber = 98,
        enums = {
            mimes = {
                type = "String",
                startLine = 108,
                values = "EXTENSION_MIMES\
\9\
",
            },
            specialMimes = {
                type = "String",
                startLine = 109,
                values = "SPECIAL_MIMES\
\
\9\
",
            },
        },
        fileName = "/src/classes/File System/Metadata.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    openedTimestamp = {
                        "(_C_self_passed,openedTimestamp)\
\9\9self.openedTimestamp = openedTimestamp\
\9\9self:save()\
\9end",
                        269,
                    },
                    createdTimestamp = {
                        "(_C_self_passed,createdTimestamp)\
\9\9self.createdTimestamp = createdTimestamp\
\9\9self:save()\
\9end",
                        264,
                    },
                    modifiedTimestamp = {
                        "(_C_self_passed,modifiedTimestamp)\
\9\9self.modifiedTimestamp = modifiedTimestamp\
\9\9self:save()\
\9end",
                        274,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,file)",
                    {
                        "\
\9\9self.file = file\
\9\9self.metadataPath = file.metadataPath\
\9\9self:load()\
\9end",
                    },
                    111,
                    {
                        {
                            allowsNil = false,
                            type = "FileSystemItem",
                            name = "file",
                        },
                    },
                    [ 6 ] = {
                        "file",
                    },
                },
                rename = {
                    "(_C_self_passed,fullName)",
                    {
                        "\
\9\9local newMetadataPath = self.file.parentPath .. \"/.metadata/\" .. fullName\
\9\9fs.move( self.metadataPath, newMetadataPath )\
\9\9self.metadataPath = newMetadataPath\
\9\9self:updateModifiedTimestamp()\
\9end",
                    },
                    245,
                    {
                        {
                            allowsNil = true,
                            name = "fullName",
                        },
                    },
                    [ 6 ] = {
                        "fullName",
                    },
                },
                updateModifiedTimestamp = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.modifiedTimestamp = os.time()\
\9end",
                    },
                    260,
                    {},
                    [ 6 ] = {},
                },
                save = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local h = fs.open( self.metadataPath, \"w\" )\
\9\9if h then\
\9\9\9local properties = {}\
\9\9\9for shortKey, key in pairs( SAVED_PROPERTIES ) do\
\9\9\9\9local value = self[key]\
\9\9\9\9if value then\
\9\9\9\9\9properties[shortKey] = value\
\9\9\9\9end\
\9\9\9end\
\9\9\9h.write( serialise( properties, {} ) )\
\9\9\9h.close()\
\9\9end\
\9end",
                    },
                    149,
                    {},
                    [ 6 ] = {},
                },
                updateCreatedTimestamp = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.createdTimestamp = os.time()\
\9end",
                    },
                    252,
                    {},
                    [ 6 ] = {},
                },
                delete = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9fs.delete( self.metadataPath )\
\9\9local oldParentMetadataPath = self.file.parentPath .. \"/.metadata\"\
\9\9if #fs.list( oldParentMetadataPath ) == 0 then\
\9\9\9fs.delete( oldParentMetadataPath )\
\9\9end\
\9end",
                    },
                    214,
                    {},
                    [ 6 ] = {},
                },
                load = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local metadataPath = self.metadataPath\
\9\9if fs.exists( metadataPath ) then\
\9\9\9local h = fs.open( metadataPath, \"r\" )\
\9\9\9if h then\
\9\9\9\9local properties = textutils.unserialize( h.readAll() )\
\9\9\9\9h.close()\
\9\9\9\9local raw = self.raw\
\9\9\9\9for key, value in pairs( properties ) do\
\9\9\9\9\9local propertyName = SAVED_PROPERTIES[key]\
\9\9\9\9\9if SAVED_PROPERTIES[key] then\
\9\9\9\9\9\9raw[propertyName] = value\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9if not self.mime then\
\9\9\9\9\9self:guessMIME()\
\9\9\9\9\9self:save()\
\9\9\9\9end\
\9\9\9end\
\9\9else\
\9\9\9local metadataFolderPath = self.file.parentPath .. \"/.metadata\"\
\9\9\9if fs.exists( metadataFolderPath ) then\
\9\9\9\9if not fs.isDir( metadataFolderPath ) then\
\9\9\9\9\9fs.delete( metadataFolderPath )\
\9\9\9\9end\
\9\9\9else\
\9\9\9\9fs.makeDir( metadataFolderPath )\
\9\9\9end\
\9\9\9self:create()\
\9\9end\
\9end",
                    },
                    117,
                    {},
                    [ 6 ] = {},
                },
                updateOpenedTimestamp = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.openedTimestamp = os.time()\
\9end",
                    },
                    256,
                    {},
                    [ 6 ] = {},
                },
                serialise = {
                    "(_C_self_passed,allowedProperties)",
                    {
                        "\
\9\9local properties = {}\
\9\9for shortKey, key in pairs( SAVED_PROPERTIES ) do\
\9\9\9local value = self[key]\
\9\9\9if value and ( not allowedProperties or allowedProperties[key] ) then\
\9\9\9\9properties[shortKey] = value\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " properties\
",
                        },
                        "\9end",
                    },
                    164,
                    {
                        {
                            allowsNil = true,
                            name = "allowedProperties",
                        },
                    },
                    [ 6 ] = {
                        "allowedProperties",
                    },
                },
                create = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self:updateCreatedTimestamp()\
\9\9self:updateOpenedTimestamp()\
\9\9self:updateModifiedTimestamp()\
\9\9self:guessMIME()\
\9\9self:save()\
\9end",
                    },
                    179,
                    {},
                    [ 6 ] = {},
                },
                copyTo = {
                    "(_C_self_passed,folder,newFile)",
                    {
                        "\
\9\9local copyMetadataPath = folder.path .. \"/.metadata/\" .. self.file.fullName\
\9\9fs.copy( self.metadataPath, copyMetadataPath )\
\9\9newFile.metadata:updateModifiedTimestamp()\
\9end",
                    },
                    239,
                    {
                        {
                            allowsNil = true,
                            name = "folder",
                        },
                        {
                            allowsNil = true,
                            name = "newFile",
                        },
                    },
                    [ 6 ] = {
                        "folder",
                        "newFile",
                    },
                },
                moveTo = {
                    "(_C_self_passed,folder)",
                    {
                        "\
\9\9local folderMetadataFolderPath = folder.path .. \"/.metadata\"\
\9\9if not fs.exists( folderMetadataFolderPath ) then\
\9\9\9fs.makeDir( folderMetadataFolderPath )\
\9\9elseif fs.isDir( folderMetadataFolderPath ) then\
\9\9\9fs.delete( folderMetadataFolderPath )\
\9\9\9fs.makeDir( folderMetadataFolderPath )\
\9\9end\
\9\9local newMetadataPath = folderMetadataFolderPath .. \"/\" .. self.file.fullName\
\9\9fs.move( self.metadataPath, newMetadataPath )\
\9\9self.metadataPath = newMetadataPath\
\9\9local oldParentMetadataPath = self.file.parentPath .. \"/.metadata\"\
\9\9if #fs.list( oldParentMetadataPath ) == 0 then\
\9\9\9fs.delete( oldParentMetadataPath )\
\9\9end\
\9end",
                    },
                    222,
                    {
                        {
                            allowsNil = true,
                            name = "folder",
                        },
                    },
                    [ 6 ] = {
                        "folder",
                    },
                },
                guessMIME = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local file = self.file\
\9\9local path = file.path\
\9\9local extension = file.extension\
\9\9if extension then\
\9\9\9-- try to guess the MIME based on the extension\
\9\9\9local mime = EXTENSION_MIMES[ extension:upper() ]\
\9\9\9if mime then\
\9\9\9\9self.mime = mime\
\9\9\9\9",
                        {
                            "\
",
                        },
                        "\9\9\9end\
\9\9end\
\9\9if fs.isDir( path ) then\
\9\9\9if fs.exists( path .. \"/bundle.sconfig\" ) then\
\9\9\9\9self.mime = EXTENSION_MIMES.SBUNDLE\
\9\9\9else\
\9\9\9\9self.mime = SPECIAL_MIMES.FOLDER\
\9\9\9end\
\9\9\9",
                        {
                            "\
",
                        },
                        "\9\9end\
\9\9self.mime = SPECIAL_MIMES.UNKNOWN\
\9end",
                    },
                    191,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                createdTimestamp = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "DEFAULT_TIMESTAMP\
\9\
",
                },
                modifiedTimestamp = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "DEFAULT_TIMESTAMP\
\
\9\
",
                },
                file = {
                    allowsNil = false,
                    link = false,
                    type = "FileSystemItem",
                    readOnly = false,
                },
                openedTimestamp = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "DEFAULT_TIMESTAMP\
\9\
",
                },
                mime = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                metadataPath = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "Metadata",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    IFlowItem = {
        className = "IFlowItem",
        enums = {},
        isInterface = true,
        instance = {
            functions = {},
            properties = {
                maxWidth = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                minWidth = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                idealWidth = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    HomeContainer = {
        fileEnvironment = 4,
        enums = {},
        lineNumber = 11,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "ISwitchableView",
        },
        extends = "Container",
        instance = {
            defaultValues = {
                isFocusDismissable = "false\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    backgroundImage = {
                        "(_C_self_passed,backgroundImage)\
        self.backgroundImage = backgroundImage\
        self.needsDraw = true\
    end",
                        28,
                    },
                    scale = {
                        "(_C_self_passed,scale)\
        self.scale = scale\
        local canvas = self.canvas\
        canvas.scaleX = scale\
        canvas.scaleY = scale\
        local parent = self.parent\
        if parent then\
            parent.needsDraw = true\
        end\
    end",
                        37,
                    },
                    isFocused = {
                        "(_C_self_passed,isFocused)\
        super( isFocused )\
        if not self.hadFirstFocus then\
            if isFocused then\
                self.hadFirstFocus = true\
            end\
        elseif isFocused then\
            self:flyInFocused()\
        else\
            self:flyOutFocused()\
        end\
    end",
                        48,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
        super( ... )\
        self.backgroundImage = Image.static:fromPath( self.application.settings.backgroundImagePath )\
    end",
                    },
                    19,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                flyOutFocused = {
                    "(_C_self_passed,toRight)",
                    {
                        "\
        self:animate( \"x\", -self.width, ANIMATION_FLY_TIME, nil, ANIMATION_FLY_EASING, ANIMATION_FLY_TIME/2 - 0.1 )\
        self:animate( \"scale\", ANIMATION_SCALE, ANIMATION_SCALE_TIME, nil, ANIMATION_SCALE_EASING, nil, false )\
    end",
                    },
                    68,
                    {
                        {
                            allowsNil = true,
                            name = "toRight",
                        },
                    },
                    [ 6 ] = {
                        "toRight",
                    },
                },
                flyInFocused = {
                    "(_C_self_passed,fromLeft)",
                    {
                        "\
        self.scale = ANIMATION_SCALE\
        self.x = -self.width\
        self:animate( \"x\", 1, ANIMATION_FLY_TIME, nil, ANIMATION_FLY_EASING, ANIMATION_FLY_TIME / 2 - 0.1 )\
        self:animate( \"scale\", 1, ANIMATION_SCALE_TIME, nil, ANIMATION_SCALE_EASING, ANIMATION_FLY_TIME - 0.1, false )\
    end",
                    },
                    61,
                    {
                        {
                            allowsNil = true,
                            name = "fromLeft",
                        },
                    },
                    [ 6 ] = {
                        "fromLeft",
                    },
                },
                initialiseCanvas = {
                    "(_C_self_passed)",
                    {
                        "\
        self.canvas = ScaleableCanvas( self.width, self.height, self )\
    end",
                    },
                    24,
                    {},
                    [ 6 ] = {},
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
        self.canvas:image( self.backgroundImage, 1, 1, self.width, self.height ) -- TODO: image fitting options (e.g. centre, squish etc.)\
    end",
                    },
                    33,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                isOpening = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
                scale = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                hadFirstFocus = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
    \
",
                },
                backgroundImage = {
                    allowsNil = false,
                    link = false,
                    type = "Image",
                    readOnly = false,
                },
            },
        },
        className = "HomeContainer",
        fileName = "/System/classes/Home/HomeContainer.luo",
    },
    FileAssociationManager = {
        fileEnvironment = 104,
        implements = {},
        lineNumber = 9,
        enums = {},
        fileName = "/src/classes/File Associations/FileAssociationManager.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "FileAssociationManager",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                getAssociation = {
                    "(_C_self_passed,mime,id)",
                    {
                        "\
\9\9if mime then\
\9\9\9local associations = self.associations\
\9\9\9local mimeAssociations = associations[mime]\
\9\9\9if mimeAssociations then\
\9\9\9\9if not id then\
\9\9\9\9\9",
                        {
                            " mimeAssociations[1]\
",
                        },
                        "\9\9\9\9else\
\9\9\9\9\9for i, association in ipairs( mimeAssociations ) do\
\9\9\9\9\9\9if association.id == id then\
\9\9\9\9\9\9\9",
                        {
                            " association\
",
                        },
                        "\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9\9",
                        {
                            " mimeAssociations[1]\
",
                        },
                        "\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9if not unknownFileAssociation then\
\9\9\9unknownFileAssociation = UnknownFileAssociation()\
\9\9end\
\9\9",
                        {
                            " unknownFileAssociation\
",
                        },
                        "\9end",
                    },
                    75,
                    {
                        {
                            allowsNil = true,
                            type = "String",
                            name = "mime",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "id",
                        },
                    },
                    [ 6 ] = {
                        "mime",
                        "id",
                    },
                },
                getAllAssociations = {
                    "(_C_self_passed,mime)",
                    {
                        "\
\9\9",
                        {
                            " self.associations[mime] or {}\
",
                        },
                        "\9end",
                    },
                    102,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "mime",
                        },
                    },
                    [ 6 ] = {
                        "mime",
                    },
                },
                registerAssociation = {
                    "(_C_self_passed,association,index)",
                    {
                        "\
\9\9local associations = self.associations\
\9\9local mime = association.mime\
\9\9local mimeAssociations = associations[mime]\
\9\9if not mimeAssociations then\
\9\9\9mimeAssociations = {}\
\9\9\9associations[mime] = mimeAssociations\
\9\9end\
\
\9\9if index then\
\9\9\9table.insert( mimeAssociations, index, association )\
\9\9else\
\9\9\9table.insert( mimeAssociations, association )\
\9\9end\
\
\9\9-- add these assocation's extensions to the extensionMimes table\
\9\9local extensionMimes = self.extensionMimes\
\9\9for i, extension in ipairs( association.extensions ) do\
\9\9\9if not extensionMimes[extension] then -- we'll only set the mime if there isn't one already there. theortically they should be identical anyway\
\9\9\9\9extensionMimes[extension] = mime\
\9\9\9end\
\9\9end\
\9\9local application = self.application\
\9\9if application then\
\9\9\9local event = application.event\
\9\9\9if event then\
\9\9\9\9event:handleEvent( FileAssociationRegisteredInterfaceEvent( association ) )\
\9\9\9end\
\9\9end\
\9end",
                    },
                    15,
                    {
                        {
                            allowsNil = false,
                            type = "FileAssociation",
                            name = "association",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "index",
                        },
                    },
                    [ 6 ] = {
                        "association",
                        "index",
                    },
                },
                open = {
                    "(_C_self_passed,fileSystemItem,association,id)",
                    {
                        "\
\9\9local path, mime = fileSystemItem.path, fileSystemItem.metadata.mime\
\9\9association = association or self:getAssociation( mime, id )\
\9\9if association then\
\9\9\9if Quartz then\
\9\9\9\9-- if we're running under Quartz we need it to run the program instead\
\9\9\9\9Quartz:open( path, association.id )\
\9\9\9else\
\9\9\9\9local application = self.application\
\9\9\9\9if application:typeOf( QuartzApplication ) then\
\9\9\9\9\9local programBundle = association.programBundle\
\9\9\9\9\9if programBundle then\
\9\9\9\9\9\9local argumentFormat = association.argumentFormat\
\9\9\9\9\9\9local arguments = {}\
\9\9\9\9\9\9for i, argument in ipairs( argumentFormat ) do\
\9\9\9\9\9\9\9table.insert( arguments, argument == true and path or argument )\
\9\9\9\9\9\9end\
\9\9\9\9\9\9self.application.programManager:run( Program.static:fromBundle( programBundle, arguments ) )\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9else\
\9\9\9-- TODO: error dialouge\
\9\9end\
\9end",
                    },
                    46,
                    {
                        {
                            allowsNil = false,
                            type = "FileSystemItem",
                            name = "fileSystemItem",
                        },
                        {
                            allowsNil = true,
                            type = "FileAssociation",
                            name = "association",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "id",
                        },
                    },
                    [ 6 ] = {
                        "fileSystemItem",
                        "association",
                        "id",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                associations = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                extensionMimes = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\
\
\9\
",
                },
            },
        },
    },
    MenuChangedInterfaceEvent = {
        fileEnvironment = 59,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_menu_changed\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\
\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "MenuChangedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/MenuChangedInterfaceEvent.luo",
    },
    KeyboardShortcutManager = {
        fileEnvironment = 162,
        implements = {},
        lineNumber = 33,
        enums = {},
        fileName = "/src/classes/Utilities/KeyboardShortcutManager.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,owner)",
                    {
                        "\
\9\9self.owner = owner\
\9\9self.eventManager = EventManager( self )\
\9\9self.eventManager:connectGlobal( DownKeyEvent, self.onGlobalKeyDown )\
\9\9self.eventManager:connectGlobal( UpKeyEvent, self.onGlobalKeyUp )\
\9end",
                    },
                    40,
                    {
                        {
                            allowsNil = false,
                            type = "InstanceOrStatic",
                            name = "owner",
                        },
                    },
                    [ 6 ] = {
                        "owner",
                    },
                },
                isKeyDown = {
                    "(_C_self_passed,keyString)",
                    {
                        "\
\9\9",
                        {
                            " self.keysDown[keyString] == true\
",
                        },
                        "\9end",
                    },
                    63,
                    {
                        {
                            allowsNil = true,
                            name = "keyString",
                        },
                    },
                    [ 6 ] = {
                        "keyString",
                    },
                },
                onKeyTimeout = {
                    "(_C_self_passed,keyString)",
                    {
                        "\
\9\9if os.clock() - self.keysUpdates[keyString] >= 10 then\
\9\9\9self.keysDown[keyString] = nil\
\9\9\9self.keysUpdates[keyString] = os.clock()\
\9\9end\
\9end",
                    },
                    125,
                    {
                        {
                            allowsNil = true,
                            name = "keyString",
                        },
                    },
                    [ 6 ] = {
                        "keyString",
                    },
                },
                onGlobalKeyUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local keyString = event.keyString\
\9\9self.keysDown[keyString] = nil\
\9\9self.keysUpdates[keyString] = os.clock()\
\9end",
                    },
                    57,
                    {
                        {
                            allowsNil = false,
                            type = "UpKeyEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                sendEvent = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9",
                        {
                            " self.owner.event:handleEvent( KeyboardShortcutEvent( self.keysDown ) )\
",
                        },
                        "\9end",
                    },
                    117,
                    {},
                    [ 6 ] = {},
                },
                isOnlyKeyDown = {
                    "(_C_self_passed,keyString)",
                    {
                        "\
\9\9local keysDown = self.keysDown\
\9\9for k, v in pairs( keysDown ) do\
\9\9\9if k ~= keyString then\
\9\9\9\9if v then\
\9\9\9\9\9",
                        {
                            " false\
",
                        },
                        "\9\9\9\9end\
\9\9\9elseif not v then\
\9\9\9\9",
                        {
                            " false\
",
                        },
                        "\9\9\9end\
\9\9end\
\9\9",
                        {
                            " keysDown[keyString] == true\
",
                        },
                        "\9end",
                    },
                    67,
                    {
                        {
                            allowsNil = true,
                            name = "keyString",
                        },
                    },
                    [ 6 ] = {
                        "keyString",
                    },
                },
                onGlobalKeyDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local keyString = event.keyString\
\9\9if keyString then\
\9\9\9self.keysDown[keyString] = true\
\9\9\9self.keysUpdates[keyString] = os.clock()\
\9\9\9self.owner:schedule( self.onKeyTimeout, 10, self, keyString )\
\9\9\9",
                        {
                            " self:sendEvent()\
",
                        },
                        "\9\9end\
\9end",
                    },
                    47,
                    {
                        {
                            allowsNil = false,
                            type = "DownKeyEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                keysUpdates = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                keysDown = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                eventManager = {
                    allowsNil = false,
                    link = false,
                    type = "EventManager",
                    readOnly = false,
                },
                owner = {
                    allowsNil = false,
                    link = false,
                    type = "InstanceOrStatic",
                    readOnly = false,
                },
            },
        },
        className = "KeyboardShortcutManager",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                convert = {
                    "(_C_self_passed,keyCode)",
                    {
                        "\
\9\9",
                        {
                            " keyStrings[keyCode] or \"unknown\"\
",
                        },
                        "\9end",
                    },
                    95,
                    {
                        {
                            allowsNil = true,
                            name = "keyCode",
                        },
                    },
                    [ 6 ] = {
                        "keyCode",
                    },
                },
                isValid = {
                    "(_C_self_passed,keyString)",
                    {
                        "\
\9\9if not keyString then ",
                        {
                            " false ",
                        },
                        "end\
\9\9for i, _keyString in pairs( keyStrings ) do\
\9\9\9if _keyString == keyString then\
\9\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9\9end\
\9\9end\
\9\9",
                        {
                            " false\
",
                        },
                        "\9end",
                    },
                    104,
                    {
                        {
                            allowsNil = true,
                            name = "keyString",
                        },
                    },
                    [ 6 ] = {
                        "keyString",
                    },
                },
                symbol = {
                    "(_C_self_passed,keyString)",
                    {
                        "\
\9\9",
                        {
                            " ( not keyString and \"\" or keySymbols[keyString] or keyString:upper() )\
",
                        },
                        "\9end",
                    },
                    86,
                    {
                        {
                            allowsNil = true,
                            name = "keyString",
                        },
                    },
                    [ 6 ] = {
                        "keyString",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
    },
    ITreeChild = {
        className = "ITreeChild",
        enums = {},
        isInterface = true,
        instance = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    ClockItem = {
        fileEnvironment = 26,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "TopBarItem",
        instance = {
            defaultValues = {
                pin = "TopBarItem.pins.RIGHT\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {
                    size = {
                        "(_C_self_passed)\
        local theme = self.theme\
        local margin = theme:value( \"leftMargin\" ) + theme:value( \"rightMargin\" ) + 1\
        if self.isAnalogue then\
            return theme:value( \"AnalogueDiameter\" ) + margin\
        end\
\
        local text = self.text\
        local fontWidth = self.theme:value( \"font\" ):getWidth( text )\
        return fontWidth + margin\
    end",
                        149,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    isAnalogue = {
                        "(_C_self_passed,isAnalogue)\
        self.isAnalogue = isAnalogue\
        self:updateClock()\
        local parent = self.parent\
        if parent then\
            parent.needsLayoutUpdate = true\
        end\
        local settings = self.application.settings\
        settings.isClockAnalogue = isAnalogue\
        settings:save()\
    end",
                        79,
                    },
                    text = {
                        "(_C_self_passed,text)\
        if self.text ~= text then\
            self.text = text\
            self.needsDraw = true\
            local parent = self.parent\
            if parent then\
                parent.needsLayoutUpdate = true\
            end\
        end\
    end",
                        137,
                    },
                    isTwentyFourHour = {
                        "(_C_self_passed,isTwentyFourHour)\
        self.isTwentyFourHour = isTwentyFourHour\
        self:updateClock()\
        local parent = self.parent\
        if parent then\
            parent.needsLayoutUpdate = true\
        end\
        local settings = self.application.settings\
        settings.isClockTwentyFourHour = isTwentyFourHour\
        settings:save()\
    end",
                        91,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
        super( ... )\
        self:event( ActionInterfaceEvent, self.onAction )\
        self:event( ReadyInterfaceEvent, self.onReady )\
    end",
                    },
                    9,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateClock = {
                    "(_C_self_passed)",
                    {
                        "\
        local isAnalogue = self.isAnalogue\
        local refreshTime\
        if not isAnalogue then\
            local time = os.time()\
            local seconds = time % 60\
            local minutes = math.floor( ( time / 60 ) % 60 )\
            local hours = math.floor( ( time / 60 / 60 ) % 24 )\
            local ampm\
            if not self.isTwentyFourHour then\
                if hours >= 12 then\
                    ampm = \"pm\"\
                else\
                    ampm = \"am\"\
                end\
                if hours >= 13 then\
                    hours = hours - 12\
                end\
            end\
            if ampm then\
                self.text = string.format( \"%d:%02d%s\", hours, minutes, ampm )\
            else\
                self.text = string.format( \"%02d:%02d\", hours, minutes )\
            end\
            refreshTime = 60 - seconds\
        else\
            self.needsDraw = true\
            refreshTime = 2\
        end\
        if not dontSchedule then\
            self.application:schedule(self.updateClock, refreshTime, self)\
        end\
    end",
                    },
                    103,
                    {},
                    [ 6 ] = {},
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self:updateClock()\
    end",
                    },
                    75,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
        super()\
        local width, height, theme, canvas = self.width, self.height, self.theme, self.canvas\
\
        local leftMargin, rightMargin, topMargin, bottomMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" )\
        if self.isAnalogue then\
            local AnalogueDiameter = theme:value( \"AnalogueDiameter\" )\
            local circleMask = CircleMask( leftMargin + 1, math.floor( ( height - AnalogueDiameter ) / 2 + 0.5 ), AnalogueDiameter )\
            canvas:fill( theme:value( \"AnalogueFillColour\" ), circleMask )\
            canvas:outline( theme:value( \"AnalogueOutlineColour\" ), circleMask, theme:value( \"AnalogueOutlineThickness\" ) )\
\
            local time = os.time()\
            local seconds = time % 60\
            local minutes = math.floor( ( time / 60 ) % 60 )\
            local hours = math.floor( ( time / 60 / 60 ) % 24 )\
            if hours >= 13 then\
                hours = hours - 12\
            end\
\
            local AnalogueRadius = AnalogueDiameter / 2\
            local centreX, centreY = math.floor( 1 + leftMargin + AnalogueRadius ), math.floor( ( height - AnalogueDiameter ) / 2 + 0.5 + AnalogueRadius)\
            local function position( timePercentage, length, object )\
                local angle = 2 * math.pi * timePercentage\
                local rawWidth = length * math.sin( angle )\
                local rawHeight = length * math.cos( angle )\
                local width = math.floor(math.max(math.abs(rawWidth), 1) + 0.5)\
                local height = math.floor(math.max(math.abs(rawHeight), 1) + 0.5)\
                local isFromTopLeft = rawWidth * rawHeight <= 0\
                return rawWidth > 0 and centreX or (1 + math.floor( centreX - width + 0.5 )),\
                       rawHeight < 0 and centreY or (1 + math.floor( centreY - height + 0.5 )),\
                       width,\
                       height,\
                       isFromTopLeft\
            end\
            \
            local secondsMask = LineMask( position( seconds / 60, theme:value( \"secondsLength\" ) ) )\
            local minutesMask = LineMask( position( minutes / 60, theme:value( \"minutesLength\" ) ) )\
            local hoursMask = LineMask( position( hours / 12 + (minutes > 40 and minutes / 60 / 12 or 0), theme:value( \"hoursLength\" ) ) )\
\
            canvas:fill( theme:value( \"hoursColour\" ), hoursMask )\
            canvas:fill( theme:value( \"minutesColour\" ), minutesMask )\
            canvas:fill( theme:value( \"secondsColour\" ), secondsMask )\
        else\
            canvas:fill( theme:value( \"contentColour\" ), TextMask( 1 + leftMargin, 1 + topMargin, width - leftMargin - rightMargin, height - topMargin - bottomMargin, self.text, theme:value( \"font\" ) ) )\
        end\
    end",
                    },
                    15,
                    {},
                    [ 6 ] = {},
                },
                onAction = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        if self.isAnalogue then\
            self.isAnalogue = false\
        else\
            if self.isTwentyFourHour then\
                self.isTwentyFourHour = false\
                self.isAnalogue = true\
            else\
                self.isTwentyFourHour = true\
            end\
        end\
    end",
                    },
                    62,
                    {
                        {
                            allowsNil = false,
                            type = "ActionInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isAnalogue = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "self.application.settings.isClockAnalogue\
\9\
",
                },
                isTwentyFourHour = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "self.application.settings.isClockTwentyFourHour\
\
    \
",
                },
                text = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                    defaultValue = "\"0:00am\"\
\9\
",
                },
            },
        },
        className = "ClockItem",
        fileName = "/System/classes/TopBar/ClockItem.luo",
    },
    RoundedRectangleMask = {
        fileEnvironment = 126,
        enums = {},
        lineNumber = 28,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Mask",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius)",
                    {
                        "\
\9\9local pixels = {}\
\
\9\9corner( pixels, width, height, topLeftRadius, 0 )\
\9\9corner( pixels, width, height, topRightRadius, 2 )\
\9\9corner( pixels, width, height, bottomLeftRadius, 1 )\
\9\9corner( pixels, width, height, bottomRightRadius, 3 )\
\
\9\9local maxTopRadius = math.max( topLeftRadius, topRightRadius )\
\9\9for x = topLeftRadius + 1, width - topRightRadius do\
\9\9\9for y = 1, maxTopRadius do\
\9\9\9\9pixels[(y - 1) * width + x] = true\
\9\9\9end\
\9\9end\
\
\9\9local maxBottomRadius = math.max( bottomLeftRadius, bottomRightRadius )\
\9\9for x = bottomLeftRadius + 1, width - bottomRightRadius do\
\9\9\9for y = height - maxBottomRadius + 1, height do\
\9\9\9\9pixels[(y - 1) * width + x] = true\
\9\9\9end\
\9\9end\
\
\9\9for x = 1, width do\
\9\9\9for y = maxTopRadius + 1, height - maxBottomRadius do\
\9\9\9\9pixels[(y - 1) * width + x] = true\
\9\9\9end\
\9\9end\
\
\9\9super( x, y, width, height, pixels )\
\9end",
                    },
                    33,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "topLeftRadius",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "topRightRadius",
                            defaultValue = "topLeftRadius",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "bottomLeftRadius",
                            defaultValue = "topLeftRadius",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "bottomRightRadius",
                            defaultValue = "topRightRadius ",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "width",
                        "height",
                        "topLeftRadius",
                        "topRightRadius",
                        "bottomLeftRadius",
                        "bottomRightRadius",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "RoundedRectangleMask",
        fileName = "/src/classes/Graphics/RoundedRectangleMask.luo",
    },
    ContainerReadyInterfaceEvent = {
        fileEnvironment = 53,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_ready_container\";\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToSender = "false\
\
\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ContainerReadyInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/ContainerReadyInterfaceEvent.luo",
    },
    ClickableCursor = {
        fileEnvironment = 39,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self.theme.style = \"default\"\
\9end",
                    },
                    14,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onGlobalMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self.theme.style = \"down\"\
\9end",
                    },
                    10,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                setup = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self.eventManager:connectGlobal( DownMouseEvent, self.onGlobalMouseDown, Event.phases.BEFORE )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9end",
                    },
                    4,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Cursor",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ClickableCursor",
        fileName = "/src/classes/Cursors/ClickableCursor.luo",
    },
    VectorFont = {
        fileEnvironment = 116,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Font",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "VectorFont",
        fileName = "/src/classes/Font/VectorFont.luo",
    },
    TreeContainer = {
        fileEnvironment = 198,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IAutomaticLayout",
        },
        extends = "ListContainer",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                updateLayout = {
                    "(_C_self_passed,dontAnimate)",
                    {
                        "\
\9\9local children, width = self.children, self.width\
\9\9local theme = self.theme\
\9\9local y = theme:value( \"topMargin\" ) + 1\
\
\9\9local time, easing\
\9\9if not dontAnimate then\
\9\9\9time = theme:value( \"animationDuration\" )\
\9\9\9easing = theme:value( \"animationEasing\" )\
\9\9end\
\9\9for i, childView in ipairs( children ) do\
\9\9\9if dontAnimate then\
\9\9\9\9childView.y = y\
\9\9\9else\
\9\9\9\9childView:animate( \"y\", y, time, nil, easing )\
\9\9\9end\
\9\9\9childView.x = 1\
\9\9\9childView.width = width\
\9\9\9y = y + ( childView:typeOf( TreeNode ) and ( ( childView.isFolded and childView.minHeight or childView.maxHeight) or 0 ) or childView.height )\
\9\9end\
\
\9\9local height = y + self.theme:value( \"bottomMargin\" )\
\9\9if dontAnimate then\
\9\9\9self.height = height\
\9\9else\
\9\9\9self:animate( \"height\", height, time, nil, easing )\
\9\9end\
\
\9\9self.needsLayoutUpdate = false\
\9end",
                    },
                    11,
                    {
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "dontAnimate",
                            defaultValue = "false ",
                        },
                    },
                    [ 6 ] = {
                        "dontAnimate",
                    },
                },
                onChildAdded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if not event.childView:typeOf( ITreeChild ) then\
\9\9\9error( \"Attempted to add view '\" .. tostring( event.childView ) .. \"' that does not extend ITreeChild to '\" .. tostring( self ) .. \"'\", 0 )\
\9\9end\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "ChildAddedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "TreeContainer",
        fileName = "/src/classes/Views/Containers/Tree/TreeContainer.luo",
    },
    TreeClipboardData = {
        fileEnvironment = 197,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClipboardData",
        instance = {
            defaultValues = {
                type = "\"Silica:TreeItem\"\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,treeItem)",
                    {
                        "\
\9\9super()\
\9\9self.treeItem = treeItem\
\9end",
                    },
                    7,
                    {
                        {
                            allowsNil = false,
                            type = "TreeItem",
                            name = "treeItem",
                        },
                    },
                    [ 6 ] = {
                        "treeItem",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                treeItem = {
                    allowsNil = false,
                    link = false,
                    type = "TreeItem",
                    readOnly = false,
                },
            },
        },
        className = "TreeClipboardData",
        fileName = "/src/classes/Views/Containers/Tree/TreeClipboardData.luo",
    },
    ArgumentTypeClassException = {
        fileEnvironment = 84,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClassException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Incorrect value/ValueType of argument(s): \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "ArgumentTypeClassException",
        fileName = "/src/classes/Exceptions/Class System/ArgumentTypeClassException.luo",
    },
    TreeFoldedSymbol = {
        fileEnvironment = 156,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                width = "3\
\9\
",
                symbolName = "\"treeFolded\"\
\9\
",
                height = "5\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 1, 1 )\
\9\9path:lineTo( 3, 3 )\
\9\9path:lineTo( 1, 5 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    7,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "TreeFoldedSymbol",
        fileName = "/src/classes/Symbols/TreeFoldedSymbol.luo",
    },
    ToolbarContainer = {
        fileEnvironment = 189,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {
                leftPin = "\"1\"\
\9\
",
                rightPin = "\"100%\"\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self:event( ChildAddedInterfaceEvent, self.onChildAdded )\
\9\9self:event( ChildRemovedInterfaceEvent, self.onChildRemoved )\
\9end",
                    },
                    8,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateLayout = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local children, width, theme = self.children, self.width, self.theme\
\9\9local leftMargin, rightMargin, topMargin, bottomMargin, itemMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" ), theme:value( \"itemMargin\" )\
\9\9local remainingWidth = width - leftMargin - rightMargin\
\9\9local x = 1 + leftMargin\
\9\9local dynamicItems = 0\
\9\9local items = {}\
\
\9\9local contentHeight = 0\
\
\9\9for i, childView in ipairs( children ) do\
\9\9\9local isPressable = childView:typeOf( IToolbarPressableItem )\
\9\9\9childView.y = 1 + topMargin\
\9\9\9contentHeight = math.max( childView.height - (isPressable and 1 or 0), contentHeight )\
\
\9\9\9if childView:typeOf( ToolbarStaticSpace ) then\
\9\9\9\9local childWidth = childView.width\
\9\9\9\9remainingWidth = remainingWidth - childWidth + itemMargin\
\9\9\9\9items[i] = { nil, childWidth }\
\9\9\9elseif childView:typeOf( IToolbarDynamicItem ) then\
\9\9\9\9dynamicItems = dynamicItems + 1\
\9\9\9\9items[i] = { childView, nil, isPressable }\
\9\9\9\9remainingWidth = remainingWidth - itemMargin\
\9\9\9else\
\9\9\9\9local childWidth = childView.width\
\9\9\9\9remainingWidth = remainingWidth - childWidth - itemMargin + 1\
\9\9\9\9items[i] = { childView, childWidth, isPressable }\
\9\9\9end\
\9\9end\
\
\9\9local dynamicWidth = (remainingWidth + itemMargin) / dynamicItems\
\9\9local passedFirstDynamic = false\
\9\9for i, item in ipairs( items ) do\
\9\9\9local childView, childWidth, isPressable = item[1], item[2], item[3]\
\9\9\9if not childWidth then\
\9\9\9\9if passedFirstDynamic then\
\9\9\9\9\9childWidth = math.floor( dynamicWidth )\
\9\9\9\9else\
\9\9\9\9\9childWidth = math.ceil( dynamicWidth )\
\9\9\9\9\9passedFirstDynamic = true\
\9\9\9\9end\
\9\9\9end\
\9\9\9if childView then\
\9\9\9\9childView.x = x\
\9\9\9\9childView.width = childWidth\
\9\9\9end\
\9\9\9x = x + childWidth - (isPressable and 1 or 0) + ((not childView or (i < #items and not items[i + 1][1]) ) and 0 or itemMargin)\
\9\9end\
\
\9\9self.height = contentHeight + topMargin + bottomMargin + 1 -- + 1 for separator\
\
\9\9self.needsLayoutUpdate = false\
\9end",
                    },
                    43,
                    {},
                    [ 6 ] = {},
                },
                onChildRemoved = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if event.container == self then\
\9\9\9self.needsLayoutUpdate = true\
\9\9end\
\9end",
                    },
                    37,
                    {
                        {
                            allowsNil = false,
                            type = "ChildRemovedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onChildAdded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if event.container == self then\
\9\9\9if not event.childView:typeOf( IToolbarItem ) then\
\9\9\9\9error( \"Attempted to add view '\" .. tostring( event.childView ) .. \"' that does not implement IToolbarItem to '\" .. tostring( self ) .. \"'\", 0 )\
\9\9\9end\
\9\9\9self.needsLayoutUpdate = true\
\9\9end\
\9end",
                    },
                    28,
                    {
                        {
                            allowsNil = false,
                            type = "ChildAddedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas, font = self.width, self.height, self.theme, self.canvas\
\9\9canvas:fill( theme:value( \"fillColour\" ) )\
\9\9canvas:fill( theme:value( \"separatorColour\" ), theme:value( \"separatorIsDashed\" ) and SeparatorMask( 1, height, width, 1 ) or RectangleMask( 1, height, width, 1 ) )\
\9end",
                    },
                    15,
                    {},
                    [ 6 ] = {},
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9if self.needsLayoutUpdate then\
\9\9\9self:updateLayout()\
\9\9end\
\9end",
                    },
                    21,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                needsLayoutUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "ToolbarContainer",
        fileName = "/src/classes/Views/Containers/Toolbar/ToolbarContainer.luo",
    },
    HomeItemContainer = {
        fileEnvironment = 6,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
        super( ... )\
\
        self:event( ReadyInterfaceEvent, self.onReady )\
        self:event( ThemeChangedInterfaceEvent, self.onThemeChanged )\
        self:event( ChildAddedInterfaceEvent, self.onChildAdded )\
        self:event( ChildRemovedInterfaceEvent, self.onChildRemoved )\
    end",
                    },
                    6,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.y = 1 + self.theme:value( \"parentTopMargin\" )\
        self:updateLayout( true )\
        local delay = 0.5\
        for i, childView in ipairs( self.children ) do\
            local y = childView.y\
            childView.y = self.height + 1\
            childView:animate( \"y\", y, 0.8, nil, Animation.easings.OUT_QUART, delay )\
            delay = delay + 0.3\
        end\
    end",
                    },
                    15,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onThemeChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.y = 1 + self.theme:value( \"parentTopMargin\" )\
        self.needsLayoutUpdate = true\
    end",
                    },
                    27,
                    {
                        {
                            allowsNil = false,
                            type = "ThemeChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onChildRemoved = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.needsLayoutUpdate = true\
    end",
                    },
                    67,
                    {
                        {
                            allowsNil = false,
                            type = "ChildRemovedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onChildAdded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.needsLayoutUpdate = true\
    end",
                    },
                    63,
                    {
                        {
                            allowsNil = false,
                            type = "ChildAddedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
        super( deltaTime )\
        if self.needsLayoutUpdate then\
            self:updateLayout()\
        end\
    end",
                    },
                    56,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                updateLayout = {
                    "(_C_self_passed,dontAnimate)",
                    {
                        "\
        local children, width, theme = self.children, self.width, self.theme\
        local tileMargin = theme:value( \"tileMargin\" )\
        local y = theme:value( \"tileMargin\" )\
\
        local time, easing = 0.5, Animation.easings.SINE_IN_OUT\
\
        for i, childView in ipairs( children ) do\
            if childView:typeOf( IHomeItem ) then\
                if dontAnimate then\
                    childView.y = y\
                else\
                    childView:animate( \"y\", y, time, nil, easing )\
                end\
                childView.x = math.ceil( ( width - childView.width ) / 2 ) + 2\
                y = y + childView.height + tileMargin\
            end\
        end\
\
        self.height = math.max( y + theme:value( \"bottomMargin\" ) - tileMargin, self.parent.height - self.theme:value( \"parentTopMargin\" ) )\
\
        self.needsLayoutUpdate = false\
    end",
                    },
                    32,
                    {
                        {
                            allowsNil = true,
                            name = "dontAnimate",
                        },
                    },
                    [ 6 ] = {
                        "dontAnimate",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                needsLayoutUpdate = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
        },
        className = "HomeItemContainer",
        fileName = "/System/classes/Home/HomeItemContainer.luo",
    },
    Exception = {
        fileEnvironment = 94,
        implements = {},
        lineNumber = 33,
        enums = {},
        fileName = "/src/classes/Exceptions/Exception.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9self.message = message\
\9\9level = level == 0 and level or level + 1\
\9\9self.level = level\
\9\9self.id = nextID\
\9\9nextID = nextID + 1\
\
\9\9local traceback = self.traceback\
\9\9for i = 1, 15 do\
\9\9\9local src = select( 2, pcall( error, \"\", i + level ) )\
\9\9\9if src == \"pcall: \" then\
\9\9\9\9break\
\9\9\9else\
\9\9\9\9traceback[i] = src:gsub( \":%s$\", \"\", 1 )\
\9\9\9end\
\9\9end\
\
\9\9-- throw the exception\
\9\9-- TODO: check that these won't leak out of OS programs (maybe .. self.application and compare the application id)\
\9\9local id = self.id\
\9\9thrownExceptions[id] = self\
\9\9\9\9\9\9\9\9\9\9\9   -- TODO: \\/ this is just temporary\
\9\9error( \"SilicaException: \" .. self.id .. \": \"..self.message .. textutils.serialize(traceback), 0 )\
\9end",
                    },
                    41,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "level",
                            defaultValue = "1 ",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                level = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\9\
",
                },
                traceback = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\
\
\9\
",
                },
                message = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                id = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
            },
        },
        className = "Exception",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    LoadedInterfaceEvent = {
        fileEnvironment = 58,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_loaded\";\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\
\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "LoadedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/LoadedInterfaceEvent.luo",
    },
    ToolbarSymbolSegmentButton = {
        fileEnvironment = 195,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "SymbolSegmentButton",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ToolbarSymbolSegmentButton",
        fileName = "/src/classes/Views/Containers/Toolbar/ToolbarSymbolSegmentButton.luo",
    },
    Menu = {
        fileEnvironment = 178,
        enums = {},
        lineNumber = 5,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {
                width = "40\
\9\
",
                height = "40\
\
\9\
",
                isEnabled = "true\
\9\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {
                    isOpen = {
                        "(_C_self_passed)\
\9\9return self.isVisible\
\9end",
                        147,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    isOpen = {
                        "(_C_self_passed,isOpen)\
\9\9if isOpen then\
\9\9\9self:open()\
\9\9else\
\9\9\9self:close()\
\9\9end\
\9end",
                        136,
                    },
                    width = {
                        "(_C_self_passed,width)\
\9\9super( width + (1 - width % 2) )-- it must be an odd number (for the separators)\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9childView.width = width\
\9\9end\
\9end",
                        90,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self.eventManager:connectGlobal( DownMouseEvent, self.onGlobalMouseDown, Event.phases.BEFORE )\
\9end",
                    },
                    35,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                toggle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.isOpen = not self.isOpen\
\9end",
                    },
                    154,
                    {},
                    [ 6 ] = {},
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas = self.width, self.height, self.theme, self.canvas\
\
\9\9-- background shape\
\9\9local roundedRectangle = RoundedRectangleMask( 1, 1, width, height, theme:value( \"cornerRadius\" ) )\
\9\9canvas:fill( theme:value( \"fillColour\" ), roundedRectangle )\
\9\9canvas:outline( theme:value( \"outlineColour\" ), roundedRectangle, theme:value( \"outlineThickness\" ) )\
\
\9\9self.shadowSize = theme:value( \"shadowSize\" )\
\9end",
                    },
                    41,
                    {},
                    [ 6 ] = {},
                },
                removeChild = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    108,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                close = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.isVisible = false\
\9\9local owner = self.owner\
\9\9if owner then\
\9\9\9owner.event:handleEvent( MenuChangedInterfaceEvent( self ) )\
\9\9end\
\9\9if self.isSingleShot then\
\9\9\9self:dispose()\
\9\9end\
\9end",
                    },
                    172,
                    {},
                    [ 6 ] = {},
                },
                open = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.isVisible = true\
\9\9local owner = self.owner\
\9\9if owner then\
\9\9\9owner.event:handleEvent( MenuChangedInterfaceEvent( self ) )\
\9\9end\
\9end",
                    },
                    161,
                    {},
                    [ 6 ] = {},
                },
                showContext = {
                    "(_C_self_passed,owner,x,y)",
                    {
                        "\
\9\9self.owner = owner\
\9\9self.isSingleShot = true\
\9\9self.x = x + owner.x - 1 - MENU_CONTEXT_OFFSET\
\9\9self.y = y + owner.y - 1 - MENU_CONTEXT_OFFSET\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9parent:removeChild( self )\
\9\9end\
\9\9owner.parent:insert( self )\
\9\9self.isVisible = true\
\9end",
                    },
                    58,
                    {
                        {
                            allowsNil = false,
                            type = "View",
                            name = "owner",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "owner",
                        "x",
                        "y",
                    },
                },
                updateLayout = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local owner = self.owner\
\9\9local ownerTheme = owner and owner.theme\
\9\9local width = owner and ( owner.width - 2 * ( ownerTheme:value( \"menuOffsetX\" ) or 0 ) ) or 1\
\9\9local height = self.theme:value( \"topMargin\" ) + ( ownerTheme and ownerTheme:value( \"menuTopPadding\" ) or 0 )\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9width = math.max( width, childView.width )\
\9\9\9childView.x = 1\
\9\9\9childView.y = height + 1\
\9\9\9height = height + childView.height\
\9\9end\
\9\9self.width = width\
\9\9self.height = height + self.theme:value( \"bottomMargin\" )\
\9\9self.needsLayoutUpdate = false\
\9end",
                    },
                    74,
                    {},
                    [ 6 ] = {},
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9if self.needsLayoutUpdate then\
\9\9\9self:updateLayout()\
\9\9end\
\9end",
                    },
                    97,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                onGlobalMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isVisible then\
\9\9\9local owner = self.owner\
\9\9\9if self.hitTestOwner and owner and owner:hitTestEvent( event ) then\
\9\9\9\9owner.event:handleEvent( event )\
\9\9\9\9",
                        {
                            " true\
\9\9\9elseif self:hitTestEvent( event ) then\
\9\9\9\9self.eventManager:handleEvent( event )\
\9\9\9\9return true\
",
                        },
                        "\9\9\9else\
\9\9\9\9self:close()\
\9\9\9end\
\9\9end\
\9end",
                    },
                    117,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                insert = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    103,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                targetX = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1 \
\9\
",
                },
                isSingleShot = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false \
\9\
",
                },
                owner = {
                    allowsNil = true,
                    link = false,
                    type = "View",
                    readOnly = false,
                },
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                backgroundObject = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                targetY = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\
\9\
",
                },
                isOpen = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
                shadowObject = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                hitTestOwner = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                needsLayoutUpdate = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
        },
        className = "Menu",
        fileName = "/src/classes/Views/Containers/Menu.luo",
    },
    ToolbarStaticSpace = {
        fileEnvironment = 193,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IToolbarItem",
        },
        extends = "View",
        instance = {
            defaultValues = {
                width = "12\
\
\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ToolbarStaticSpace",
        fileName = "/src/classes/Views/Containers/Toolbar/ToolbarStaticSpace.luo",
    },
    ProgramManager = {
        fileEnvironment = 16,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/System/classes/Program Managing/ProgramManager.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,owner)",
                    {
                        "\
        self.owner = owner\
    end",
                    },
                    7,
                    {
                        {
                            allowsNil = true,
                            name = "owner",
                        },
                    },
                    [ 6 ] = {
                        "owner",
                    },
                },
                run = {
                    "(_C_self_passed,program)",
                    {
                        "\
        program.programManager = self\
        local programView = ProgramView( { x = 1, y = 15, width = \"320\", height = 200-14, program = program } )\
        program.programView = programView\
        local programs = self.programs\
        table.insert( programs, program )\
        program.index = #programs\
        program:run()\
        self.owner.container:insert( programView )\
        self.application.event:handleEvent( ProgramOpenedInterfaceEvent( program ) )\
    end",
                    },
                    11,
                    {
                        {
                            allowsNil = true,
                            name = "program",
                        },
                    },
                    [ 6 ] = {
                        "program",
                    },
                },
                update = {
                    "(_C_self_passed)",
                    {
                        "\
        local programs = self.programs\
        for i, program in ipairs( programs ) do\
            program:update()\
        end\
    end",
                    },
                    55,
                    {},
                    [ 6 ] = {},
                },
                onProgramClosed = {
                    "(_C_self_passed,closingProgram)",
                    {
                        "\
        local programs = self.programs\
        local programOrder = program\
        local previousIndex\
        local changeIndex = false\
        for i, program in ipairs( programs ) do\
            if changeIndex then\
                program.index = i - 1\
            elseif program == closingProgram then\
                previousIndex = i\
                table.remove( programs, i )\
                changeIndex = true\
            end\
        end\
        \
        local programView = closingProgram.programView\
        if programView.isFocused then\
            programView:closeFlyUp(function()\
                if #programs == 0 then\
                    -- TODO: activate the home\
                    self.application.container.homeContainer:focus()\
                elseif programs[previousIndex] then\
                    programs[previousIndex]:focus()\
                    log(\"activate \"..previousIndex)\
                elseif programs[previousIndex - 1] then\
                    log(\"activate \"..previousIndex - 1)\
                    programs[previousIndex - 1]:focus()\
                end\
            end)\
        end\
    end",
                    },
                    23,
                    {
                        {
                            allowsNil = true,
                            name = "closingProgram",
                        },
                    },
                    [ 6 ] = {
                        "closingProgram",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                programs = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                owner = {
                    allowsNil = false,
                    link = false,
                    type = "QuartzApplication",
                    readOnly = false,
                },
            },
        },
        className = "ProgramManager",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    Scrollbar = {
        fileEnvironment = 210,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                width = "7\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isPressed = {
                        "(_C_self_passed,isPressed)\
\9\9self.isPressed = isPressed\
\9\9self:updateThemeStyle()\
\9end",
                        55,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self:updateThemeStyle()\
\9end",
                        50,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9-- self:event( ScrollMouseEvent, self.onMouseScroll )\
\9\9self:event( DownMouseEvent, self.onMouseDown )\
\9\9self.eventManager:connectGlobal( DragMouseEvent, self.onGlobalMouseDrag )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9end",
                    },
                    12,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and ( self.isPressed and \"pressed\" or \"default\" ) or \"disabled\"\
\9end",
                    },
                    46,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = false\
\9\9end\
\9end",
                    },
                    102,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                initialiseCanvas = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9super()\
\
\9\9self.theme:connect( self.canvas, \"fillColour\" )\
\
\9\9local scrollerObject = self.canvas:insert( RoundedRectangle( 2, 3, self.width - 2, 30 ) )\
\9\9local grabberObject = self.canvas:insert( ScrollbarGrabber( 3, 3, self.width - 4, 30 ) )\
\
\9\9self.theme:connect( scrollerObject, \"fillColour\", \"scrollerColour\" )\
\9\9self.theme:connect( scrollerObject, \"outlineColour\" )\
\9\9self.theme:connect( scrollerObject, \"radius\", \"cornerRadius\" )\
\9\9self.theme:connect( grabberObject, \"fillColour\", \"grabberColour\" )\
\
\9\9local position, size = self.scroller\
\9\9-- local position, size = self:getScroller()\
\9\9self.scrollerObject = scrollerObject\
\9\9self.grabberObject = grabberObject\
\9end",
                    },
                    23,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseDrag = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isPressed and self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9local oldRelative = event.relativeView\
\9\9\9event:makeRelative( self )\
\
\9\9\9local position, size = self:getScroller( true )\
\9\9\9local traySize\
\9\9\9position = event.y - self.dragPoint\
\9\9\9traySize = self.height\
\
\9\9\9position = math.max( math.min( position, traySize - size ), 0 )\
\9\9\9local parent = self.parent\
\9\9\9-- parent.offsetY = math.floor( position / traySize * parent.container.height )\
\9\9\9-- scrollTo\
\9\9\9parent:scrollTo( math.floor( position / traySize * parent.container.height ) )\
\9\9  \
\9\9\9event:makeRelative( oldRelative )\
\9\9end\
\9end",
                    },
                    127,
                    {
                        {
                            allowsNil = false,
                            type = "DragMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = true\
\9\9\9local position, size = self:getScroller( true )\
\9\9\9self.dragPoint = event.y + position - 1\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    113,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                getScroller = {
                    "(_C_self_passed,dontSetPosition)",
                    {
                        "\
\9\9local parent = self.parent\
\9\9if not parent then\
\9\9\9",
                        {
                            " 0, self.direction == \"vertical\" and self.height or self.width\
",
                        },
                        "\9\9end\
\
\9\9local trayMargin = 2\
\9\9local traySize = self.height - 2 * trayMargin\
\
\9\9local frameSize, contentSize, contentScroll\
\9\9frameSize = parent.height\
\9\9local container = parent.container\
\9\9contentSize = container.height\
\9\9contentScroll = - parent.offsetY\
\
\
\9\9local barSize = math.max( math.floor( traySize * frameSize / contentSize ), 1 )\
\9\9local barPosition = math.ceil( traySize * contentScroll / contentSize )\
\
\9\9local scrollerObject = self.scrollerObject\
\9\9local grabberObject = self.grabberObject\
\9\9scrollerObject.height = barSize\
\9\9grabberObject.height = barSize\
\9\9if not dontSetPosition then\
\9\9\9local y = 1 + trayMargin - barPosition\
\9\9\9scrollerObject.y = y\
\9\9\9grabberObject.y = y\
\9\9end\
\
\9\9",
                        {
                            " barPosition, barSize\
",
                        },
                        "\9end",
                    },
                    65,
                    {
                        {
                            allowsNil = true,
                            name = "dontSetPosition",
                        },
                    },
                    [ 6 ] = {
                        "dontSetPosition",
                    },
                },
                updateHeight = {
                    "(_C_self_passed,height)",
                    {
                        "\
\9\9self:getScroller()\
\9end",
                    },
                    42,
                    {
                        {
                            allowsNil = true,
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "height",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                dragPoint = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                scrollerObject = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                isHorizontal = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                direction = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\
\9\
",
                },
                grabberObject = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
        },
        className = "Scrollbar",
        fileName = "/src/classes/Views/Scrollbar.luo",
    },
    ToolbarSegmentButton = {
        fileEnvironment = 191,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IToolbarItem",
        },
        extends = "SegmentButton",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ToolbarSegmentButton",
        fileName = "/src/classes/Views/Containers/Toolbar/ToolbarSegmentButton.luo",
    },
    ProgramException = {
        fileEnvironment = 3,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Exception",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,program)",
                    {
                        "\
\9    self.program = program\
\9    super( message )\
\9end",
                    },
                    6,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = false,
                            type = "Program",
                            name = "program",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "program",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                program = {
                    allowsNil = false,
                    link = false,
                    type = "Program",
                    readOnly = false,
                },
            },
        },
        className = "ProgramException",
        fileName = "/System/classes/Exceptions/ProgramException.luo",
    },
    ConfigurationFatalProgramException = {
        fileEnvironment = 1,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Exception",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ConfigurationFatalProgramException",
        fileName = "/System/classes/Exceptions/ConfigurationFatalProgramException.luo",
    },
    EnumValueTypeClassException = {
        fileEnvironment = 88,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClassException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Incorrect usage of Enum ValueTypes: \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "EnumValueTypeClassException",
        fileName = "/src/classes/Exceptions/Class System/EnumValueTypeClassException.luo",
    },
    ToolbarDynamicSpace = {
        fileEnvironment = 190,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IToolbarItem",
            "IToolbarDynamicItem",
        },
        extends = "View",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ToolbarDynamicSpace",
        fileName = "/src/classes/Views/Containers/Toolbar/ToolbarDynamicSpace.luo",
    },
    ToolbarButton = {
        fileEnvironment = 188,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IToolbarItem",
            "IToolbarPressableItem",
        },
        extends = "Button",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ToolbarButton",
        fileName = "/src/classes/Views/Containers/Toolbar/ToolbarButton.luo",
    },
    TerminateEvent = {
        fileEnvironment = 81,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"terminate\";\
\9\
\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Event",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "TerminateEvent",
        fileName = "/src/classes/Events/System Events/TerminateEvent.luo",
    },
    ListContainer = {
        fileEnvironment = 176,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IDragDropDestination",
        },
        extends = "ScrollContainer",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    height = {
                        "(_C_self_passed,height)\
\9    super:super( height )\
\9end",
                        75,
                    },
                    width = {
                        "(_C_self_passed,width)\
\9    super( width )\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9childView.width = width\
\9\9end\
\9end",
                        26,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self:event( ChildAddedInterfaceEvent, self.onChildAdded )\
\9\9self:event( ChildRemovedInterfaceEvent, self.onChildRemoved )\
\9\9self:event( ReadyInterfaceEvent, self.onReady, Event.phases.AFTER )\
\9end",
                    },
                    8,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                dragDropMoved = {
                    "(_C_self_passed,data,dragView,x,y)",
                    {
                        "\
\9\9local _, selfY = self:getPosition()\
\9\9local listItem = data.listItem\
\9\9local children = self.children\
\9\9local index = math.max( math.min( math.floor( ( dragView.y - selfY - self.theme:value( \"topMargin\" ) - 1 ) / listItem.height + 1.5 ), #children), 1 )\
\9\9if listItem.index ~= index then\
\9\9\9listItem.index = index\
\9\9\9self.needsLayoutUpdate = true\
\9\9end\
\9end",
                    },
                    83,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "dragView",
                        "x",
                        "y",
                    },
                },
                onChildRemoved = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    40,
                    {
                        {
                            allowsNil = false,
                            type = "ChildRemovedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                dragDropDropped = {
                    "(_C_self_passed,data,isMove,x,y)",
                    {
                        "\
\9end",
                    },
                    100,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isMove",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "isMove",
                        "x",
                        "y",
                    },
                },
                dragDropEntered = {
                    "(_C_self_passed,data,dragView,x,y)",
                    {
                        "\
\9end",
                    },
                    94,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "dragView",
                        "x",
                        "y",
                    },
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self:updateLayout( true )\
\9end",
                    },
                    15,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                canAcceptDragDrop = {
                    "(_C_self_passed,data,isMove)",
                    {
                        "\
\9\9",
                        {
                            " data:typeOf( ListClipboardData ) and (self.canTransferItems or data.listItem.parent == self)\
",
                        },
                        "\9end",
                    },
                    79,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isMove",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "isMove",
                    },
                },
                dragDropExited = {
                    "(_C_self_passed,data,dragView,x,y)",
                    {
                        "\
\9end",
                    },
                    97,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "dragView",
                        "x",
                        "y",
                    },
                },
                onChildAdded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if not event.childView:typeOf( ListItem ) then\
\9\9\9error( \"Attempted to add view '\" .. tostring( event.childView ) .. \"' that does not extend ListItem to '\" .. tostring( self ) .. \"'\", 0 )\
\9\9end\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    33,
                    {
                        {
                            allowsNil = false,
                            type = "ChildAddedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9if self.needsLayoutUpdate then\
\9\9\9self:updateLayout()\
\9\9end\
\9end",
                    },
                    19,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                updateLayout = {
                    "(_C_self_passed,dontAnimate)",
                    {
                        "\
\9\9local children, width = self.children, self.width\
\9\9local theme = self.theme\
\9\9local y = theme:value( \"topMargin\" ) + 1\
\
\9\9local time, easing\
\9\9if not dontAnimate then\
\9\9\9time = theme:value( \"animationDuration\" )\
\9\9\9easing = theme:value( \"animationEasing\" )\
\9\9end\
\9\9for i, childView in ipairs( children ) do\
\9\9\9if dontAnimate then\
\9\9\9\9childView.y = y\
\9\9\9else\
\9\9\9\9childView:animate( \"y\", y, time, nil, easing )\
\9\9\9end\
\9\9\9childView.x = 1\
\9\9\9childView.width = width\
\9\9\9y = y + childView.height\
\9\9end\
\
\9\9local height = y + self.theme:value( \"bottomMargin\" )\
\9\9if dontAnimate then\
\9\9\9self.height = height\
\9\9else\
\9\9\9self:animate( \"height\", height, time, nil, easing )\
\9\9end\
\
\9\9self.needsLayoutUpdate = false\
\9end",
                    },
                    44,
                    {
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "dontAnimate",
                            defaultValue = "false ",
                        },
                    },
                    [ 6 ] = {
                        "dontAnimate",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                canRearrange = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
                canTransferItems = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\9\
",
                },
                dropStyle = {
                    allowsNil = false,
                    link = false,
                    type = "DragDropManager.dropStyles",
                    readOnly = false,
                    defaultValue = "DragDropManager.dropStyles.RETURN\
\9\
",
                },
                needsLayoutUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "ListContainer",
        fileName = "/src/classes/Views/Containers/List/ListContainer.luo",
    },
    InterfaceEvent = {
        fileEnvironment = 56,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Event",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "InterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/InterfaceEvent.luo",
    },
    HomeSymbol = {
        fileEnvironment = 145,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                width = "9\
\9\
",
                symbolName = "\"home\"\
\9\
",
                height = "9\
\9\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 5, 1 )\
\9\9path:lineTo( 9, 5 )\
\9\9path:lineTo( 8, 5 )\
\9\9path:lineTo( 8, 9 )\
\9\9path:lineTo( 6, 9 )\
\9\9path:lineTo( 6, 6 )\
\9\9path:lineTo( 4, 6 )\
\9\9path:lineTo( 4, 9 )\
\9\9path:lineTo( 2, 9 )\
\9\9path:lineTo( 2, 5 )\
\9\9path:lineTo( 1, 5 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    10,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "HomeSymbol",
        fileName = "/src/classes/Symbols/HomeSymbol.luo",
    },
    ProgramView = {
        fileEnvironment = 18,
        enums = {},
        lineNumber = 10,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "ISwitchableView",
        },
        extends = "View",
        instance = {
            defaultValues = {
                isFocusDismissable = "false\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    width = {
                        "(_C_self_passed,width)\
        super( width )\
        self.termSizes.width = width\
    end",
                        74,
                    },
                    height = {
                        "(_C_self_passed,height)\
        super( height )\
        self.termSizes.height = height\
    end",
                        79,
                    },
                    scale = {
                        "(_C_self_passed,scale)\
        self.scale = scale\
        local canvas = self.canvas\
        canvas.scaleX = scale\
        canvas.scaleY = scale\
        local parent = self.parent\
        if parent then\
            parent.needsDraw = true\
        end\
    end",
                        63,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
        super( ... )\
\
        local termSizes = self.termSizes\
        termSizes.width = self.width\
        termSizes.height = self.height\
        self.program.quartzProxy.screenBuffer = self.buffer\
        if not self.program:typeOf( SilicaProgram ) then\
            self.redirect = self:getRedirect()\
        end\
\
        self:event( MouseEvent, self.onMouseEvent )\
        self:event( UpKeyEvent, self.onUpKeyEvent )\
        self:event( DownKeyEvent, self.onDownKeyEvent )\
        self:event( CharacterEvent, self.onCharacterEvent )\
        self:event( FocusesChangedInterfaceEvent, self.onFocusesChanged )\
        self:event( ParentChangedInterfaceEvent, self.onParentChanged )\
    end",
                    },
                    22,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onFocusesChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        local oldContains = event:didContain( self )\
        local contains = event:contains( self )\
        if oldContains ~= contains then\
            -- local program = self.program\
            if contains and not self.isOpening then\
                local oldSwitchableView = self.application:focusesOfType( ISwitchableView, event.oldFocuses )[1]\
                local fromLeft = false\
                if oldSwitchableView:typeOf( ProgramView ) then\
                    if oldSwitchableView and oldSwitchableView.program.index > self.program.index then\
                        fromLeft = true\
                    end\
                end\
                self:flyInFocused( fromLeft )\
            elseif oldContains and not self.isClosing then\
                self.isOpening = false\
                local newSwitchableView = self.application:focusesOfType( ISwitchableView )[1]\
                local toRight = true\
                if newSwitchableView:typeOf( ProgramView ) then\
                    if newSwitchableView and newSwitchableView.program.index > self.program.index then\
                        toRight = false\
                    end\
                end\
                self:flyOutFocused( toRight )\
            end\
        end\
    end",
                    },
                    94,
                    {
                        {
                            allowsNil = false,
                            type = "FocusesChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onParentChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.scale = ANIMATION_SCALE\
        self.y = self.parent.height + 1\
        self:animate( \"y\", 15, ANIMATION_FLY_UP_TIME, function()\
            self.isOpening = false\
        end, ANIMATION_SCALE_EASING, ANIMATION_SCALE_TIME )\
        self:animate( \"scale\", 1, ANIMATION_SCALE_TIME, nil, ANIMATION_SCALE_EASING, ANIMATION_SCALE_TIME + ANIMATION_FLY_UP_TIME - ANIMATION_OVERLAP_TIME, false)\
        -- self:animate( \"scale\", 1, ANIMATION_SCALE_TIME, nil, ANIMATION_SCALE_EASING, ANIMATION_SCALE_TIME + ANIMATION_FLY_UP_TIME - ANIMATION_OVERLAP_TIME, false)\
    end",
                    },
                    84,
                    {
                        {
                            allowsNil = false,
                            type = "ParentChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                closeFlyUp = {
                    "(_C_self_passed,ready)",
                    {
                        "\
        self.isClosing = true\
        self.parent:sendToBack( self )\
        local hasCalledReady = false\
        self:animate( \"scale\", ANIMATION_SCALE, ANIMATION_SCALE_TIME, function()\
            if not hasCalledReady then\
                ready()\
                hasCalledReady = true\
            end\
        end, ANIMATION_SCALE_EASING, nil, false )\
        self:animate( \"y\", -self.height, ANIMATION_FLY_UP_TIME, function()\
            if not hasCalledReady then\
                ready()\
                hasCalledReady = true\
            end\
            self:dispose()\
        end, ANIMATION_SCALE_EASING, ANIMATION_SCALE_TIME - ANIMATION_OVERLAP_TIME )--ANIMATION_FLY_DELAY )\
    end",
                    },
                    122,
                    {
                        {
                            allowsNil = true,
                            name = "ready",
                        },
                    },
                    [ 6 ] = {
                        "ready",
                    },
                },
                onDownKeyEvent = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.program:queueEvent( \"key\", event.keyCode, event.isRepeat  )\
    end",
                    },
                    170,
                    {
                        {
                            allowsNil = false,
                            type = "DownKeyEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onCharacterEvent = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.program:queueEvent( \"char\", event.character  )\
    end",
                    },
                    174,
                    {
                        {
                            allowsNil = false,
                            type = "CharacterEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                getRedirect = {
                    "(_C_self_passed)",
                    {
                        "\
        local term = {}\
        local termSizes = self.termSizes\
\
        local colour, termX, termY, cursorBlink = Graphics.colours.BLACK, 1, 1\
\
        local buffer = self.buffer\
        local TRANSPARENT = Graphics.colours.TRANSPARENT\
        local function setPixel( x, y, c )\
            local termWidth = termSizes.width\
            if c ~= TRANSPARENT and x >= 1 and y >= 1 and x <= termWidth and y <= termSizes.height then\
                local pos = ( y - 1 ) * termWidth + x\
                if buffer[ pos ] ~= c then\
                    buffer[ pos ] = c\
                    if not termSizes.needsDraw then\
                        termSizes.needsDraw = true\
                        self.needsDraw = true\
                    end\
                end\
            end\
        end\
\
        function term.write( s )\
            s = tostring( s ) -- we don't really care what s is. this whole thing will need to be redone when we actually get the real thing\
            for i = 1, math.min( #s, termSizes.width - termX + 1 ) do\
                setPixel( termX + i - 1, termY, colour )\
            end\
            termX = termX + #s\
        end\
\
        function term.blit( s, t, b )\
            if #s ~= #b or #s ~= #t then\
                return error \"arguments must be the same length\"\
            end\
            for i = 1, math.min( #s, termSizes.width - termX + 1 ) do\
                setPixel( termX + i - 1, termY, colourBytes[ b:byte( i ) ] )\
            end\
            termX = termX + #s\
        end\
\
        function term.clear()\
            local height = termSizes.height\
            for x = 1, termSizes.width do\
                for y = 1, height do\
                    setPixel( x, y, colour )\
                end\
            end\
        end\
\
        function term.clearLine()\
            for x = 1, termSizes.width do\
                setPixel( x, termY, colour )\
            end\
        end\
\
        function term.getCursorPos()\
            return termX, termY\
        end\
\
        function term.setCursorPos( x, y )\
            termX = math.floor( x )\
            termY = math.floor( y )\
        end\
\
        function term.setCursorBlink( state )\
            -- This does zilch\
        end\
\
        function term.getSize()\
            return termSizes.width, termSizes.height\
        end\
\
        function term.scroll( n )\
            local offset = n * termSizes.width\
            local n, f, s = n < 0 and termSizes.width * termSizes.height or 1, n < 0 and 1 or termSizes.width * termSizes.height, n < 0 and -1 or 1\
            for i = n, f, s do\
                buffer[i] = buffer[i + offset] or colour\
            end\
        end\
\
        function term.isColour()\
            return true\
        end\
\
        function term.setBackgroundColour( backgroundColour )\
            colour = backgroundColour\
        end\
\
        function term.setTextColour( colour )\
            -- This does zilch\
        end\
\
        function term.getBackgroundColour()\
            return colour\
        end\
\
        function term.getTextColour()\
            return colours.white\
        end\
\
        term.isColor = term.isColour\
        term.setBackgroundColor = term.setBackgroundColour\
        term.setTextColor = term.setTextColour\
        term.getBackgroundColor = term.getBackgroundColour\
        term.getTextColor = term.getTextColour\
\
        ",
                        {
                            " term\
",
                        },
                        "    end",
                    },
                    178,
                    {},
                    [ 6 ] = {},
                },
                flyInFocused = {
                    "(_C_self_passed,fromLeft)",
                    {
                        "\
        self.scale = 0.8\
        local width = self.width\
        self.x = fromLeft and -width or 1 + width\
        self:animate( \"x\", 1, ANIMATION_FLY_TIME, nil, ANIMATION_SCALE_EASING, ANIMATION_FLY_TIME/2 - 0.1 )\
        self:animate( \"scale\", 1, ANIMATION_SCALE_TIME, nil, ANIMATION_SCALE_EASING, ANIMATION_FLY_TIME - 0.1, false )\
    end",
                    },
                    141,
                    {
                        {
                            allowsNil = true,
                            name = "fromLeft",
                        },
                    },
                    [ 6 ] = {
                        "fromLeft",
                    },
                },
                onUpKeyEvent = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.program:queueEvent( \"key_up\", event.keyCode  )\
    end",
                    },
                    166,
                    {
                        {
                            allowsNil = false,
                            type = "UpKeyEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                flyOutFocused = {
                    "(_C_self_passed,toRight)",
                    {
                        "\
        local width = self.width\
        local x = toRight and 1 + width or -width\
        self:animate( \"x\", x, ANIMATION_FLY_TIME, nil, ANIMATION_SCALE_EASING, ANIMATION_FLY_TIME/2 - 0.1 )\
        self:animate( \"scale\", 0.8, ANIMATION_SCALE_TIME, nil, ANIMATION_SCALE_EASING, nil, false )\
\
    end",
                    },
                    149,
                    {
                        {
                            allowsNil = true,
                            name = "toRight",
                        },
                    },
                    [ 6 ] = {
                        "toRight",
                    },
                },
                initialiseCanvas = {
                    "(_C_self_passed)",
                    {
                        "\
        self.canvas = ScaleableCanvas( self.width, self.height, self )\
    end",
                    },
                    41,
                    {},
                    [ 6 ] = {},
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
        local width, height, theme, canvas, buffer, scale = self.width, self.height, self.theme, self.canvas, self.buffer, self.scale\
\
        local pixels = canvas.pixels\
        local fillColour = theme:value( \"fillColour\" )\
        local TRANSPARENT = Graphics.colours.TRANSPARENT\
\
        local termSizes = self.termSizes\
        if termSizes.needsDraw then\
            termSizes.needsDraw = false\
        end\
\
        for i = 1, #buffer do\
            local colour = buffer[i] or fillColour\
            pixels[i] = colour == TRANSPARENT and fillColour or colour\
        end\
    end",
                    },
                    45,
                    {},
                    [ 6 ] = {},
                },
                onMouseEvent = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        if not event:typeOf( MoveMouseEvent ) then\
            self.program:queueEvent( event.eventType, event.mouseButton, event.x, event.y  )\
        else\
            self.program:queueEvent( event.eventType, event.x, event.y  )\
        end\
        ",
                        {
                            " true\
",
                        },
                        "    end",
                    },
                    157,
                    {
                        {
                            allowsNil = false,
                            type = "MouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                scale = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                termSizes = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{ width = 1; height = 1; needsDraw = false; }\
    buffer = Table( {} )\
\
\
    \
",
                },
                redirect = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                program = {
                    allowsNil = false,
                    link = false,
                    type = "Program",
                    readOnly = false,
                },
                isClosing = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                isOpening = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
            },
        },
        className = "ProgramView",
        fileName = "/System/classes/Program Managing/ProgramView.luo",
    },
    IToolbarItem = {
        className = "IToolbarItem",
        enums = {},
        isInterface = true,
        instance = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    StripeMask = {
        fileEnvironment = 130,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Mask",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,width,height,offset,stripeWidth)",
                    {
                        "\
\9\9local pixels = {}\
\9\9if stripeWidth <= 0 then\
\9\9\9for i = 1, width * height do\
\9\9\9\9pixels[i] = true\
\9\9\9end\
\9\9else\
\9\9\9for i = 1, width * height do\
\9\9\9\9local n = (i - 1) / width - offset\
\9\9\9\9pixels[i] = ( ( (i - 1) % width + n ) / stripeWidth ) % 2 < 1\
\9\9\9end\
\9\9end\
\9\9super( x, y, width, height, pixels )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "offset",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "stripeWidth",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "width",
                        "height",
                        "offset",
                        "stripeWidth",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "StripeMask",
        fileName = "/src/classes/Graphics/StripeMask.luo",
    },
    IToolbarDynamicItem = {
        className = "IToolbarDynamicItem",
        enums = {},
        isInterface = true,
        instance = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    SplitHandleView = {
        fileEnvironment = 184,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                cursor = "ResizeHorizontalCursor.static\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isVertical = {
                        "(_C_self_passed,isVertical)\
\9\9self.isVertical = isVertical\
\9\9if isVertical then\
\9\9\9self.cursor = ResizeVerticalCursor.static\
\9\9else\
\9\9\9self.cursor = ResizeHorizontalCursor.static\
\9\9end\
\9end",
                        44,
                    },
                    position = {
                        "(_C_self_passed,position)\
\9\9self.position = position\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9parent.needsLayoutUpdate = true\
\9\9end\
\9end",
                        53,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self:event( DownMouseEvent, self.onMouseDown, Event.phases.AFTER )\
\9\9self:event( ParentChangedInterfaceEvent, self.onParentChanged )\
\9\9self.eventManager:connectGlobal( DragMouseEvent, self.onGlobalMouseDrag )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9end",
                    },
                    14,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.dragX = event.x\
\9\9\9self.dragY = event.y\
\9\9\9self.isDragging = true\
\9\9\9self.parent:lockChildren()\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    34,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isDragging and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.dragX = nil\
\9\9\9self.dragY = nil\
\9\9\9self.isDragging = false\
\9\9\9self.parent:unlockChildren()\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    70,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onParentChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local parent = self.parent\
\9\9if parent and parent:typeOf( SplitContainer ) then\
\9\9\9self.isVertical = parent.isVertical\
\9\9end\
\9end",
                    },
                    27,
                    {
                        {
                            allowsNil = false,
                            type = "ParentChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.canvas:fill( self.theme:value( \"fillColour\" ) )\
\9end",
                    },
                    23,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseDrag = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isDragging and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9local segmentSize, contentPosition = self.parent.segmentSize, self.contentPosition\
\9\9\9local width = event.x - self.dragX + 1 - contentPosition + self.theme:value( \"leftMargin\" )\
\9\9\9self.position = width / segmentSize\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    61,
                    {
                        {
                            allowsNil = false,
                            type = "DragMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                contentPosition = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                position = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                dragY = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                dragX = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                isVertical = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\9\
",
                },
                isDragging = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "SplitHandleView",
        fileName = "/src/classes/Views/Containers/Split/SplitHandleView.luo",
    },
    EventManager = {
        fileEnvironment = 47,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/src/classes/Events/Event Managers/EventManager.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,owner)",
                    {
                        "\
\9\9self.owner = owner or self\
\9\9self.owner = self.owner\
\9\9-- allow the class to be called as a shorthand for :connect\
\9\9-- TODO: connect event handle\
\9\9-- self.metatable.__call = function(self, _, ...) return self:connect( ... ) end\
\9\9-- setmetatable( self, self.mt )\
\9end",
                    },
                    12,
                    {
                        {
                            allowsNil = false,
                            type = "InstanceOrStatic",
                            name = "owner",
                        },
                    },
                    [ 6 ] = {
                        "owner",
                    },
                },
                disconnectAllGlobals = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9for eventType, v in pairs( self.handlesGlobal ) do\
\9\9\9for i, handle in pairs( v ) do\
\9\9\9\9self.application.eventManager:disconnect( eventType, handle[1], handle[2], self, handle[3] )\
\9\9\9\9v[i] = nil\
\9\9\9end\
\9\9end\
\9end",
                    },
                    91,
                    {},
                    [ 6 ] = {},
                },
                hasConnectionsGlobal = {
                    "(_C_self_passed,class)",
                    {
                        "\
\9\9for handleClass, handles in pairs( self.handlesGlobal ) do\
\9\9\9if #handles >= 1 and class:typeOf( handleClass ) then\
\9\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    118,
                    {
                        {
                            allowsNil = false,
                            type = "Class",
                            name = "class",
                        },
                    },
                    [ 6 ] = {
                        "class",
                    },
                },
                disconnectGlobal = {
                    "(_C_self_passed,eventType,func,phase,sender)",
                    {
                        "\
\9\9self.application.eventManager:disconnect( eventType, func, phase, self, sender )\
\
\9\9if self.handlesGlobal[eventType] then\
\9\9\9for i, handle in pairs( self.handlesGlobal[eventType] ) do\
\9\9\9\9if handle[1] == func and handle[2] == phase and handle[3] == sender then\
\9\9\9\9\9self.handlesGlobal[eventType][i] = nil\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    76,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "eventType",
                        },
                        {
                            allowsNil = false,
                            type = "Function",
                            name = "func",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                            defaultValue = "Event.phases.BEFORE",
                        },
                        {
                            allowsNil = false,
                            type = "InstanceOrStatic",
                            name = "sender",
                            defaultValue = "self.owner ",
                        },
                    },
                    [ 6 ] = {
                        "eventType",
                        "func",
                        "phase",
                        "sender",
                    },
                },
                hasConnections = {
                    "(_C_self_passed,class)",
                    {
                        "\
\9\9for handleClass, handles in pairs( self.handles ) do\
\9\9\9if #handles >= 1 and class:typeOf( handleClass ) then\
\9\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    105,
                    {
                        {
                            allowsNil = false,
                            type = "Class",
                            name = "class",
                        },
                    },
                    [ 6 ] = {
                        "class",
                    },
                },
                handleEvent = {
                    "(_C_self_passed,event)",
                    {
                        "\
\9\9if self:handleEventPhase( event, Event.phases.BEFORE ) then\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\
\9\9if self:handleEventPhase( event, Event.phases.AFTER ) then\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    131,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                    },
                    [ 6 ] = {
                        "event",
                    },
                },
                dispose = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self:disconnectAllGlobals()\
\9end",
                    },
                    172,
                    {},
                    [ 6 ] = {},
                },
                handleEventPhase = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local class = event.class\
\9\9for handleClass, handles in pairs( self.handles ) do\
\9\9\9if class:typeOf( handleClass ) then\
\9\9\9\9for i, handle in pairs( handles ) do\
\9\9\9\9\9if handle and phase == handle[2] then\
\9\9\9\9\9\9-- handle[1] is the handle function\
\9\9\9\9\9\9-- handle[2] is the phase\
\9\9\9\9\9\9-- handle[3] is the event manager\
\9\9\9\9\9\9-- handle[4] is the sender\
\9\9\9\9\9\9local response = handle[1]( handle[4], event, handle[2] ) -- if response is true stop propagation, if false continue\
\9\9\9\9\9\9-- TODO: maybe enforce returning boolean for event handler functions\
\9\9\9\9\9\9-- if response ~= true and response ~= false then\
\9\9\9\9\9\9--\9error( \"Error handler for event '\" .. eventType .. \"' of instance '\" .. tostring( handle[4] ) .. \"' did not return boolean. If the event should not be sent to anything else (i.e. stop propagation) return true, otherwise, if it can continue being passed around, return false.\", 0 )\
\9\9\9\9\9\9-- end\
\
\9\9\9\9\9\9if response then\
\9\9\9\9\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    147,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                connect = {
                    "(_C_self_passed,eventType,func,phase,eventManager,sender)",
                    {
                        "\
\9\9self:disconnect( eventType, func, phase, eventManager, sender ) -- ensure duplicates won't be made\
\
\9\9if not self.handles[eventType] then\
\9\9\9self.handles[eventType] = {}\
\9\9end\
\
\9\9table.insert( self.handles[eventType], { func, phase, eventManager, sender } )\
\9end",
                    },
                    28,
                    {
                        {
                            allowsNil = false,
                            type = "Class",
                            name = "eventType",
                        },
                        {
                            allowsNil = false,
                            type = "Function",
                            name = "func",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                            defaultValue = "Event.phases.BEFORE",
                        },
                        {
                            allowsNil = false,
                            type = "EventManager",
                            name = "eventManager",
                            defaultValue = "self",
                        },
                        {
                            allowsNil = false,
                            type = "InstanceOrStatic",
                            name = "sender",
                            defaultValue = "eventManager.owner ",
                        },
                    },
                    [ 6 ] = {
                        "eventType",
                        "func",
                        "phase",
                        "eventManager",
                        "sender",
                    },
                },
                connectGlobal = {
                    "(_C_self_passed,eventType,func,phase,sender)",
                    {
                        "\
\9\9self:disconnectGlobal( eventType, func, phase, sender ) -- ensure duplicates won't be made\
\
\9\9if not self.handlesGlobal[eventType] then\
\9\9\9self.handlesGlobal[eventType] = {}\
\9\9end\
\
\9\9table.insert( self.handlesGlobal[eventType], { func, phase, sender } )\
\9\9self.application.eventManager:connect( eventType, func, phase, self, sender )\
\9end",
                    },
                    60,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "eventType",
                        },
                        {
                            allowsNil = false,
                            type = "Function",
                            name = "func",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                            defaultValue = "Event.phases.BEFORE",
                        },
                        {
                            allowsNil = false,
                            type = "InstanceOrStatic",
                            name = "sender",
                            defaultValue = "self.owner ",
                        },
                    },
                    [ 6 ] = {
                        "eventType",
                        "func",
                        "phase",
                        "sender",
                    },
                },
                disconnect = {
                    "(_C_self_passed,eventType,func,phase,eventManager,sender)",
                    {
                        "\
\9\9if self.handles[eventType] then\
\9\9\9for i, handle in pairs( self.handles[eventType] ) do\
\9\9\9\9if handle[1] == func and handle[2] == phase and handle[3] == eventManager and handle[4] == sender then\
\9\9\9\9\9self.handles[eventType][i] = nil\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    44,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "eventType",
                        },
                        {
                            allowsNil = false,
                            type = "Function",
                            name = "func",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                            defaultValue = "Event.phases.BEFORE",
                        },
                        {
                            allowsNil = false,
                            type = "EventManager",
                            name = "eventManager",
                            defaultValue = "self",
                        },
                        {
                            allowsNil = false,
                            type = "InstanceOrStatic",
                            name = "sender",
                            defaultValue = "eventManager.owner ",
                        },
                    },
                    [ 6 ] = {
                        "eventType",
                        "func",
                        "phase",
                        "eventManager",
                        "sender",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                owner = {
                    allowsNil = false,
                    link = false,
                    type = "InstanceOrStatic",
                    readOnly = false,
                },
                handles = {
                    allowsNil = false,
                    link = false,
                    type = "{Event}",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                handlesGlobal = {
                    allowsNil = false,
                    link = false,
                    type = "{Event}",
                    readOnly = false,
                    defaultValue = "{}\
\
\9\
\
\
\
\
\9\
",
                },
            },
        },
        className = "EventManager",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    SplitContainer = {
        fileEnvironment = 183,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "LayoutContainer",
        instance = {
            defaultValues = {
                needsLayoutUpdate = "false\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    width = {
                        "(_C_self_passed,width)\
\9    super( width )\
\9    if self.isVertical then\
\9    \9local children = self.children\
\9\9    for i = 2, #children, 2 do\
\9\9\9\9children[i].width = width\
\9\9\9end\
\9\9end\
\9end",
                        8,
                    },
                    height = {
                        "(_C_self_passed,height)\
\9    super( height )\
\9    if not self.isVertical then\
\9    \9local children = self.children\
\9\9    for i = 2, #children, 2 do\
\9\9\9\9children[i].height = height\
\9\9\9end\
\9\9end\
\9end",
                        18,
                    },
                    isVertical = {
                        "(_C_self_passed,isVertical)\
\9\9self.isVertical = isVertical\
\9\9local children = self.children\
\9\9local otherSize = isVertical and self.width or self.height\
\9\9local otherPositionKey, otherSizeKey = isVertical and \"x\" or \"y\", isVertical and \"width\" or \"height\"\
\9\9for i = 2, #children, 2 do\
\9\9\9local childView = children[i]\
\9\9\9childView.isVertical = isVertical\
\9\9\9childView[otherPositionKey] = 1\
\9\9\9childView[otherSizeKey] = otherSize\
\9\9end\
\9end",
                        98,
                    },
                },
            },
            functions = {
                updateLayout = {
                    "(_C_self_passed,dontAnimate)",
                    {
                        "\
\9\9local children = self.children\
\9\9local childrenCount = #children\
\9\9if childrenCount > 0 and childrenCount % 2 == 1 then -- we MUST have an odd number of children, there should be a separator view between each main view\
\9\9\9local width, height, isVertical = self.width, self.height, self.isVertical\
\9\9\9local size = isVertical and height or width\
\9\9\9local handleThickness, handleLeftMargin, handleRightMargin, handleSize\
\9\9\9if childrenCount > 1 then\
\9\9\9\9local theme = children[2].theme\
\9\9\9\9handleThickness, handleLeftMargin, handleRightMargin = theme:value( \"thickness\" ), theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" )\
\9\9\9\9handleSize = handleThickness + handleLeftMargin + handleRightMargin\
\9\9\9end\
\
\9\9\9local handlePositions = {}\
\9\9\9-- scan over all the handles and note their positions\
\9\9\9for i = 2, childrenCount, 2 do\
\9\9\9\9local childView = children[i]\
\9\9\9\9handlePositions[i / 2] = childView.position\
\9\9\9end\
\
\9\9\9local segmentSize = size / ( #handlePositions + 1 )\
\9\9\9local position, remainingSize = 1, size - ( handleThickness and ( #handlePositions * handleThickness ) or 0 )\
\9\9\9local positionKey, sizeKey = isVertical and \"y\" or \"x\", isVertical and \"height\" or \"width\"\
\9\9\9for i = 1, childrenCount, 2 do\
\9\9\9\9local childView = children[i]\
\9\9\9\9local index = i / 2 + 0.5\
\9\9\9\9local handlePosition = handlePositions[index]\
\9\9\9\9local childSize\
\9\9\9\9if handlePosition then\
\9\9\9\9\9childSize = math.floor( segmentSize * handlePosition + 0.5 )\
\9\9\9\9\9local handleView = children[i + 1]\
\9\9\9\9\9handleView.contentPosition = position\
\9\9\9\9\9handleView[positionKey] = position + childSize - handleLeftMargin\
\9\9\9\9\9handleView[sizeKey] = handleSize\
\9\9\9\9else\
\9\9\9\9\9childSize = remainingSize\
\9\9\9\9end\
\9\9\9\9remainingSize = remainingSize - childSize\
\9\9\9\9childView[positionKey] = position\
\9\9\9\9childView[sizeKey] = childSize\
\9\9\9\9position = position + childSize + ( handleThickness or 0 )\
\9\9\9end\
\9\9\9self.segmentSize = segmentSize\
\9\9end\
\
\9\9self.needsLayoutUpdate = false\
\9end",
                    },
                    28,
                    {
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "dontAnimate",
                            defaultValue = "false ",
                        },
                    },
                    [ 6 ] = {
                        "dontAnimate",
                    },
                },
                onFocusesChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local oldFocusedSwitchableViews = self.application:focusesOfType( ISwitchableView, event.oldFocuses )\
\9\9local focusedSwitchableViews = self.application:focusesOfType( ISwitchableView, event.newFocuses )\
\
\9\9if #focusedSwitchableViews > 0 then\
\9\9\9local oldSwitchableView = oldFocusedSwitchableViews[1]\
\9\9\9local switchableView = focusedSwitchableViews[1]\
\9\9\9if switchableView ~= oldSwitchableView then\
\9\9\9\9if oldSwitchableView then\
\9\9\9\9\9self.switchableItems[oldSwitchableView]:updateThemeStyle()\
\9\9\9\9end\
\9\9\9\9self.activeView = self.switchableItems[switchableView]\
\9\9\9end\
\9\9else\
\9\9\9self.activeView = nil\
\9\9end\
\9end",
                    },
                    132,
                    {
                        {
                            allowsNil = false,
                            type = "FocusesChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onChildAdded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if event.container == self then\
\9\9\9local childView = event.childView\
\9\9\9if not childView:typeOf( SplitHandleView ) then\
\9\9\9\9local index = childView.index\
\9\9\9\9if index ~= 1 then\
\9\9\9\9\9local existingChild = self.children[index - 1]\
\9\9\9\9\9if not existingChild or not existingChild:typeOf( SplitHandleView ) then\
\9\9\9\9\9\9self:insert( SplitHandleView(), index )\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9else\
\9\9\9\9self.needsLayoutUpdate = true\
\9\9\9end\
\9\9\9local otherSize = self.isVertical and self.width or self.height\
\9\9\9local otherPositionKey, otherSizeKey = isVertical and \"x\" or \"y\", isVertical and \"width\" or \"height\"\
\9\9\9childView[otherPositionKey] = 1\
\9\9\9childView[otherSizeKey] = otherSize\
\9\9end\
\9end",
                    },
                    111,
                    {
                        {
                            allowsNil = false,
                            type = "ChildAddedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                lockChildren = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9if childView:typeOf( LayoutContainer ) then\
\9\9\9\9childView.isLayoutLocked = true\
\9\9\9end\
\9\9end\
\9end",
                    },
                    79,
                    {},
                    [ 6 ] = {},
                },
                unlockChildren = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9if childView:typeOf( LayoutContainer ) then\
\9\9\9\9childView.isLayoutLocked = false\
\9\9\9end\
\9\9end\
\9end",
                    },
                    90,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                isVertical = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\
\9\
",
                },
                segmentSize = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
            },
        },
        className = "SplitContainer",
        fileName = "/src/classes/Views/Containers/Split/SplitContainer.luo",
    },
    QuartzApplicationContainer = {
        fileEnvironment = 23,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ApplicationContainer",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9    super( ... )\
\9    self:event( ReadyInterfaceEvent, self.onReady, Event.phases.AFTER )\
\9end",
                    },
                    7,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9    self.homeContainer:focus()\
\9end",
                    },
                    12,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                homeContainer = {
                    allowsNil = false,
                    link = true,
                    type = "HomeContainer",
                    readOnly = false,
                },
                topBar = {
                    allowsNil = false,
                    link = true,
                    type = "TopBarContainer",
                    readOnly = false,
                },
            },
        },
        className = "QuartzApplicationContainer",
        fileName = "/System/classes/QuartzApplicationContainer.luo",
    },
    ProgramClosedInterfaceEvent = {
        fileEnvironment = 12,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_program_closed\"\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,program)",
                    {
                        "\
\9    self.program = program\
\9end",
                    },
                    7,
                    {
                        {
                            allowsNil = false,
                            type = "Program",
                            name = "program",
                        },
                    },
                    [ 6 ] = {
                        "program",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                program = {
                    allowsNil = false,
                    link = false,
                    type = "Program",
                    readOnly = false,
                },
            },
        },
        className = "ProgramClosedInterfaceEvent",
        fileName = "/System/classes/Program Managing/ProgramClosedInterfaceEvent.luo",
    },
    MenuOpenSymbol = {
        fileEnvironment = 149,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"menuOpen\"\
\9\
",
                height = "4\
\9\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 1, 1 )\
\9\9path:lineTo( 4, 4 )\
\9\9path:lineTo( 7, 1 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    9,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "MenuOpenSymbol",
        fileName = "/src/classes/Symbols/MenuOpenSymbol.luo",
    },
    ProgramInformationChangedInterfaceEvent = {
        fileEnvironment = 14,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_program_info_changed\";\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,program)",
                    {
                        "\
\9    self.program = program\
\9end",
                    },
                    7,
                    {
                        {
                            allowsNil = false,
                            type = "Program",
                            name = "program",
                        },
                    },
                    [ 6 ] = {
                        "program",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                program = {
                    allowsNil = false,
                    link = false,
                    type = "Program",
                    readOnly = false,
                },
            },
        },
        className = "ProgramInformationChangedInterfaceEvent",
        fileName = "/System/classes/Program Managing/ProgramInformationChangedInterfaceEvent.luo",
    },
    ScrollView = {
        fileEnvironment = 181,
        enums = {},
        lineNumber = 11,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9local width, height = self.width, self.height\
\9\9self.verticalScrollbar = self:insert( Scrollbar( { isHorizontal = false, x = width - Scrollbar.width + 1, height = height } ) )\
\9\9self.container = self:insert( ScrollContainer( { x = 1, y = 1, width = width, height = height } ) )\
\9\9-- self:sendToFront( self.horizontalScrollbar )\
\9\9self:sendToFront( self.verticalScrollbar )\
\
\9\9self:event( LoadedInterfaceEvent, self.onInterfaceLoaded )\
\9\9self:event( ScrollMouseEvent, self.onMouseScroll )\
\9end",
                    },
                    26,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onMouseScroll = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled then\
\9\9\9local direction = event.direction\
\9\9\9local verticalVelocity = self.verticalVelocity\
\9\9\9instantaneousVelocity = verticalVelocity and verticalVelocity * exp( SCROLL_DECAY * (self.verticalVelocityTime or 0) ) or 0\
\9\9\9self.verticalVelocityTime = 0\
\9\9\9if direction * verticalVelocity > 1 then\
\9\9\9\9self.verticalVelocity = -direction * math.abs(instantaneousVelocity + direction * SCROLL_SPEED) ^ SCROLL_ACCELERATION\
\9\9\9else\
\9\9\9\9self.verticalVelocity = -direction * SCROLL_SPEED\
\9\9\9end\
\9\9\9-- self:scroll( event.direction * SCROLL_SPEED )\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    154,
                    {
                        {
                            allowsNil = false,
                            type = "ScrollMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                scrollTo = {
                    "(_C_self_passed,offsetY)",
                    {
                        "\
\9\9-- calculate the velocity required to reach a certain point\
\9\9-- see https://www.desmos.com/calculator/qis3qhbsvs for details\
\9\9-- d = vi / a * ( 1 - e ^ ln( vf / vi ) )\
\
\9\9-- it turns out that this is far easier than oeed first thought, having spent many, many hours playing with integrals...\
\9\9-- it's simply: vi = a * d + vf\
\9\9-- hence: (vi - vf)/a = d\
\9\9local deltaOffsetY = offsetY - self.offsetY\
\9\9local velocity = SCROLL_DECAY * deltaOffsetY + SPEED_CUTOFF\
\9\9self.verticalVelocity = velocity\
\9\9self.verticalVelocityTime = 0\
\9\9-- self.offsetY = self.offsetY + direction\
\9\9-- TODO: horizontal scrolling\
\9end",
                    },
                    133,
                    {
                        {
                            allowsNil = true,
                            name = "offsetY",
                        },
                    },
                    [ 6 ] = {
                        "offsetY",
                    },
                },
                initialiseCanvas = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9super()\
\
\9\9self.theme:connect( self.canvas, \"fillColour\" )\
\9end",
                    },
                    39,
                    {},
                    [ 6 ] = {},
                },
                updateWidth = {
                    "(_C_self_passed,width)",
                    {
                        "\
\9\9width = self.width\
\9\9local verticalScrollbar = self.verticalScrollbar\
\9\9if verticalScrollbar then verticalScrollbar.x = width - verticalScrollbar.width + 1 end\
\9end",
                    },
                    76,
                    {
                        {
                            allowsNil = true,
                            name = "width",
                        },
                    },
                    [ 6 ] = {
                        "width",
                    },
                },
                onInterfaceLoaded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local currentContainer = self.container\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9if childView ~= currentContainer and childView:typeOf( ScrollContainer ) then\
\9\9\9\9childView.x = 1\
\9\9\9\9childView.y = 1\
\9\9\9\9self:remove( currentContainer )\
\9\9\9\9self.container = childView\
\9\9\9\9-- self:sendToFront( self.horizontalScrollbar )\
\9\9\9\9self.verticalScrollbar:getScroller()\
\9\9\9\9self:sendToFront( self.verticalScrollbar )\
\9\9\9\9break\
\9\9\9end\
\9\9end\
\9end",
                    },
                    45,
                    {
                        {
                            allowsNil = false,
                            type = "LoadedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                updateContainerSize = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local container = self.container\
\9\9-- if container.width > self.width then\
\9\9-- else\
\9\9-- end\
\
\9\9if container.height > self.height then\
\9\9\9if not self.verticalScrollbar then\
\9\9\9\9self.verticalScrollbar = self:insert( Scrollbar( { isHorizontal = false, x = self.width - Scrollbar.width + 1, height = self.height } ) )\
\9\9\9end\
\9\9else\
\9\9\9self:remove( self.verticalScrollbar )\
\9\9end\
\9end",
                    },
                    61,
                    {},
                    [ 6 ] = {},
                },
                updateHeight = {
                    "(_C_self_passed,height)",
                    {
                        "\
\9\9height = self.height\
\9\9local verticalScrollbar = self.verticalScrollbar\
\9\9if verticalScrollbar then self.verticalScrollbar.height = height end\
\9end",
                    },
                    82,
                    {
                        {
                            allowsNil = true,
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "height",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9local verticalVelocity = self.verticalVelocity\
\9\9if verticalVelocity ~= 0 then\
\9\9\9local startTime\
\9\9\9local time = self.verticalVelocityTime\
\9\9\9local newVerticalVelocity = verticalVelocity * exp( SCROLL_DECAY * (time + deltaTime) )\
\9\9\9local distance\
\9\9\9if math.abs( newVerticalVelocity ) <= SPEED_CUTOFF then\
\9\9\9\9self.verticalVelocity = 0\
\9\9\9\9self.verticalVelocityTime = 0\
\9\9\9else\
\9\9\9\9self.verticalVelocityTime = time + deltaTime\
\9\9\9\9local currentVerticalVelocity = verticalVelocity * exp( SCROLL_DECAY * time )\
\9\9\9\9self:setOffsetY( self.offsetY + (currentVerticalVelocity - newVerticalVelocity) / SCROLL_DECAY, true )\
\9\9\9end\
\9\9end\
\9end",
                    },
                    110,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                setOffsetY = {
                    "(_C_self_passed,offsetY,isVelocity)",
                    {
                        "\
\9\9local container = self.container\
\9\9if container then\
\9\9\9local height = self.height\
\9\9\9local currentOffsetY = self.offsetY\
\9\9\9local realOffsetY = math.max( math.min( offsetY, math.max( container.height - height, 0 ) ), 0 )\
\9\9\9self.raw.offsetY = realOffsetY\
\9\9\9local verticalScrollbar = self.verticalScrollbar\
\9\9\9if verticalScrollbar then verticalScrollbar:getScroller() end\
\9\9\9if realOffsetY ~= offsetY then\
\9\9\9\9self.verticalVelocity = 0\
\9\9\9\9self.verticalVelocityTime = 0\
\9\9\9end\
\9\9\9container.y = 1 - math.floor( realOffsetY + 0.5 )\
\9\9end\
\9end",
                    },
                    92,
                    {
                        {
                            allowsNil = true,
                            name = "offsetY",
                        },
                        {
                            allowsNil = true,
                            name = "isVelocity",
                        },
                    },
                    [ 6 ] = {
                        "offsetY",
                        "isVelocity",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                horizontalScrollbar = {
                    allowsNil = false,
                    link = false,
                    type = "Scrollbar",
                    readOnly = false,
                },
                verticalVelocity = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                horizontalVelocity = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\
\
\
\
\
\
\9\
",
                },
                verticalScrollbar = {
                    allowsNil = false,
                    link = false,
                    type = "Scrollbar",
                    readOnly = false,
                },
                container = {
                    allowsNil = false,
                    link = false,
                    type = "ScrollContainer",
                    readOnly = false,
                },
                verticalVelocityTime = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
            },
        },
        className = "ScrollView",
        fileName = "/src/classes/Views/Containers/ScrollView.luo",
    },
    ScrollContainer = {
        fileEnvironment = 180,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                updateHeight = {
                    "(_C_self_passed,height)",
                    {
                        "\
\9\9self.parent:updateContainerSize()\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = true,
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "height",
                    },
                },
                updateWidth = {
                    "(_C_self_passed,width)",
                    {
                        "\
\9\9self.parent:updateContainerSize()\
\9end",
                    },
                    8,
                    {
                        {
                            allowsNil = true,
                            name = "width",
                        },
                    },
                    [ 6 ] = {
                        "width",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "ScrollContainer",
        fileName = "/src/classes/Views/Containers/ScrollContainer.luo",
    },
    MenuBar = {
        fileEnvironment = 179,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self:updateThemeStyle()\
\9end",
                        39,
                    },
                },
            },
            functions = {
                updateLayout = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local theme = self.theme\
\9\9local x = 1 + theme:value( \"leftMargin\" )\
\9\9local height = 1\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9childView.x = x\
\9\9\9x = x + childView.width\
\9\9\9height = math.max( height, childView.height )\
\9\9end\
\9\9self.height = height + 1\
\9\9self.needsLayoutUpdate = false\
\9end",
                    },
                    19,
                    {},
                    [ 6 ] = {},
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and \"default\" or \"disabled\"\
\9end",
                    },
                    12,
                    {},
                    [ 6 ] = {},
                },
                removeChild = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    49,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9if self.needsLayoutUpdate then\
\9\9\9self:updateLayout()\
\9\9end\
\9end",
                    },
                    32,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas, font = self.width, self.height, self.theme, self.canvas\
\9\9canvas:fill( theme:value( \"fillColour\" ) )\
\9\9canvas:fill( theme:value( \"separatorColour\" ), theme:value( \"separatorIsDashed\" ) and SeparatorMask( 1, height, width, 1 ) or RectangleMask( 1, height, width, 1 ) )\
\9end",
                    },
                    6,
                    {},
                    [ 6 ] = {},
                },
                insert = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    44,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                needsLayoutUpdate = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
        },
        className = "MenuBar",
        fileName = "/src/classes/Views/Containers/MenuBar.luo",
    },
    LineMask = {
        fileEnvironment = 120,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Mask",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,width,height,isFromTopLeft)",
                    {
                        "\
\9\9local pixels = {}\
\9\9local xDiff = width - 1\
\9\9local yDiff = ( isFromTopLeft and height - 1 or -height + 1 )\
\9\9if xDiff > math.abs(yDiff) then\
\9\9\9local y = isFromTopLeft and 1 or height\
\9\9\9local dy = yDiff / xDiff\
\9\9\9for x = 1, width do\
\9\9\9\9pixels[( math.floor( y + 0.5 ) - 1 ) * width + x ] = true\
\9\9\9\9y = y + dy\
\9\9\9end\
\9\9else\
\9\9\9local x = isFromTopLeft and 1 or width\
\9\9\9local dx = xDiff / yDiff\
\9\9\9for y = 1, height do\
\9\9\9\9pixels[(y - 1) * width + math.floor( x + 0.5 ) ] = true\
\9\9\9\9x = x + dx\
\9\9\9end\
\9\9end\
\
\9\9super( x, y, width, height, pixels )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isFromTopLeft",
                            defaultValue = "true ",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "width",
                        "height",
                        "isFromTopLeft",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "LineMask",
        fileName = "/src/classes/Graphics/LineMask.luo",
    },
    FatalException = {
        fileEnvironment = 95,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Exception",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "FatalException",
        fileName = "/src/classes/Exceptions/FatalException.luo",
    },
    ChildAddedInterfaceEvent = {
        fileEnvironment = 50,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_child_added\";\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\9\
",
                isSentToParents = "true\
\
\9\
\
\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,childView,container)",
                    {
                        "\
\9\9self.childView = childView\
\9\9self.container = container\
\9end",
                    },
                    15,
                    {
                        {
                            allowsNil = false,
                            type = "View",
                            name = "childView",
                        },
                        {
                            allowsNil = false,
                            type = "Container",
                            name = "container",
                        },
                    },
                    [ 6 ] = {
                        "childView",
                        "container",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                container = {
                    allowsNil = false,
                    link = false,
                    type = "Container",
                    readOnly = false,
                },
                childView = {
                    allowsNil = false,
                    link = false,
                    type = "View",
                    readOnly = false,
                },
            },
        },
        className = "ChildAddedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/ChildAddedInterfaceEvent.luo",
    },
    ListItem = {
        fileEnvironment = 177,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IDraggableView",
        },
        extends = "View",
        instance = {
            defaultValues = {
                height = "12\
\9\
",
                cursor = "ClickableCursor.static\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isSelected = {
                        "(_C_self_passed,isSelected)\
\9\9self.isSelected = isSelected\
\9\9self:updateThemeStyle()\
\9end",
                        43,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self:updateThemeStyle()\
\9end",
                        38,
                    },
                    text = {
                        "(_C_self_passed,text)\
\9\9self.text = text\
\9\9self.needsDraw = true\
\9end",
                        29,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self:event( DownMouseEvent, self.onMouseDown )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9\9self:event( HeldMouseEvent, self.onMouseHeld )\
\9end",
                    },
                    10,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and ( self.isSelected and \"selected\" or \"default\" ) or \"disabled\"\
\9end",
                    },
                    34,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isSelected and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isSelected = false\
\9\9\9if self.isEnabled and self:hitTestEvent( event ) then\
\9\9\9\9self.eventManager:handleEvent( ActionInterfaceEvent( self ) )\
\9\9\9\9local result = self.eventManager:handleEvent( event )\
\9\9\9\9",
                        {
                            " result == nil and true or result\
",
                        },
                        "\9\9\9end\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    56,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                dragDropCancelled = {
                    "(_C_self_passed,data,dragView,x,y)",
                    {
                        "\
\9end",
                    },
                    75,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "dragView",
                        "x",
                        "y",
                    },
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isSelected = not self.isSelected\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    68,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas, font = self.width, self.height, self.theme, self.canvas\
\
\9\9local leftMargin, rightMargin, topMargin, bottomMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" )\
\9\9local roundedRectangleMask = RoundedRectangleMask( 1 + leftMargin, 1 + topMargin, width - leftMargin - rightMargin, height - topMargin - bottomMargin, theme:value( \"cornerRadius\" ) )\
\9\9canvas:fill( theme:value( \"fillColour\" ), roundedRectangleMask )\
\
\9\9local leftTextMargin, rightTextMargin, topTextMargin, bottomTextMargin = theme:value( \"leftTextMargin\" ), theme:value( \"rightTextMargin\" ), theme:value( \"topTextMargin\" ), theme:value( \"bottomTextMargin\" )\
\9\9canvas:fill( theme:value( \"textColour\" ),  TextMask( leftTextMargin + 1, topTextMargin + 1, width - leftTextMargin - rightTextMargin, height - topTextMargin - bottomTextMargin, self.text, theme:value( \"font\" ) ) )\
\9end",
                    },
                    18,
                    {},
                    [ 6 ] = {},
                },
                onMouseHeld = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT and self.parent.canRearrange then\
\9\9\9self.isSelected = true\
\9\9\9self:startDragDrop( event, ListClipboardData( self ), true, function()self.isSelected = false end )\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    48,
                    {
                        {
                            allowsNil = false,
                            type = "HeldMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isSelected = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\9\
",
                },
                text = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "ListItem",
        fileName = "/src/classes/Views/Containers/List/ListItem.luo",
    },
    ListClipboardData = {
        fileEnvironment = 175,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClipboardData",
        instance = {
            defaultValues = {
                type = "\"Silica:ListItem\"\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,listItem)",
                    {
                        "\
\9\9super()\
\9\9self.listItem = listItem\
\9end",
                    },
                    7,
                    {
                        {
                            allowsNil = true,
                            name = "listItem",
                        },
                    },
                    [ 6 ] = {
                        "listItem",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                listItem = {
                    allowsNil = false,
                    link = false,
                    type = "ListItem",
                    readOnly = false,
                },
            },
        },
        className = "ListClipboardData",
        fileName = "/src/classes/Views/Containers/List/ListClipboardData.luo",
    },
    ContainerEventManager = {
        fileEnvironment = 46,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "EventManager",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                handleEvent = {
                    "(_C_self_passed,event)",
                    {
                        "\
\9\9local sender = event.sender\
\9\9local isSentToSender = not sender or ( self == sender and event.isSentToSender )\
\9\9if isSentToSender and self:handleEventPhase( event, Event.phases.BEFORE ) then\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\
\9\9if event.isSentToParents then\
\9\9\9local owner = self.owner\
\9\9\9local parent = owner.parent\
\9\9\9if parent then\
\9\9\9\9local parentEvent = parent.event\
\9\9\9\9if parent:hitTestEvent( event, owner ) then\
\9\9\9\9\9event:makeRelative( parent )\
\9\9\9\9\9if parentEvent:handleEvent( event ) then\
\9\9\9\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9\9\9\9end\
\9\9\9\9\9event:makeRelative( owner )\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9if event.isSentToChildren then\
\9\9\9local owner = self.owner\
\9\9\9local children = owner.children\
\9\9\9local eventClass = event.class\
\9\9\9for i = #children, 1, -1 do\
\9\9\9\9local childView = children[i]\
\9\9\9\9if childView then\
\9\9\9\9\9local childViewEvent = childView.event\
\9\9\9\9\9if childView:typeOf( Container ) or childViewEvent:hasConnections( eventClass ) then\
\9\9\9\9\9\9if childView:hitTestEvent( event, owner ) then\
\9\9\9\9\9\9\9event:makeRelative( childView )\
\9\9\9\9\9\9\9if childViewEvent:handleEvent( event ) then\
\9\9\9\9\9\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9\9\9\9\9\9end\
\9\9\9\9\9\9\9event:makeRelative( owner )\
\9\9\9\9\9\9else\
\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9if isSentToSender and self:handleEventPhase( event, Event.phases.AFTER ) then\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    8,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                    },
                    [ 6 ] = {
                        "event",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "ContainerEventManager",
        fileName = "/src/classes/Events/Event Managers/ContainerEventManager.luo",
    },
    ProgramOpenedInterfaceEvent = {
        fileEnvironment = 17,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_program_opened\"\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,program)",
                    {
                        "\
\9    self.program = program\
\9end",
                    },
                    6,
                    {
                        {
                            allowsNil = false,
                            type = "Program",
                            name = "program",
                        },
                    },
                    [ 6 ] = {
                        "program",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                program = {
                    allowsNil = false,
                    link = false,
                    type = "Program",
                    readOnly = false,
                },
            },
        },
        className = "ProgramOpenedInterfaceEvent",
        fileName = "/System/classes/Program Managing/ProgramOpenedInterfaceEvent.luo",
    },
    DeleteCursor = {
        fileEnvironment = 41,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Cursor",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "DeleteCursor",
        fileName = "/src/classes/Cursors/DeleteCursor.luo",
    },
    SettingsSymbol = {
        fileEnvironment = 152,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"settings\"\
\9\
",
                width = "6\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 2, 1 )\
\9\9path:lineTo( 2, 4 )\
\9\9path:lineTo( 5, 4 )\
\9\9path:lineTo( 5, 1 )\
\9\9path:lineTo( 6, 2 )\
\9\9path:lineTo( 6, 3 )\
\9\9path:lineTo( 4, 5 )\
\9\9path:lineTo( 4, 7 )\
\9\9path:lineTo( 3, 7 )\
\9\9path:lineTo( 3, 5 )\
\9\9path:lineTo( 1, 3 )\
\9\9path:lineTo( 1, 2 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    6,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "SettingsSymbol",
        fileName = "/src/classes/Symbols/SettingsSymbol.luo",
    },
    GridContainer = {
        fileEnvironment = 173,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "LayoutContainer",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    height = {
                        "(_C_self_passed,height)\
\9    super:super( height )\
\9end",
                        60,
                    },
                },
            },
            functions = {
                updateLayout = {
                    "(_C_self_passed,dontAnimate)",
                    {
                        "\
\9\9local theme = self.theme\
\9\9local leftMargin, rightMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" )\
\9\9local width, minimumCellWidth, cellHeight, children = self.width - leftMargin - rightMargin, self.minimumCellWidth, self.cellHeight, self.children\
\9\9local columnsCount = math.max( minimumCellWidth and math.floor( width / minimumCellWidth ) or 1, 1 )\
\9\9local columnWidthFloor, columnWidthCeil = math.floor( width / columnsCount ), math.ceil( width / columnsCount )\
\9\9local y = theme:value( \"topMargin\" ) + 1\
\9\9local time, easing\
\9\9if not dontAnimate then\
\9\9\9time = theme:value( \"animationDuration\" )\
\9\9\9easing = theme:value( \"animationEasing\" )\
\9\9end\
\
\9\9local i, okay, childrenLength = 1, true, #children\
\9\9for row = 1, math.ceil( childrenLength / columnsCount ) do\
\9\9\9if okay then\
\9\9\9\9local x = leftMargin\
\9\9\9\9for column = 1, columnsCount do\
\9\9\9\9\9local childView = children[i]\
\9\9\9\9\9local columnWidth = column == 1 and columnWidthCeil or columnWidthFloor\
\9\9\9\9\9if dontAnimate then\
\9\9\9\9\9\9childView.y = y\
\9\9\9\9\9\9childView.x = x\
\9\9\9\9\9\9childView.width = columnWidth\
\9\9\9\9\9\9childView.height = cellHeight\
\9\9\9\9\9else\
\9\9\9\9\9\9childView:animate( \"y\", y, time, nil, easing )\
\9\9\9\9\9\9childView:animate( \"x\", x, time, nil, easing )\
\9\9\9\9\9\9childView:animate( \"width\", columnWidth, time, nil, easing )\
\9\9\9\9\9\9childView:animate( \"height\", cellHeight, time, nil, easing )\
\9\9\9\9\9end\
\
\9\9\9\9\9x = x + columnWidth\
\9\9\9\9\9i = i + 1\
\9\9\9\9\9if i > childrenLength then\
\9\9\9\9\9\9okay = false\
\9\9\9\9\9\9break\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9y = y + cellHeight\
\9\9\9end\
\9\9end\
\
\9\9local height = math.max( y + self.theme:value( \"bottomMargin\" ), self.parent.height )\
\9\9if dontAnimate then\
\9\9\9self.height = height\
\9\9else\
\9\9\9self:animate( \"height\", height, time, nil, easing )\
\9\9end\
\
\9\9self.needsLayoutUpdate = false\
\9end",
                    },
                    7,
                    {
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "dontAnimate",
                            defaultValue = "false ",
                        },
                    },
                    [ 6 ] = {
                        "dontAnimate",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                minimumCellWidth = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                cellHeight = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\
\
\9\
",
                },
            },
        },
        className = "GridContainer",
        fileName = "/src/classes/Views/Containers/Grid/GridContainer.luo",
    },
    FontWindowContainer = {
        fileEnvironment = 172,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "WindowContainer",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialiseCanvas = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.canvas = FontWindowCanvas( self.width, self.height )\
\9\9self.backgroundObject = self.canvas:insert( Rectangle( 1, 1, self.width, self.height, Graphics.colours.WHITE ) )\
\9end",
                    },
                    6,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                backgroundObject = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
        },
        className = "FontWindowContainer",
        fileName = "/src/classes/Views/Containers/FontWindowContainer.luo",
    },
    PathMask = {
        fileEnvironment = 124,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Mask",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,path,width,height)",
                    {
                        "\
\9\9local pixels = {}\
\9\9local scaleX, scaleY = width / path.width, height / path.height\
\9\9local fill = path:getFill( scaleX, scaleY )\
\9\9super( x, y, width, height, fill )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Path",
                            name = "path",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                            defaultValue = "path.width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                            defaultValue = "path.height ",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "path",
                        "width",
                        "height",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "PathMask",
        fileName = "/src/classes/Graphics/PathMask.luo",
    },
    FlowContainer = {
        fileEnvironment = 170,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IAutomaticLayout",
            "ILockableLayout",
        },
        extends = "Container",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    width = {
                        "(_C_self_passed,width)\
\9\9super( width )\
\9\9self.needsLayoutUpdate = true\
\9end",
                        13,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self:event( ChildAddedInterfaceEvent, self.onChildAdded )\
\9\9self:event( ChildRemovedInterfaceEvent, self.onChildRemoved )\
\9\9self:event( ReadyInterfaceEvent, self.onReady )\
\9end",
                    },
                    6,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self:updateLayout( true )\
\9end",
                    },
                    18,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onChildRemoved = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    35,
                    {
                        {
                            allowsNil = false,
                            type = "ChildRemovedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onChildAdded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if event.childView:typeOf( IFlowItem ) then\
\9\9\9self.needsLayoutUpdate = true\
\9\9end\
\9end",
                    },
                    29,
                    {
                        {
                            allowsNil = false,
                            type = "ChildAddedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9if self.needsLayoutUpdate and not self.isLayoutLocked then\
\9\9\9self:updateLayout()\
\9\9end\
\9end",
                    },
                    22,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                updateLayout = {
                    "(_C_self_passed,dontAnimate)",
                    {
                        "\
\9\9local width, height, theme = self.width, self.height, self.theme\
\9\9local leftMargin, rightMargin, topMargin, bottomMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" )\
\
\9\9local children = {}\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9if childView:typeOf( IFlowItem ) then\
\9\9\9\9table.insert( children, childView )\
\9\9\9end\
\9\9end\
\
\9\9local time, easing = theme:value( \"animationDuration\" ), theme:value( \"animationEasing\" )\
\
\9\9local nChildren = #children\
\9\9local totalWidth = 0\
\9\9local minWidths = {}\
\9\9for i, childView in ipairs( children ) do\
\9\9\9totalWidth = totalWidth + childView.idealWidth\
\9\9\9minWidths[i] = childView.minWidth or 1\
\9\9end\
\
\9\9local averageWidth = math.min( math.floor( totalWidth / nChildren + 0.5 ), width - leftMargin - rightMargin )\
\9\9local maxItemsPerRow = math.floor( totalWidth / averageWidth + 0.5 )\
\9\9local idealWidth = math.floor( totalWidth / maxItemsPerRow )\
\
\9\9local y = topMargin + 1\
\
\9\9local _i = 0\
\9\9for i = 1, nChildren do\
\9\9\9if i > _i then\
\9\9\9\9local rowWidth = leftMargin + rightMargin\
\9\9\9\9local x = leftMargin + 1\
\9\9\9\9local numberOfItems = 1\
\
\9\9\9\9local totalMinWidths = 0\
\9\9\9\9local spareWidth = width - rowWidth\
\9\9\9\9for n = 1, math.min( maxItemsPerRow, nChildren - i + 1 ) do\
\9\9\9\9\9local minWidth = minWidths[i + n - 1]\
\9\9\9\9\9totalMinWidths = totalMinWidths + minWidth\
\9\9\9\9\9if totalMinWidths + rowWidth > width then\
\9\9\9\9\9\9if n == 1 then\
\9\9\9\9\9\9\9spareWidth = spareWidth - minWidth\
\9\9\9\9\9\9end\
\9\9\9\9\9\9break\
\9\9\9\9\9end\
\9\9\9\9\9numberOfItems = n\
\9\9\9\9\9spareWidth = spareWidth - minWidth\
\9\9\9\9end\
\
\9\9\9\9local itemWidth = spareWidth / numberOfItems\
\9\9\9\9_i = _i + numberOfItems\
\
\9\9\9\9local height = 1\
\9\9\9\9for n = i, _i do\
\9\9\9\9\9local childView = children[n]\
\9\9\9\9\9local width = minWidths[n] + ( n == i and math.ceil or math.floor)(itemWidth)\
\9\9\9\9\9local idealHeight = childView.idealHeight\
\9\9\9\9\9local maxWidth = childView.maxWidth\
\9\9\9\9\9width = (maxWidth and math.min( width, maxWidth ) or width)\
\9\9\9\9\9if dontAnimate then\
\9\9\9\9\9\9childView.x = x\
\9\9\9\9\9\9childView.y = y\
\9\9\9\9\9\9childView.width = width\
\9\9\9\9\9\9childView.height = idealHeight\
\9\9\9\9\9else\
\9\9\9\9\9\9childView:animate( \"x\",\9 x, time, nil, easing )\
\9\9\9\9\9\9childView:animate( \"y\",\9 y, time, nil, easing )\
\9\9\9\9\9\9childView:animate( \"width\",\9 width, time, nil, easing )\
\9\9\9\9\9\9childView:animate( \"height\",  idealHeight, time, nil, easing )\
\9\9\9\9\9end\
\9\9\9\9\9x = x + width\
\9\9\9\9\9height = math.max( idealHeight, height )\
\9\9\9\9end\
\9\9\9\9y = y + height\
\9\9\9end\
\9\9end\
\
\9\9if dontAnimate then\
\9\9\9self.height = y + bottomMargin\
\9\9else\
\9\9\9self:animate( \"height\",\9y + bottomMargin, time, nil, easing )\
\9\9end\
\9\9\
\9\9self.needsLayoutUpdate = false\
\9end",
                    },
                    39,
                    {
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "dontAnimate",
                            defaultValue = "false ",
                        },
                    },
                    [ 6 ] = {
                        "dontAnimate",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isLayoutLocked = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
                needsLayoutUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "FlowContainer",
        fileName = "/src/classes/Views/Containers/Flow/FlowContainer.luo",
    },
    ApplicationContainer = {
        fileEnvironment = 168,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {
                height = "h\
\9\
",
                width = "w\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {
                    isVisible = {
                        "(_C_self_passed)\
\9\9return self.isVisible -- View requires having a parent to be visible, but we never have a parent\
\9end",
                        196,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    theme = {
                        "(_C_self_passed,theme)\
\9\9if type( theme ) == \"string\" then error( \"To the set the theme of an ApplicationContainer using a string, use the property 'themeName', rather than 'theme'. Most likely cause: you have use theme=\\\"\" .. theme .. \"\\\" in an interface file, rather than themeName=\\\"\" .. theme .. \"\\\"\", 0 ) end\
\9\9self.theme = theme\
\9end",
                        36,
                    },
                    themeName = {
                        "(_C_self_passed,themeName)\
\9\9local oldThemeName = self.themeName\
\9\9self.themeName = themeName\
\9\9Theme.static.active = Theme.static:named( themeName )\
\9\9if oldThemeName then\
\9\9\9self.application.event:handleEvent( ThemeChangedInterfaceEvent( themeName, oldThemeName ) )\
\9\9end\
\9end",
                        45,
                    },
                    needsDraw = {
                        "(_C_self_passed,needsDraw)\
\9\9self.needsDraw = needsDraw -- View passed needsDraw to parent, but we never have a aprent\
\9end",
                        200,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self:event( DownMouseEvent, self.onMouseDownAfter, Event.phases.AFTER )\
\9\9self:event( MoveMouseEvent, self.onMouseMoveCursorBefore )\
\9end",
                    },
                    21,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                initialiseCanvas = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if Quartz then\
\9\9\9self.canvas = ScreenCanvas( self.width, self.height, self )\
\9\9else\
\9\9\9super()\
\9\9\9self.screenCanvas = ScreenCanvas( self.width, self.height, self )\
\9\9end\
\9end",
                    },
                    27,
                    {},
                    [ 6 ] = {},
                },
                dispose = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9super()\
\9\9self.application:clearFocus()\
\9end",
                    },
                    191,
                    {},
                    [ 6 ] = {},
                },
                updateCursor = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local function search( container, x, y, cursor )\
\9\9\9local children = container.children\
\9\9\9for i = #children, 1, -1 do\
\9\9\9\9local childView = children[i]\
\9\9\9\9if childView:hitTest( x, y ) then\
\9\9\9\9\9local cursor\
\9\9\9\9\9if childView:typeOf( Container ) then\
\9\9\9\9\9\9cursor = search( childView, x - childView.x + 1, y - childView.y + 1 )\
\9\9\9\9\9else\
\9\9\9\9\9\9cursor = childView.cursor\
\9\9\9\9\9end\
\9\9\9\9\9if cursor then\
\9\9\9\9\9\9return cursor\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9\9cursor = cursor or container.cursor\
\9\9\9if cursor then\
\9\9\9\9return cursor\
\9\9\9end\
\9\9end\
\
\9\9local oldCursor = self.cursor\
\9\9local newCursor = search( self, self.cursorX, self.cursorY, Cursor.static )\
\9\9local didChange = false\
\9\9if newCursor ~= oldCursor or newCursor.hasUpdatedApperance then\
\9\9\9didChange = true\
\9\9\9newCursor.hasUpdatedApperance = false\
\9\9\9if newCursor ~= oldCursor then\
\9\9\9\9self.cursor = newCursor\
\9\9\9end\
\9\9\9if Quartz then\
\9\9\9\9local image = newCursor.image\
\9\9\9\9local bridgeKeys = BridgedCursor.bridgeKeys\
\9\9\9\9Quartz.cursor = {\
\9\9\9\9\9[bridgeKeys.HOT_SPOT_X] = newCursor.hotSpotX;\
\9\9\9\9\9[bridgeKeys.HOT_SPOT_Y] = newCursor.hotSpotY;\
\9\9\9\9\9[bridgeKeys.PIXELS] = image.pixels;\
\9\9\9\9\9[bridgeKeys.WIDTH] = image.width;\
\9\9\9\9\9[bridgeKeys.HEIGHT] = image.height;\
\9\9\9\9}\
\9\9\9end\
\9\9end\
\9\9self.needsCursorUpdate = false\
\9\9",
                        {
                            " didChange\
",
                        },
                        "\9end",
                    },
                    134,
                    {},
                    [ 6 ] = {},
                },
                draw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if Quartz then\
\9\9\9if self.needsDraw then\
\9\9\9\9super()\
\9\9\9\9self.canvas:drawToScreen( term )\
\9\9\9end\
\9\9\9if self.needsCursorUpdate then\
\9\9\9\9self:updateCursor()\
\9\9\9end\
\9\9else\
\9\9\9local needsDraw, needsCursorUpdate = self.needsDraw, self.needsCursorUpdate\
\9\9\9if needsDraw or needsCursorUpdate then\
\9\9\9\9if needsCursorUpdate and not self:updateCursor() and not needsDraw then\
\9\9\9\9\9-- the cursor didn't change and we don't need to redraw children\
\9\9\9\9\9",
                        {
                            "\
",
                        },
                        "\9\9\9\9end\
\9\9\9\9local canvas, screenCanvas = self.canvas, self.screenCanvas\
\9\9\9\9if needsDraw then\
\9\9\9\9\9super()\
\9\9\9\9end\
\9\9\9\9canvas:transfer( screenCanvas )\
\9\9\9\9self.cursor:drawTo( screenCanvas, self.cursorX, self.cursorY )\
\9\9\9\9screenCanvas:drawToScreen( term )\
\9\9\9end\
\9\9end\
\9end",
                    },
                    58,
                    {},
                    [ 6 ] = {},
                },
                onMouseMoveCursorBefore = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9self.cursorX = event.x\
\9\9self.cursorY = event.y\
\9\9self.needsCursorUpdate = true\
\9\9if not Quartz then\
\9\9\9self:drawCursor()\
\9\9end\
\9end",
                    },
                    182,
                    {
                        {
                            allowsNil = false,
                            type = "MoveMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self:draw()\
\9end",
                    },
                    98,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                drawCursor = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local canvas, screenCanvas = self.canvas, self.screenCanvas\
\9\9canvas:transfer( screenCanvas )\
\9\9self.cursor:drawTo( screenCanvas, self.cursorX, self.cursorY )\
\9\9screenCanvas:drawToScreen( term )\
\9end",
                    },
                    88,
                    {},
                    [ 6 ] = {},
                },
                onMouseDownAfter = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local application = self.application\
\9\9\
\9\9if application:hasFocus() then\
\9\9\9for focus, v in pairs( application.focuses ) do\
\9\9\9\9 if focus.isFocusDismissable then\
\9\9\9\9\9application:unfocus( focus )\
\9\9\9\9 end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    108,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                needsCursorUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
                screenCanvas = {
                    allowsNil = true,
                    link = false,
                    type = "ScreenCanvas",
                    readOnly = false,
                },
                cursorX = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "6\
\9\
",
                },
                themeName = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                    defaultValue = "\"default\"\
\
\9\
",
                },
                cursorY = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "6\
\9\
",
                },
            },
        },
        className = "ApplicationContainer",
        fileName = "/src/classes/Views/Containers/ApplicationContainer.luo",
    },
    Checkbox = {
        fileEnvironment = 167,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                width = "8\
\9\
",
                height = "8\
\
\9\
",
                isEnabled = "true\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isChecked = {
                        "(_C_self_passed,isChecked)\
\9\9local wasChecked = self.isChecked\
\9\9if isChecked ~= wasChecked then\
\9\9\9self.isChecked = isChecked\
\9\9\9self:updateThemeStyle()\
\9\9\9self.eventManager:handleEvent( ActionInterfaceEvent( self ) )\
\9\9end\
\9end",
                        45,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self:updateThemeStyle()\
\9end",
                        40,
                    },
                    isPressed = {
                        "(_C_self_passed,isPressed)\
\9\9self.isPressed = isPressed\
\9\9self:updateThemeStyle()\
\9end",
                        35,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self:event( DownMouseEvent, self.onMouseDown )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9end",
                    },
                    11,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and ( self.isPressed and \"pressed\" or (self.isChecked and \"checked\" or \"default\" ) ) or ( self.isChecked and \"disabledChecked\" or \"disabled\" )\
\9end",
                    },
                    31,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\9\
\9\9if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = false\
\9\9\9if self.isEnabled then\
\9\9\9\9if self:hitTestEvent( event ) then\
\9\9\9\9\9self.isChecked = not self.isChecked\
\9\9\9\9\9",
                        {
                            " self.eventManager:handleEvent( event )\
",
                        },
                        "\9\9\9\9end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    59,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas, isPressed = self.width, self.height, self.theme, self.canvas, self.isPressed\
\
\9\9-- background shape\
\9\9local roundedRectangle = RoundedRectangleMask( 1, 1, width, height, theme:value( \"cornerRadius\" ) )\
\9\9canvas:fill( theme:value( \"fillColour\" ), roundedRectangle )\
\9\9canvas:outline( theme:value( \"outlineColour\" ), roundedRectangle, theme:value( \"outlineThickness\" ) )\
\9--\9TODO: checkbox check drawing\
\9--\9   local checkObject = Path( 2, 2, self.width - 2, self.height - 2, 1, 4 )\
\9--\9   checkObject:lineTo( 2, 5 )\
\9--\9   checkObject:lineTo( 5, 2 )\
\9--\9   checkObject:close( false )\
\9end",
                    },
                    17,
                    {},
                    [ 6 ] = {},
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = true\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    71,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isChecked = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\
\9\
",
                },
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "Checkbox",
        fileName = "/src/classes/Views/Checkbox.luo",
    },
    IHomeItem = {
        className = "IHomeItem",
        enums = {},
        isInterface = true,
        instance = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    ParentResizedInterfaceEvent = {
        fileEnvironment = 63,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_parent_resized\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "true\
\
\9\
",
                isSentToSender = "false\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,isHorizontal,isVertical,sender)",
                    {
                        "\
\9\9self.isHorizontal = isHorizontal\
\9\9self.isVertical = isVertical\
\9\9self.sender = sender\
\9end",
                    },
                    10,
                    {
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isHorizontal",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isVertical",
                        },
                        {
                            allowsNil = false,
                            type = "Container",
                            name = "sender",
                        },
                    },
                    [ 6 ] = {
                        "isHorizontal",
                        "isVertical",
                        "sender",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isVertical = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                isHorizontal = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "ParentResizedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/ParentResizedInterfaceEvent.luo",
    },
    XML = {
        fileEnvironment = 165,
        implements = {},
        lineNumber = 246,
        enums = {},
        fileName = "/src/classes/Utilities/XML.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "XML",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                fromText = {
                    "(_C_self_passed,xmlText)",
                    {
                        "\
\9\9local tokens, err = lex( xmlText )\
\9\9if not tokens then\
\9\9\9",
                        {
                            " false, err\
",
                        },
                        "\9\9end\
\
\9\9local p = parser:new( tokens )\
\9\9local blocks, data = p:parseXMLBody()\
\
\9\9if not blocks then\
\9\9\9",
                        {
                            " false, data\
",
                        },
                        "\9\9end\
\9\9if data then -- if they put a </*> in the main body\
\9\9\9",
                        {
                            " p:throw( \"unexpected '</\" .. data .. \">' in main body\" )\
",
                        },
                        "\9\9end\
\9\9",
                        {
                            " blocks\
",
                        },
                        "\9end",
                    },
                    256,
                    {
                        {
                            allowsNil = true,
                            name = "xmlText",
                        },
                    },
                    [ 6 ] = {
                        "xmlText",
                    },
                },
                fromFile = {
                    "(_C_self_passed,filePath)",
                    {
                        "\
\9\9local h = fs.open( filePath, \"r\" )\
\9\9if not h then\
\9\9\9error( \"Failed to open XML file: \" .. filePath, 0 )\
\9\9end\
\
\9\9local text = h.readAll()\
\9\9h.close()\
\9\9",
                        {
                            " XML.fromText( text )\
",
                        },
                        "\9end",
                    },
                    279,
                    {
                        {
                            allowsNil = true,
                            name = "filePath",
                        },
                    },
                    [ 6 ] = {
                        "filePath",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
    },
    Validator = {
        fileEnvironment = 164,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/src/classes/Utilities/Validator.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "Validator",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                parse = {
                    "(_C_self_passed,value,typeName)",
                    {
                        "\
\9\9-- TODO: make validator types dynamic\
\9\9if typeName:sub( #typeName - 9 ) == \".allowsNil\" then\
\9\9\9if value == \"nil\" then\
\9\9\9\9",
                        {
                            " nil, true\
",
                        },
                        "\9\9\9else\
\9\9\9\9typeName = typeName:sub( 1, #typeName - 10 )\
\9\9\9end\
\9\9end\
\9\9if typeName == \"Graphics.colours\" then\
\9\9\9",
                        {
                            " Graphics.colours[value]\
\9\9elseif typeName == \"Number\" then\
\9\9\9return tonumber( value )\
\9\9elseif typeName == \"String\" then\
\9\9\9return tostring( value )\
\9\9elseif typeName == \"Boolean\" then\
\9\9\9value = value:lower()\
\9\9\9if value == \"true\" then\
\9\9\9\9return true\
\9\9\9elseif value == \"false\" then\
\9\9\9\9return false\
\9\9\9end\
\9\9elseif typeName == \"Animation.easings\" then\
\9\9\9return Animation.easings[value]\
\9\9elseif typeName == \"Font\" then\
\9\9\9return Font.static:fromName( value )\
\9\9elseif typeName == \"Symbol\" then\
\9\9\9return Symbol.static:fromName( value )\
\9\9elseif typeName == \"Image\" then\
\9\9\9return Image.static:fromName( value )\
",
                        },
                        "\9\9else\
\9\9\9UnknownTypeValidationException( \"Unknown validation type: '\" .. typeName .. \"'\" )\
\9\9end\
\9end",
                    },
                    10,
                    {
                        {
                            allowsNil = true,
                            name = "value",
                        },
                        {
                            allowsNil = true,
                            name = "typeName",
                        },
                    },
                    [ 6 ] = {
                        "value",
                        "typeName",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
    },
    Resource = {
        fileEnvironment = 163,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/src/classes/Utilities/Resource.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    contents = {
                        "(_C_self_passed)\
\9\9local contents = self.contents\
\9\9if contents then return contents end\
\9\9contents = self.file.contents\
\9\9return contents\
\9end",
                        67,
                    },
                    binaryContents = {
                        "(_C_self_passed)\
\9\9local binaryContents = self.binaryContents\
\9\9if binaryContents then return binaryContents end\
\9\9binaryContents = self.file.binaryContents\
\9\9return binaryContents\
\9end",
                        74,
                    },
                },
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,name,mimes,category,allowDirectories)",
                    {
                        "\
\9\9if not name then error( \"Resource() requires a file name (without extension)\", 5 ) end\
\9\9if not mimes then error( \"Resource() requires a mime type (e.g. text/lua)\", 5 ) end\
\9\9if type( mimes ) == \"string\" then mimes = { mimes } end\
\9\9category = category or \"resources\"\
\9\9-- TODO: path tidying\
\9\9-- TODO: maybe do this backwards? so you can override files in other libraries\
\9\9-- search the resource tables\
\9\9local resourceTables = Application.static.resourceTables\
\9\9if #resourceTables > 0 then\
\9\9\9for i = 1, #resourceTables do\
\9\9\9\9local categoryFiles = resourceTables[i][category]\
\9\9\9\9if categoryFiles then\
\9\9\9\9\9local nameCategoryFiles = categoryFiles[name]\
\9\9\9\9\9if nameCategoryFiles then\
\9\9\9\9\9\9for i, mime in ipairs( mimes ) do\
\9\9\9\9\9\9\9local contents = nameCategoryFiles[mime]\
\9\9\9\9\9\9\9if contents and ( allowDirectories or type( contents ) ~= \"table\" ) then\
\9\9\9\9\9\9\9\9self.mime = mime\
\9\9\9\9\9\9\9\9self.contents = contents\
\9\9\9\9\9\9\9\9local binaryContents = {}\
\9\9\9\9\9\9\9\9local byte, sub = string.byte, string.sub\
\9\9\9\9\9\9\9\9for i = 1, #contents do\
\9\9\9\9\9\9\9\9\9binaryContents[i] = byte( sub( contents, i, i ) )\
\9\9\9\9\9\9\9\9end\
\9\9\9\9\9\9\9\9self.binaryContents = binaryContents\
\9\9\9\9\9\9\9\9",
                        {
                            "\
",
                        },
                        "\9\9\9\9\9\9\9end\
\9\9\9\9\9\9end\
\9\9\9\9\9else\
\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9\
\9\9local file\
\9\9for i, folder in ipairs( Application.static.resourceFolders ) do\
\9\9\9file = folder:find( name, mimes )\
\9\9\9break\
\9\9end\
\9\9\
\9\9self.file = file\
\9\9if not file then\
\9\9\9error('File not found: '..name..\" of mime \"..textutils.serialise(mimes))\
\9\9\9-- TODO: error, file not found\
\9\9end\
\9\9self.mime = file.metadata.mime\
\9end",
                    },
                    17,
                    {
                        {
                            allowsNil = true,
                            name = "name",
                        },
                        {
                            allowsNil = true,
                            name = "mimes",
                        },
                        {
                            allowsNil = true,
                            name = "category",
                        },
                        {
                            allowsNil = true,
                            name = "allowDirectories",
                        },
                    },
                    [ 6 ] = {
                        "name",
                        "mimes",
                        "category",
                        "allowDirectories",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                file = {
                    allowsNil = true,
                    link = false,
                    type = "File",
                    readOnly = false,
                },
                mime = {
                    allowsNil = false,
                    link = false,
                    type = "Metadata.mimes",
                    readOnly = false,
                },
                binaryContents = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                contents = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "Resource",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    ThumbnailIcon = {
        fileEnvironment = 160,
        enums = {},
        lineNumber = 7,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                fromFile = {
                    "(_C_self_passed,file)",
                    {
                        "\
\9\9local image = Image.static:fromFile( file )\
\9\9if image then\
\9\9\9-- the image is valid, we're good to go\
\9\9\9",
                        {
                            " ThumbnailIcon( file, image )\
",
                        },
                        "\9\9end\
\9end",
                    },
                    29,
                    {
                        {
                            allowsNil = false,
                            type = "File",
                            name = "file",
                        },
                    },
                    [ 6 ] = {
                        "file",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Icon",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    file = {
                        "(_C_self_passed,file)\
\9    self.file = file\
\9    self.alternateIcon = file.association.icon\
\9end",
                        24,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,file,image)",
                    {
                        "\
\9\9self.file = file\
\9\9self.image = image\
\
\9\9-- we need to generate the default icon's pixels, i.e. how the icon looks in the default size\
\9\9local defaultPixels = self:getScaledPixels( DEFAULT_WIDTH, DEFAULT_HEIGHT )\
\
\9\9super:super( defaultPixels, DEFAULT_WIDTH, DEFAULT_HEIGHT, image.contents ) -- go over Icon's head\
\9\9self.images = {} -- Icon requires an images table, but we don't need one\
\9end",
                    },
                    13,
                    {
                        {
                            allowsNil = false,
                            type = "File",
                            name = "file",
                        },
                        {
                            allowsNil = false,
                            type = "Image",
                            name = "image",
                        },
                    },
                    [ 6 ] = {
                        "file",
                        "image",
                    },
                },
                getScaledPixels = {
                    "(_C_self_passed,maximumWidth,maximumHeight,method)",
                    {
                        "\
\9\9size = math.floor( math.min( maximumWidth, maximumHeight ) + 0.5 )\
\
\9\9local scaledCache = self.scaledCache\
\9\9local cache = scaledCache[size]\
\9\9if cache then\
\9\9\9",
                        {
                            " cache[1]",
                            " cache[2]",
                            " cache[3]\
",
                        },
                        "\9\9end\
\
\9\9local pixels, pixelsWidth, pixelsHeight\
\9\9if size < MINIMUM_SIZE then\
\9\9\9pixels, pixelsWidth, pixelsHeight = self.alternateIcon:getScaledPixels( maximumWidth, maximumHeight, method )\
\9\9else\
\9\9\9pixels = {}\
\9\9\9local image = self.image\
\9\9\9local thumbnailSize = size - 2 * OUTLINE_SIZE\
\9\9\9local thumbnailPixels, thumbnailWidth, thumbnailHeight = image:getScaledPixels( thumbnailSize, thumbnailSize, scaleMethods.FIT )\
\
\9\9\9pixelsWidth, pixelsHeight = thumbnailWidth + 2 * OUTLINE_SIZE, thumbnailHeight + 2 * OUTLINE_SIZE\
\9\9\9local i = 1\
\9\9\9local flapX, flapY = pixelsWidth - FLAP_SIZE + 1, pixelsHeight - FLAP_SIZE + 1\
\9\9\9for y = 1, pixelsHeight do\
\9\9\9\9for x = 1, pixelsWidth do\
\9\9\9\9\9local colour\
\9\9\9\9\9local isVerticalEdge, isHorizontalEdge = y == 1 or y == pixelsHeight, x == 1 or x == pixelsWidth\
\9\9\9\9\9if isVerticalEdge and isHorizontalEdge then -- corner\
\9\9\9\9\9elseif x >= flapX and y >= flapY and not ( x == flapX and y == flapY ) then -- flap\
\9\9\9\9\9elseif isVerticalEdge or isHorizontalEdge then -- outline\
\9\9\9\9\9\9colour = GREY\
\9\9\9\9\9else\
\9\9\9\9\9\9colour = WHITE\
\9\9\9\9\9end\
\9\9\9\9\9if colour then pixels[i] = colour end\
\9\9\9\9\9i = i + 1\
\9\9\9\9end\
\9\9\9end\
\
\9\9\9i = 1\
\9\9\9for y = OUTLINE_SIZE + 1, pixelsHeight - OUTLINE_SIZE do\
\9\9\9\9for x = OUTLINE_SIZE + 1, pixelsWidth - OUTLINE_SIZE do\
\9\9\9\9\9if x < flapX or y < flapY or ( x == flapX and y == flapY ) then\
\9\9\9\9\9\9local colour = thumbnailPixels[i]\
\9\9\9\9\9\9if colour and colour ~= TRANSPARENT then\
\9\9\9\9\9\9\9pixels[(y - 1) * pixelsWidth + x] = colour\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9\9i = i + 1\
\9\9\9\9end\
\9\9\9end\
\
\9\9\9i = pixelsWidth\
\9\9\9for y = flapY, pixelsHeight do\
\9\9\9\9for x = flapX, pixelsWidth do\
\9\9\9\9\9if x ~= flapX or y ~= flapY then -- the corner\
\9\9\9\9\9\9local colour = LIGHT_GREY\
\9\9\9\9\9\9if x > i then -- past the flap\
\9\9\9\9\9\9\9break\
\9\9\9\9\9\9elseif x == i or x == flapX or y == flapY then -- diagonal line/outline\
\9\9\9\9\9\9\9colour = GREY\
\9\9\9\9\9\9end\
\9\9\9\9\9\9pixels[(y - 1) * pixelsWidth + x] = colour\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9i = i - 1\
\9\9\9end\
\9\9end\
\9\9scaledCache[size] = { pixels, pixelsWidth, pixelsHeight }\
\9\9",
                        {
                            " pixels, pixelsWidth, pixelsHeight\
",
                        },
                        "\9end",
                    },
                    37,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "maximumWidth",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "maximumHeight",
                            defaultValue = "maximumWidth",
                        },
                        {
                            allowsNil = false,
                            type = "Image.scaleMethods",
                            name = "method",
                            defaultValue = "Image.scaleMethods.FIT ",
                        },
                    },
                    [ 6 ] = {
                        "maximumWidth",
                        "maximumHeight",
                        "method",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                file = {
                    allowsNil = false,
                    link = false,
                    type = "File",
                    readOnly = false,
                },
                image = {
                    allowsNil = false,
                    link = false,
                    type = "Image",
                    readOnly = false,
                },
                alternateIcon = {
                    allowsNil = false,
                    link = false,
                    type = "Icon",
                    readOnly = false,
                },
            },
        },
        className = "ThumbnailIcon",
        fileName = "/src/classes/ThumbnailIcon.luo",
    },
    InvalidValueTypeClassException = {
        fileEnvironment = 89,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClassException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Invalid value/ValueType of property/argument: \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "InvalidValueTypeClassException",
        fileName = "/src/classes/Exceptions/Class System/InvalidValueTypeClassException.luo",
    },
    HomeTile = {
        fileEnvironment = 8,
        enums = {},
        lineNumber = 4,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IHomeItem",
        },
        extends = "Container",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9    super()\
\9    local width, height, theme, canvas = self.width, self.height, self.theme, self.canvas\
\
\9    local roundedRectangle = RoundedRectangleMask( 1, 1, width, height, theme:value( \"cornerRadius\" ) )\
\9    canvas:fill( theme:value( \"fillColour\" ), roundedRectangle )\
\9    canvas:outline( theme:value( \"outlineColour\" ), roundedRectangle, theme:value( \"outlineThickness\" ) )\
\
\9    self.shadowSize = theme:value( \"shadowSize\" )\
\9end",
                    },
                    6,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "HomeTile",
        fileName = "/System/classes/Home/HomeTile.luo",
    },
    ILockableLayout = {
        className = "ILockableLayout",
        enums = {},
        isInterface = true,
        instance = {
            functions = {},
            properties = {
                isLayoutLocked = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
            },
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    ReadyInterfaceEvent = {
        fileEnvironment = 64,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_ready\";\
\
\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ReadyInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/ReadyInterfaceEvent.luo",
    },
    FatalProgramException = {
        fileEnvironment = 2,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Exception",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "FatalProgramException",
        fileName = "/System/classes/Exceptions/FatalProgramException.luo",
    },
    DoubleClickMouseEvent = {
        fileEnvironment = 73,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"mouse_double_click\"\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "MouseEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\
\
\
\
\
\
\
\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,mouseButton,x,y,globalX,globalY)",
                    {
                        "\
\9\9self.mouseButton = mouseButton\
\9\9self.x = x\
\9\9self.y = y\
\9\9self.globalX = globalX\
\9\9self.globalY = globalY\
\9end",
                    },
                    16,
                    {
                        {
                            allowsNil = false,
                            type = "MouseEvent.mouseButtons",
                            name = "mouseButton",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "globalX",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "globalY",
                        },
                    },
                    [ 6 ] = {
                        "mouseButton",
                        "x",
                        "y",
                        "globalX",
                        "globalY",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                mouseButton = {
                    allowsNil = false,
                    link = false,
                    type = "MouseEvent.mouseButtons",
                    readOnly = false,
                },
            },
        },
        className = "DoubleClickMouseEvent",
        fileName = "/src/classes/Events/Mouse Events/DoubleClickMouseEvent.luo",
    },
    ThemeOutlet = {
        fileEnvironment = 159,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/src/classes/ThemeOutlet.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    style = {
                        "(_C_self_passed,style)\
\9\9local oldStyle = self.style\
\9\9if oldStyle ~= style then\
\9\9\9self.style = style\
\9\9\9local active, ownerClass = Theme.static.active, self.ownerClass\
\9\9\9for i, connection in pairs( self.connections ) do\
\9\9\9\9connection[1][connection[2]] = active:value( ownerClass, connection[3], style )\
\9\9\9\9self:value( connection[3], style )\
\9\9\9end\
\
\9\9\9if ownerClass:typeOf( View ) then\
\9\9\9\9self.owner.needsDraw = true\
\9\9\9elseif ownerClass:typeOf( Cursor ) then\
\9\9\9\9self.owner:updateAppearance()\
\9\9\9end\
\9\9end\
\9end",
                        78,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,owner)",
                    {
                        "\
\9\9self.owner = owner\
\9\9self.ownerClass = owner.class\
\9\9-- owner.event:connectGlobal( ThemeChangedInterfaceEvent, self.onThemeChanged, nil, self )\
\9end",
                    },
                    13,
                    {
                        {
                            allowsNil = true,
                            name = "owner",
                        },
                    },
                    [ 6 ] = {
                        "owner",
                    },
                },
                value = {
                    "(_C_self_passed,valueName,style)",
                    {
                        "\
\9\9",
                        {
                            " Theme.static.active:value( self.ownerClass, valueName, style or self.style )\
",
                        },
                        "\9end",
                    },
                    102,
                    {
                        {
                            allowsNil = true,
                            name = "valueName",
                        },
                        {
                            allowsNil = true,
                            name = "style",
                        },
                    },
                    [ 6 ] = {
                        "valueName",
                        "style",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                owner = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                connections = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\
\
\
\
\
\
\9\
",
                },
                style = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                    defaultValue = "\"default\"\
\9\
",
                },
                ownerClass = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
        },
        className = "ThemeOutlet",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    Event = {
        fileEnvironment = 48,
        implements = {},
        lineNumber = 1,
        enums = {
            phases = {
                type = "Number",
                startLine = 14,
                values = "{\
\9\9BEFORE = 1;\
\9\9AFTER = 2;\
\9}\
\
\9\
\
\
\
\9\
",
            },
        },
        fileName = "/src/classes/Events/Event.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                makeRelative = {
                    "(_C_self_passed,view)",
                    {
                        "\
\9\9self.relativeView = view\
\9end",
                    },
                    61,
                    {
                        {
                            allowsNil = true,
                            name = "view",
                        },
                    },
                    [ 6 ] = {
                        "view",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isSentToChildren = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true \
\9\
",
                },
                sender = {
                    allowsNil = false,
                    link = false,
                    type = "Instance",
                    readOnly = false,
                },
                isSentToParents = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false \
\
\9\
\9\
",
                },
                isSentToSender = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true \
\9\
",
                },
                relativeView = {
                    allowsNil = false,
                    link = false,
                    type = "View",
                    readOnly = false,
                },
            },
        },
        className = "Event",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local eventType = self.eventManagerType\
\9\9if eventType then\
\9\9\9Event.static:register( self.eventManagerType, self.class )\
\9\9end\
\9end",
                    },
                    30,
                    {},
                    [ 6 ] = {},
                },
                create = {
                    "(_C_self_passed,eventType,...)",
                    {
                        "\
\9\9if not eventType then error( \"No event type given to Event.create!\", 0 ) end\
\
\9\9local eventClass = eventClasses[eventType]\
\9\9local event\
\9\9if eventClass then\
\9\9\9event = eventClass( ... )\
\9\9else\
\9\9\9event = Event()\
\9\9end\
\9\9event.eventType = eventType\
\9\9",
                        {
                            " event\
",
                        },
                        "\9end",
                    },
                    43,
                    {
                        {
                            allowsNil = true,
                            name = "eventType",
                        },
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "eventType",
                        "...",
                    },
                },
                register = {
                    "(_C_self_passed,eventType,subclass)",
                    {
                        "\
\9\9eventClasses[eventType] = subclass\
\9end",
                    },
                    23,
                    {
                        {
                            allowsNil = true,
                            name = "eventType",
                        },
                        {
                            allowsNil = true,
                            name = "subclass",
                        },
                    },
                    [ 6 ] = {
                        "eventType",
                        "subclass",
                    },
                },
            },
            instanceVariables = {
                eventClasses = "{}\
\
\9\
",
            },
            properties = {
                eventType = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                    defaultValue = "\"\"\
\9\
",
                },
            },
        },
    },
    ClassException = {
        fileEnvironment = 86,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "FatalException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ClassException",
        fileName = "/src/classes/Exceptions/Class System/ClassException.luo",
    },
    Theme = {
        fileEnvironment = 158,
        implements = {},
        lineNumber = 1,
        enums = {},
        fileName = "/src/classes/Theme.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,themeName,cantExtend)",
                    {
                        "\
\9\9cantExtend = cantExtend or {}\
\9\9if cantExtend[themeName] then\
\9\9\9error( \"Unabled to extend with theme: \" .. themeName .. \". It is already extended higher up, which would cause recussursion.\", 0 )\
\9\9end\
\9\9\
\9\9self.name = themeName\
\
\9\9-- TODO: dynamic path resolving for interfaces and other files\
\9\9local resource = Resource( themeName, Metadata.mimes.STHEME, \"themes\" )\
\9\9local contents = resource.contents\
\9\9if contents then\
\9\9\9local nodes, err = XML.static:fromText( contents )\
\9\9\9if not nodes then\
\9\9\9\9error( \"Theme XML invaid: \" .. themeName .. \".stheme. Error: \" .. err, 0 )\
\9\9\9end\
\9\9\9cantExtend[themeName] = true\
\9\9\9local err = self:initialiseTheme( nodes[1], cantExtend )\
\9\9\9if err then\
\9\9\9\9error( \"Theme XML invaid: \" .. themeName .. \".stheme. Error: \" .. err, 0 )\
\9\9\9end\
\9\9else\
\9\9\9error( \"Theme file not found: \" .. themeName .. \".stheme\", 0 )\
\9\9end\
\
\9\9Theme.static.themes[themeName] = self\
\9end",
                    },
                    17,
                    {
                        {
                            allowsNil = true,
                            name = "themeName",
                        },
                        {
                            allowsNil = true,
                            name = "cantExtend",
                        },
                    },
                    [ 6 ] = {
                        "themeName",
                        "cantExtend",
                    },
                },
                value = {
                    "(_C_self_passed,_class,propertyName,styleName,noError)",
                    {
                        "\
\9\9if styleName == \"type\" then\
\9\9\9error( \"Reserved style name: \" .. styleName, 0 )\
\9\9end\
\9\9local allowsNilProperties = self.allowsNilProperties\
\9\9styleName = styleName or \"default\"\
\9\9local className = _class.className\
\
\9\9local err\
\9\9local classTheme = self.classes[className]\
\9\9if classTheme then\
\9\9\9local propertyTheme = classTheme[propertyName]\
\9\9\9if propertyTheme then\
\9\9\9\9local styleValue = propertyTheme[styleName] or propertyTheme[\"default\"]\
\9\9\9\9if allowsNilProperties[propertyName] or styleValue ~= nil then\
\9\9\9\9\9",
                        {
                            " styleValue\
",
                        },
                        "\9\9\9\9else\
\9\9\9\9\9err = \"Theme '\" .. self.name .. \"' does not have any definition for style: '\" .. styleName .. \"' or 'default' (of property: \" .. propertyName .. \" and of class: \" .. _class.className .. \")\"\
\9\9\9\9end\
\9\9\9else\
\9\9\9\9err = \"Theme '\" .. self.name .. \"' does not have any definitions for property: '\" .. propertyName .. \"' (of class: \" .. className .. \")\"\
\9\9\9end\
\9\9else\
\9\9\9err = \"Theme '\" .. self.name .. \"' does not have any definitions for class: '\" .. className .. \"'\"\
\9\9end\
\
\9\9-- an error occured, try to see if the value was defined for a super class\
\9\9local super = _class.super\
\9\9if super then\
\9\9\9local themeValue = self:value( super, propertyName, styleName, true )\
\9\9\9if themeValue then\
\9\9\9\9",
                        {
                            " themeValue\
",
                        },
                        "\9\9\9end\
\9\9end\
\
\9\9-- there was no value defined for a super class\
\9\9if noError then\
\9\9\9",
                        {
                            " false\
",
                        },
                        "\9\9else\
\9\9\9error( err, 4 )\
\9\9end\
\9end",
                    },
                    124,
                    {
                        {
                            allowsNil = true,
                            name = "_class",
                        },
                        {
                            allowsNil = true,
                            name = "propertyName",
                        },
                        {
                            allowsNil = true,
                            name = "styleName",
                        },
                        {
                            allowsNil = true,
                            name = "noError",
                        },
                    },
                    [ 6 ] = {
                        "_class",
                        "propertyName",
                        "styleName",
                        "noError",
                    },
                },
                initialiseTheme = {
                    "(_C_self_passed,nodes,cantExtend)",
                    {
                        "\
\9\9if not nodes then\
\9\9\9",
                        {
                            " \"Format invalid.\"\
\9\9elseif nodes.type ~= \"Theme\" then\
\9\9\9return \"Root element must be 'Theme', got '\" .. tostring( nodes.type ) .. \"'.\"\
",
                        },
                        "\9\9end\
\
\9\9local extends = nodes.attributes.extends\
\9\9local allowsNilProperties = self.allowsNilProperties\
\
\9\9local classes = {}\
\9\9if extends then\
\9\9\9local extendingTheme = Theme.static:named( extends, cantExtend )\
\9\9\9if not extendingTheme then ",
                        {
                            " \"Tried to extend a non-existant theme: \" .. extends\
\9\9\9elseif extendingTheme == self.name then return \"Tried to extend self\"",
                        },
                        " end\
\9\9\9local extendsClasses = extendingTheme.classes\
\
\9\9\9for className, classNode in pairs( extendsClasses ) do\
\9\9\9\9local classTheme = {}\
\9\9\9\9for propertyName, propertyNode in pairs( classNode ) do\
\9\9\9\9\9local propertyTheme = {}\
\9\9\9\9\9for styleName, styleValue in pairs( propertyNode ) do\
\9\9\9\9\9\9propertyTheme[styleName] = styleValue\
\9\9\9\9\9end\
\9\9\9\9\9classTheme[propertyName] = propertyTheme\
\9\9\9\9end\
\9\9\9\9classes[className] = classTheme\
\9\9\9end\
\9\9\9self.extends = extends\
\9\9end\
\
\9\9for i, classNode in ipairs( nodes.body ) do\
\9\9\9local classTheme = classes[classNode.type] or {}\
\9\9\9for i2, propertyNode in ipairs( classNode.body ) do\
\9\9\9\9local propertyTheme = classTheme[propertyNode.type] or {}\
\9\9\9\9local validationTypeName = propertyNode.attributes.type\
\9\9\9\9if validationTypeName:sub( #validationTypeName - 9 ) == \".allowsNil\"  then\
\9\9\9\9\9allowsNilProperties[propertyNode.type] = true\
\9\9\9\9end\
\9\9\9\9for styleName, styleValue in pairs( propertyNode.attributes ) do\
\9\9\9\9\9if styleName ~= \"type\" then\
\9\9\9\9\9\9local isValid, value, allowsNil = Validator.static:isValid( styleValue, validationTypeName )\
\9\9\9\9\9\9if isValid then\
\9\9\9\9\9\9\9propertyTheme[styleName] = value\
\9\9\9\9\9\9else\
\9\9\9\9\9\9\9",
                        {
                            " \"Style value '\" .. tostring( styleValue ) .. \"' is invalid for type '\" .. validationTypeName .. \"' : '\" .. styleName .. \"' (of property: \" .. propertyNode.type .. \" and of class: \" .. classNode.type .. \")\" \
",
                        },
                        "\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9classTheme[propertyNode.type] = propertyTheme\
\9\9\9end\
\9\9\9classes[classNode.type] = classTheme\
\9\9end\
\9\9self.classes = classes\
\9end",
                    },
                    60,
                    {
                        {
                            allowsNil = true,
                            name = "nodes",
                        },
                        {
                            allowsNil = true,
                            name = "cantExtend",
                        },
                    },
                    [ 6 ] = {
                        "nodes",
                        "cantExtend",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                extends = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                allowsNilProperties = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
\9\
",
                },
                name = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                classes = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
            },
        },
        className = "Theme",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                named = {
                    "(_C_self_passed,themeName,cantExtend)",
                    {
                        "\
\9\9",
                        {
                            " Theme.static.themes[themeName] or Theme( themeName, cantExtend )\
",
                        },
                        "\9end",
                    },
                    51,
                    {
                        {
                            allowsNil = true,
                            name = "themeName",
                        },
                        {
                            allowsNil = true,
                            name = "cantExtend",
                        },
                    },
                    [ 6 ] = {
                        "themeName",
                        "cantExtend",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                themes = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{} \
\
\9\
\
\
\
\
\
\9\
",
                },
                active = {
                    allowsNil = false,
                    link = false,
                    type = "Theme",
                    readOnly = false,
                },
            },
        },
    },
    TimerEvent = {
        fileEnvironment = 82,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"timer\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Event",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,timer)",
                    {
                        "\
\9\9self.timer = timer\
\9end",
                    },
                    12,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "timer",
                        },
                    },
                    [ 6 ] = {
                        "timer",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                timer = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
            },
        },
        className = "TimerEvent",
        fileName = "/src/classes/Events/System Events/TimerEvent.luo",
    },
    UpSymbol = {
        fileEnvironment = 157,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"up\"\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 4, 1 )\
\9\9path:lineTo( 7, 4 )\
\9\9path:lineTo( 5, 4 )\
\9\9path:lineTo( 5, 7 )\
\9\9path:lineTo( 3, 7 )\
\9\9path:lineTo( 3, 4 )\
\9\9path:lineTo( 1, 4 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    5,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "UpSymbol",
        fileName = "/src/classes/Symbols/UpSymbol.luo",
    },
    TreeExpandedSymbol = {
        fileEnvironment = 155,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                width = "5\
\9\
",
                symbolName = "\"treeExpanded\"\
\9\
",
                height = "3\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 1, 1 )\
\9\9path:lineTo( 3, 3 )\
\9\9path:lineTo( 5, 1 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    7,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "TreeExpandedSymbol",
        fileName = "/src/classes/Symbols/TreeExpandedSymbol.luo",
    },
    Program = {
        fileEnvironment = 11,
        implements = {},
        lineNumber = 15,
        enums = {
            configKeys = {
                type = "String",
                startLine = 47,
                values = "configKeys\
\
\
    \
",
            },
            states = {
                type = "Number",
                startLine = 28,
                values = "states\
\
    \
",
            },
            numbers = {
                type = "Number",
                startLine = 30,
                values = "{\
        ONE = EXTERNAL,\
        TWO = 2,\
        THREE = 3\
    }\
\
\9\
",
            },
        },
        fileName = "/System/classes/Program Managing/Program.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    environment = {
                        "(_C_self_passed)\
        if self.environment then return self.environment end\
\
        -- Create the environment as it doesn't exist yet\
        -- TODO: clean environment\
        self.environment = setmetatable( {}, { __index = _G } )\
        return self.environment\
    end",
                        113,
                    },
                },
                willSet = {},
                didSet = {},
                set = {
                    bundle = {
                        "(_C_self_passed,bundle)\
        self.bundle = bundle\
        local config = bundle.config\
        local bootPath = config[configKeys.BOOT_PATH]\
        local iconPath = config[configKeys.ICON_PATH]\
        local identifier = config[configKeys.IDENTIFIER]\
        if not bootPath then\
            ConfigurationFatalProgramException( \"Program bundle configuration did not specify required key '\" .. configKeys.BOOT_PATH .. \"'.\" )\
        end\
        if not identifier then\
            ConfigurationFatalProgramException( \"Program bundle configuration did not specify required key '\" .. configKeys.IDENTIFIER .. \"'.\" )\
        end\
        self.bootPath = FileSystemItem.static:tidy( bundle.path .. \"/\" .. config[configKeys.BOOT_PATH] )\
        self.identifier = identifier\
        self.icon = Icon.static:fromPathInBundle( iconPath, bundle )\
        self.title = config.title or bundle.name\
        self.config = config\
    end",
                        61,
                    },
                    title = {
                        "(_C_self_passed,title)\
        self.title = title\
        self.application.container.topBar.event:handleEvent( ProgramInformationChangedInterfaceEvent( self ) )    \
    end",
                        178,
                    },
                    status = {
                        "(_C_self_passed,status)\
        self.status = status\
        self.application.container.topBar.event:handleEvent( ProgramInformationChangedInterfaceEvent( self ) )    \
    end",
                        173,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,bundle,...)",
                    {
                        "\
        local arguments = { ... }\
        self.bundle = bundle\
        self.arguments = arguments\
        self.eventManagerQueue = { arguments }\
        self:initialiseEnvironment()\
    end",
                    },
                    50,
                    {
                        {
                            allowsNil = false,
                            type = "Bundle",
                            name = "bundle",
                        },
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "bundle",
                        "...",
                    },
                },
                focus = {
                    "(_C_self_passed)",
                    {
                        "\
        self.programView:focus( ISwitchableView )\
    end",
                    },
                    169,
                    {},
                    [ 6 ] = {},
                },
                initialiseEnvironment = {
                    "(_C_self_passed)",
                    {
                        "\
        self.environment = ProgramEnvironment( self )\
    end",
                    },
                    89,
                    {},
                    [ 6 ] = {},
                },
                queueEvent = {
                    "(_C_self_passed,...)",
                    {
                        "\
        table.insert( self.eventManagerQueue, { ... } )\
    end",
                    },
                    109,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                run = {
                    "(_C_self_passed)",
                    {
                        "\
        self.state = states.RUNNING\
        self.coroutine = coroutine.create( function()\
            local func = loadfile( self.bootPath )\
            setfenv( func, self.environment.environment )\
            func( arguments )\
        end )\
    end",
                    },
                    80,
                    {},
                    [ 6 ] = {},
                },
                update = {
                    "(_C_self_passed,redirectTerm)",
                    {
                        "\
        local eventQueue, programCoroutine, redirect = self.eventManagerQueue, self.coroutine\
        local previousTarget\
        if redirectTerm then\
            previousTarget = term.redirect( self.programView.redirect )\
        end\
        local firstEvent = eventQueue[1]\
        while self.state == states.RUNNING and firstEvent do\
            local ok, data = coroutine.resume( programCoroutine, unpack( firstEvent ) )\
\
            if coroutine.status( programCoroutine )== \"dead\" then\
                if previousTarget then\
                    term.redirect( previousTarget )\
                end\
                self.state = states.FINISHED\
                self:close()\
                log(\"Program died\")\
                log(data)\
                ",
                        {
                            "\
",
                        },
                        "            end\
\
            if ok then\
                -- TODO: not sure what filter does\
                -- self.filter = data\
            else\
                -- TODO: error handling\
                log(\"Program crashed\")\
                log(data)\
                if previousTarget then\
                    term.redirect( previousTarget )\
                end\
                -- self:throw( data )\
                ",
                        {
                            "\
",
                        },
                        "            end\
\
            table.remove( eventQueue, 1 )\
            firstEvent = eventQueue[1]\
        end\
        if previousTarget then\
            term.redirect( previousTarget )\
        end\
        if not self.hadFirstUpdate then\
            self.hadFirstUpdate = true\
            self:focus()\
        end\
    end",
                    },
                    122,
                    {
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "redirectTerm",
                            defaultValue = "true ",
                        },
                    },
                    [ 6 ] = {
                        "redirectTerm",
                    },
                },
                close = {
                    "(_C_self_passed,isForced)",
                    {
                        "\
        local state = self.state\
        local willClose = isForced or state == states.FINISHED\
        if not isForced then\
            willClose = true\
            -- TODO: probe the program and see if it can close (for 'are you sure you want to close...' dialouges)\
        end\
\
        if willClose then\
            state = states.FINISHED\
            -- self.programView:dispose()\
            self.programManager:onProgramClosed( self )\
            self.application.event:handleEvent( ProgramClosedInterfaceEvent( self ) )\
        end\
    end",
                    },
                    93,
                    {
                        {
                            allowsNil = true,
                            name = "isForced",
                        },
                    },
                    [ 6 ] = {
                        "isForced",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                coroutine = {
                    allowsNil = true,
                    link = false,
                    type = "Thread",
                    readOnly = false,
                },
                programManager = {
                    allowsNil = true,
                    link = false,
                    type = "ProgramManager",
                    readOnly = false,
                },
                arguments = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                bundle = {
                    allowsNil = false,
                    link = false,
                    type = "Bundle",
                    readOnly = false,
                },
                environment = {
                    allowsNil = false,
                    link = false,
                    type = "ProgramEnvironment",
                    readOnly = false,
                },
                hadFirstUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                icon = {
                    allowsNil = false,
                    link = false,
                    type = "Icon",
                    readOnly = false,
                },
                status = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                identifier = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                eventQueue = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                isRunning = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false \
\
\9\
",
                },
                programView = {
                    allowsNil = true,
                    link = false,
                    type = "ProgramView",
                    readOnly = false,
                },
                title = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                quartzProxy = {
                    allowsNil = true,
                    link = false,
                    type = "QuartzProxy",
                    readOnly = false,
                },
                state = {
                    allowsNil = false,
                    link = false,
                    type = "Program.states",
                    readOnly = false,
                    defaultValue = "states.UNINTIALISED\
\9\
",
                },
                bootPath = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                index = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                config = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
            },
        },
        className = "Program",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    Path = {
        fileEnvironment = 123,
        implements = {},
        lineNumber = 102,
        enums = {},
        fileName = "/src/classes/Graphics/Path.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    serialisedPath = {
                        "(_C_self_passed)\
\9\9local lines, pathCopy = self.lines, { x = self.x, y = self.y, width = self.width, height = self.height, lines = {} }\
\9\9local linesCopy = pathCopy.lines\
\
\9\9for i, line in ipairs( lines ) do\
\9\9\9local lineCopy = {}\
\9\9\9for k, v in pairs( line ) do\
\9\9\9\9lineCopy[k] = v\
\9\9\9end\
\9\9\9linesCopy[i] = lineCopy\
\9\9end\
\
\9\9return pathCopy\
\9end",
                        150,
                    },
                },
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,width,height,currentX,currentY,lines)",
                    {
                        "\
\9\9self.width = width\
\9\9self.height = height\
\9\9self.currentX = currentX\
\9\9self.currentY = currentY\
\9\9if lines then\
\9\9\9self.lines = lines\
\9\9\9self.closed = true\
\9\9end\
\9end",
                    },
                    124,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "currentX",
                            defaultValue = "1",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "currentY",
                            defaultValue = "1",
                        },
                        {
                            allowsNil = true,
                            type = "Table",
                            name = "lines",
                        },
                    },
                    [ 6 ] = {
                        "width",
                        "height",
                        "currentX",
                        "currentY",
                        "lines",
                    },
                },
                arc = {
                    "(_C_self_passed,startAngle,endAngle,radius)",
                    {
                        "\
\9\9if self.isClosed then ",
                        {
                            " false ",
                        },
                        "end\
\
\9\9local lines = self.lines\
\
\9\9local currentX, currentY = self.currentX, self.currentY\
\9\9local centreX, centreY = currentX - sin( startAngle ) * radius, currentY + cos( startAngle ) * radius\
\
\9\9local length = endAngle - startAngle\
\9\9local segments = floor( radius * abs( length ) * PI + .5 )\
\
\9\9for i = 0, segments do\
\9\9\9local angle = startAngle + length * i / segments\
\9\9\9local x, y = centreX + sin( angle ) * radius, centreY - cos( angle ) * radius\
\
\9\9\9lines[#lines + 1] = {\
\9\9\9\9mode = \"linear\";\
\9\9\9\9x1 = currentX;\
\9\9\9\9y1 = currentY;\
\9\9\9\9x2 = x;\
\9\9\9\9y2 = y;\
\9\9\9}\
\
\9\9\9currentX, currentY = x, y\
\9\9end\
\
\9\9self.currentX, self.currentY = currentX, currentY\
\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    247,
                    {
                        {
                            allowsNil = true,
                            name = "startAngle",
                        },
                        {
                            allowsNil = true,
                            name = "endAngle",
                        },
                        {
                            allowsNil = true,
                            name = "radius",
                        },
                    },
                    [ 6 ] = {
                        "startAngle",
                        "endAngle",
                        "radius",
                    },
                },
                lineTo = {
                    "(_C_self_passed,x,y)",
                    {
                        "\
\9\9if self.isClosed or not x or not y or (x == self.currentX and y == self.currentY) then ",
                        {
                            " false ",
                        },
                        "end\
\9\9local lines = self.lines\
\9\9lines[#lines + 1] = {\
\9\9\9mode = \"linear\";\
\9\9\9x1 = self.currentX;\
\9\9\9y1 = self.currentY;\
\9\9\9x2 = x;\
\9\9\9y2 = y;\
\9\9}\
\9\9self.currentX = x\
\9\9self.currentY = y\
\9\9--[[\
\9\9local pointsTable = self.points\
\9\9pointsTable[#pointsTable + 1] = false\
\9\9pointsTable[#pointsTable + 1] = false\
\9\9pointsTable[#pointsTable + 1] = { x, y }\
\9\9]]\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    172,
                    {
                        {
                            allowsNil = true,
                            name = "x",
                        },
                        {
                            allowsNil = true,
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                    },
                },
                curveTo = {
                    "(_C_self_passed,endX,endY,controlPoint1X,controlPoint1Y,controlPoint2X,controlPoint2Y)",
                    {
                        "\
\9\9if self.isClosed or not endX or not endY or not controlPoint1X or not controlPoint1Y or not controlPoint2X or not controlPoint2Y then ",
                        {
                            " false ",
                        },
                        "end\
\9\9\
\9\9self.lines[#self.lines + 1] = {\
\9\9\9mode = \"curve\";\
\9\9\9x1 = self.currentX;\
\9\9\9y1 = self.currentY;\
\9\9\9x2 = endX;\
\9\9\9y2 = endY;\
\9\9\9controlPoint1X = controlPoint1X;\
\9\9\9controlPoint1Y = controlPoint1Y;\
\9\9\9controlPoint2X = controlPoint2X;\
\9\9\9controlPoint2Y = controlPoint2Y;\
\9\9}\
\
\9\9self.currentX = endX\
\9\9self.currentY = endY\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    204,
                    {
                        {
                            allowsNil = true,
                            name = "endX",
                        },
                        {
                            allowsNil = true,
                            name = "endY",
                        },
                        {
                            allowsNil = true,
                            name = "controlPoint1X",
                        },
                        {
                            allowsNil = true,
                            name = "controlPoint1Y",
                        },
                        {
                            allowsNil = true,
                            name = "controlPoint2X",
                        },
                        {
                            allowsNil = true,
                            name = "controlPoint2Y",
                        },
                    },
                    [ 6 ] = {
                        "endX",
                        "endY",
                        "controlPoint1X",
                        "controlPoint1Y",
                        "controlPoint2X",
                        "controlPoint2Y",
                    },
                },
                close = {
                    "(_C_self_passed,linkedToEnd)",
                    {
                        "\
\9\9linkedToEnd = (linkedToEnd == nil) and true or false\
\9\9if self.isClosed then ",
                        {
                            " false ",
                        },
                        "end\
\
\9\9local lines = self.lines\
\9\9if #lines == 0 then\
\9\9\9error( \"Path has no lines!\", 2 )\
\9\9end\
\9\9local segmentStart = self.segmentStart\
\9\9if linkedToEnd and (lines[segmentStart].x1 ~= lines[#lines].x2 or lines[segmentStart].y1 ~= lines[#lines].y2) then\
\9\9\9self:lineTo( lines[segmentStart].x1, lines[segmentStart].y1 )\
\9\9end\
\9\9self.isClosed = true\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    283,
                    {
                        {
                            allowsNil = true,
                            name = "linkedToEnd",
                        },
                    },
                    [ 6 ] = {
                        "linkedToEnd",
                    },
                },
                moveTo = {
                    "(_C_self_passed,x,y)",
                    {
                        "\
\9\9local lines = self.lines\
\9\9local segmentStart = self.segmentStart\
\9\9if (lines[segmentStart].x1 ~= lines[#lines].x2 or lines[segmentStart].y1 ~= lines[#lines].y2) then\
\9\9\9self:lineTo( lines[segmentStart].x1, lines[segmentStart].y1 )\
\9\9end\
\9\9self.currentX = x\
\9\9self.currentY = y\
\9\9self.segmentStart = #lines + 1\
\9end",
                    },
                    227,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                    },
                },
                getFill = {
                    "(_C_self_passed,scaleX,scaleY)",
                    {
                        "\
\9\9local cache = self.cache\
\9\9local scaleCache = cache[scaleX .. \":\" .. scaleY]\
\9\9if scaleCache then\
\9\9\9",
                        {
                            " unpack( scaleCache )\
",
                        },
                        "\9\9end\
\9\9local intersections, outline = {}, {}\
\9\9local lines, height, width = self.lines, self.height, self.width\
\
\9\9local inverseScaleY, inverseScaleX = 1 / scaleY, 1 / scaleX\
\9\9for y = 1, height, inverseScaleY do\
\9\9\9local _y = y * scaleY\
\9\9\9intersections[_y] = {}\
\9\9\9outline[_y] = {}\
\9\9end\
\
\9\9local coefficients = {}\
\9\9local lastYs, nextYs = {}, {}\
\9\9local linesCount = #lines\
\9\9for i, line in ipairs( lines ) do\
\9\9\9if line.mode == \"linear\" then\
\9\9\9\9lastYs[i] = line.y1\
\9\9\9\9nextYs[i] = line.y2\
\9\9\9else\
\9\9\9\9local xCoefficients = bezierCoeffs( line.x1, line.controlPoint1X, line.controlPoint2X, line.x2 )\
\9\9\9\9coefficients[i] = {\
\9\9\9\9\9xCoefficients,\
\9\9\9\9\9bezierCoeffs( line.y1, line.controlPoint1Y, line.controlPoint2Y, line.y2 )\
\9\9\9\9}\
\
\9\9\9\9local t = 1 - ERROR_MARGIN\
\9\9\9\9lastYs[i] = xCoefficients[1] * t * t * t + xCoefficients[2] * t * t + xCoefficients[3] * t + xCoefficients[4]\
\9\9\9\9nextYs[i] = xCoefficients[1] * ERROR_MARGIN * ERROR_MARGIN * ERROR_MARGIN + xCoefficients[2] * ERROR_MARGIN * ERROR_MARGIN + xCoefficients[3] * ERROR_MARGIN + xCoefficients[4]\
\9\9\9end\
\9\9end\
\
\9\9for i, line in ipairs( lines ) do\
\9\9\9local x1, x2, y1, y2 = line.x1, line.x2, line.y1, line.y2\
\9\9\9local minY, maxY = min( y1, y2 ), max( y1, y2 )\
\9\9\9if line.mode == \"linear\" then\
\9\9\9\9local xDiff, yDiff = x2 - x1, y2 - y1\
\9\9\9\9for y = 1, height, inverseScaleY do\
\9\9\9\9\9local _y = y * scaleY\
\9\9\9\9\9if maxY > _y and _y >= minY then\
\9\9\9\9\9\9insert( intersections[_y], x1 + ( _y - y1 ) / yDiff * xDiff )\
\9\9\9\9\9end\
\9\9\9\9end\
\
\9\9\9\9if abs( xDiff ) > abs( yDiff ) then\
\9\9\9\9\9local y = minY\
\9\9\9\9\9for x = min( x1, x2 ), max( x1, x2 ), inverseScaleX do\
\9\9\9\9\9\9outline[floor( y1 + (x - x1) / xDiff * yDiff + 0.5 )][x * inverseScaleX] = true\
\9\9\9\9\9end\
\9\9\9\9else\
\9\9\9\9\9for y = minY, maxY, inverseScaleY do\
\9\9\9\9\9\9outline[floor( y * scaleY + 0.5 )][x1 + ( y - y1 ) / yDiff * xDiff] = true\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9else\
\9\9\9\9local xCoefficients = bezierCoeffs( x1, line.controlPoint1X, line.controlPoint2X, x2 )\
\9\9\9\9local yCoefficients = bezierCoeffs( y1, line.controlPoint1Y, line.controlPoint2Y, y2 )\
\9\9\9\9for y = 1, height, inverseScaleY do\
\9\9\9\9\9local yRoots = cubicRoots( { yCoefficients[1], yCoefficients[2], yCoefficients[3], yCoefficients[4] - y } )\
\9\9\9\9\9local yIntersections = intersections[y * scaleY]\
\9\9\9\9\9for i = 1, 3 do\
\9\9\9\9\9\9t = yRoots[i];\
\9\9\9\9\9\9if 0 - ERROR_MARGIN <= t and t <= 1 + ERROR_MARGIN then\
\9\9\9\9\9\9\9local x = xCoefficients[1] * t * t * t + xCoefficients[2] * t * t + xCoefficients[3] * t + xCoefficients[4]\
\9\9\9\9\9\9\9if not aproxEqual( y, maxY ) then\
\9\9\9\9\9\9\9\9yIntersections[#yIntersections + 1] = ( x - 1 ) * scaleX + 1\
\9\9\9\9\9\9\9end\
\9\9\9\9\9\9\9outline[floor( y * scaleY + 0.5 )][math.floor(( x - 1 ) * scaleX + 1 + 0.5 )] = true\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9local fill = {}\
\9\9local outlineFill = {}\
\9\9local scaledWidth = floor( width * scaleX + 0.5 )\
\
\9\9for y = 1, height, inverseScaleY do\
\9\9\9local _y = y * scaleY\
\9\9\9local yIntersections = intersections[_y]\
\9\9\9table.sort( yIntersections )\
\9\9\9if #yIntersections % 2 ~= 0 then\
\9\9\9\9error( \"Invalid path (uneven intersection count at y = \" .. y .. \"). This probably isn't your fault, it's most likely a bug in Silica. Please file a GitHub issue ASAP with this information:\\n\\nPath Width: \"..tostring( self.width ) .. \"\\nPath Height: \"..tostring( self.height ) .. \"\\nPath Lines: \"..tostring( textutils.serialize( self.lines ) ) .. \"\\nScale X: \"..tostring( scaleX ) .. \"\\nScale Y: \"..tostring( scaleY ) .. \"\\nIntersections: \"..tostring(textutils.serialize( intersections ) .. \"\\nOutline: \"..tostring( textutils.serialize( outline ) ) ) )\
\9\9\9end\
\
\9\9\9_y = floor( _y + 0.5 )\
\9\9\9for i = 1, #yIntersections, 2 do\
\9\9\9\9local x1, x2 = yIntersections[i], yIntersections[i + 1]\
\9\9\9\9for x = floor( x1 + 0.5), floor( x2 + 0.5 ) do\
\9\9\9\9\9fill[(_y - 1) * scaledWidth + x] = true\
\9\9\9\9end\
\9\9\9end\
\
\9\9\9for x, _ in pairs( outline[_y] ) do\
\9\9\9\9local index = (_y - 1) * scaledWidth + x\
\9\9\9\9fill[index] = true\
\9\9\9\9outlineFill[index] = true\
\9\9\9end\
\9\9end\
\
\9\9cache[scaleX .. \":\" .. scaleY] = { fill, outline }\
\9\9",
                        {
                            " fill, outline\
",
                        },
                        "\9end",
                    },
                    299,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "scaleX",
                            defaultValue = "1",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "scaleY",
                            defaultValue = "1 ",
                        },
                    },
                    [ 6 ] = {
                        "scaleX",
                        "scaleY",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isClosed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                width = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                currentX = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                currentY = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                cache = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{} \
\9\
",
                },
                segmentStart = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
                lines = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                height = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                serialisedPath = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
            },
        },
        className = "Path",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                fromSerialisedPath = {
                    "(_C_self_passed,serialisedPath)",
                    {
                        "\
\9\9",
                        {
                            " Path( serialisedPath.x, serialisedPath.y, serialisedPath.width, serialisedPath.height, 1, 1, serialisedPath.lines )\
",
                        },
                        "\9end",
                    },
                    141,
                    {
                        {
                            allowsNil = true,
                            name = "serialisedPath",
                        },
                    },
                    [ 6 ] = {
                        "serialisedPath",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
    },
    ApplicationEventManager = {
        fileEnvironment = 45,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "EventManager",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                handleEvent = {
                    "(_C_self_passed,event)",
                    {
                        "\
\9\9-- run the before phase handles first\
\9\9if self:handleEventPhase( event, Event.phases.BEFORE ) then\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\
\9\9-- start trickling the event down\
\9\9local container = self.owner.container\
\9\9if container and container.event:handleEvent( event ) then\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\
\9\9-- if nothing has killed the flow yet run the after phases\
\9\9",
                        {
                            " self:handleEventPhase( event, Event.phases.AFTER )\
",
                        },
                        "\9end",
                    },
                    8,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                    },
                    [ 6 ] = {
                        "event",
                    },
                },
                connectGlobal = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9error( \"Cannot connect global handle on ApplicationEventManager as it is the global handler. Use the class' own manager.\", 0 )\
\9end",
                    },
                    24,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                disconnectGlobal = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9error( \"Cannot disconnect global handle on ApplicationEventManager as it is the global handler. Use the handler's own manager.\", 0 )\
\9end",
                    },
                    28,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "ApplicationEventManager",
        fileName = "/src/classes/Events/Event Managers/ApplicationEventManager.luo",
    },
    ListSymbol = {
        fileEnvironment = 147,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"list\"\
\9\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 1, 1 )\
\9\9path:lineTo( 7, 1 )\
\
\9\9path:moveTo( 1, 3 )\
\9\9path:lineTo( 7, 3 )\
\
\9\9path:moveTo( 1, 5 )\
\9\9path:lineTo( 7, 5 )\
\
\9\9path:moveTo( 1, 7 )\
\9\9path:lineTo( 7, 7 )\
\
\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    8,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ListSymbol",
        fileName = "/src/classes/Symbols/ListSymbol.luo",
    },
    SearchSymbol = {
        fileEnvironment = 151,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                width = "9\
\9\
",
                symbolName = "\"search\"\
\9\
",
                height = "9\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 9, 9 )\
\9\9path:lineTo( 6, 6 )\
\9\9path:lineTo( 7, 5 )\
\9\9path:lineTo( 7, 3 )\
\9\9path:lineTo( 5, 1 )\
\9\9path:lineTo( 3, 1 )\
\9\9path:lineTo( 1, 3 )\
\9\9path:lineTo( 1, 5 )\
\9\9path:lineTo( 3, 7 )\
\9\9path:lineTo( 5, 7 )\
\9\9path:lineTo( 6, 6 )\
\9\9path:lineTo( 7, 5 )\
\9\9path:lineTo( 7, 3 )\
\9\9path:lineTo( 5, 1 )\
\9\9path:lineTo( 3, 1 )\
\9\9path:lineTo( 1, 3 )\
\9\9path:lineTo( 1, 5 )\
\9\9path:lineTo( 3, 7 )\
\9\9path:lineTo( 5, 7 )\
\9\9path:lineTo( 6, 6 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    7,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "SearchSymbol",
        fileName = "/src/classes/Symbols/SearchSymbol.luo",
    },
    MenuCloseSymbol = {
        fileEnvironment = 148,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"menuClose\"\
\9\
",
                height = "4\
\9\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 1, 4 )\
\9\9path:lineTo( 4, 1 )\
\9\9path:lineTo( 7, 4 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    9,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "MenuCloseSymbol",
        fileName = "/src/classes/Symbols/MenuCloseSymbol.luo",
    },
    Interface = {
        fileEnvironment = 138,
        implements = {},
        lineNumber = 4,
        enums = {},
        fileName = "/src/classes/Interface/Interface.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,interfaceName,extend,containerView)",
                    {
                        "\
\9\9self.name = interfaceName\
\9\9extend = extend or ApplicationContainer\
\
\9\9-- TODO: dynamic path resolving for interfaces and other files\
\9\9local resource = Resource( interfaceName, Metadata.mimes.SINTERFACE, \"interfaces\" )\
\9\9local contents = resource.contents\
\9\9if contents then\
\9\9\9local nodes, err = XML.static:fromText( contents )\
\9\9\9if not err and #nodes ~= 1 then err = \"Interfaces must only have 1 root element.\" end\
\9\9\9if not nodes or err then\
\9\9\9\9error( \"Interface XML invaid: \" .. interfaceName .. \".sinterface. Error: \" .. tostring( err ), 0 )\
\9\9\9end\
\
\9\9\9local rootNode = nodes[1]\
\9\9\9local containerClass = class.get( rootNode.type )\
\9\9\9local err\
\
\9\9\9if not containerClass then\
\9\9\9\9err = \"Container class not found: \" .. rootNode.type\
\9\9\9elseif not containerClass:typeOf( extend ) then\
\9\9\9\9err = \"Container class does not extend '\" .. extend.className .. \"': \" .. rootNode.type\
\9\9\9else\
\9\9\9\9self.containerNode = rootNode\
\9\9\9\9self:loadContainer( containerView )\
\9\9\9end\
\
\9\9\9if err then\
\9\9\9\9error( \"Interface XML invaid: \" .. interfaceName .. \".sinterface. Error: \" .. err, 0 )\
\9\9\9end\
\9\9else\
\9\9\9error( \"Interface file not found: \" .. interfaceName .. \".sinterface\", 0 )\
\9\9end\
\9end",
                    },
                    15,
                    {
                        {
                            allowsNil = true,
                            name = "interfaceName",
                        },
                        {
                            allowsNil = true,
                            name = "extend",
                        },
                        {
                            allowsNil = true,
                            name = "containerView",
                        },
                    },
                    [ 6 ] = {
                        "interfaceName",
                        "extend",
                        "containerView",
                    },
                },
                ready = {
                    "(_C_self_passed,isContainer)",
                    {
                        "\
\9\9local container = self.container\
\9\9if isContainer then\
\9\9\9container.event:handleEvent( ContainerReadyInterfaceEvent() )\
\9\9else\
\9\9\9container.event:handleEvent( ReadyInterfaceEvent() )\
\9\9end\
\9end",
                    },
                    128,
                    {
                        {
                            allowsNil = true,
                            name = "isContainer",
                        },
                    },
                    [ 6 ] = {
                        "isContainer",
                    },
                },
                loadContainer = {
                    "(_C_self_passed,containerView)",
                    {
                        "\
\9\9local loadedEvent = LoadedInterfaceEvent()\
\9\9local function loadChild( childNode, parentContainer, childView )\
\9\9\9local childClass = class.get( childNode.type )\
\9\9\9if not childClass then\
\9\9\9\9return nil, \"Class not found: \" .. childNode.type\
\9\9\9elseif not childClass:typeOf( View ) then\
\9\9\9\9return nil,\"Class does not extend 'View': \" .. childNode.type\
\9\9\9end\
\
\9\9\9childView = childView or childClass.spawn( true )\
\9\9\9if not childView then\
\9\9\9\9return nil, \"Failed to initialise \" .. childNode.type .. \". Identifier: \" .. tostring( childNode.attributes.identifier )\
\9\9\9end\
\
\9\9\9local attributes = childNode.attributes\
\9\9\9local identifier = attributes.identifier\
\9\9\9local existingIntefaceProperties = childView.interfaceProperties\
\9\9\9if identifier then\
\9\9\9\9childView.identifier = existingIntefaceProperties and ( childView.identifier or identifier ) or identifier\
\9\9\9end\
\9\9\9\9\
\9\9\9if parentContainer then\
\9\9\9\9parentContainer:insert( childView )\
\9\9\9end\
\9\9\9\
\9\9\9if existingIntefaceProperties then\
\9\9\9\9for k, v in pairs( attributes ) do\
\9\9\9\9\9if not containerInterfaceProperties or not containerInterfaceProperties[k] then -- if the interface defining THIS container specified this property then don't set it\
\9\9\9\9\9\9childView[k] = v\
\9\9\9\9\9\9existingIntefaceProperties[k] = v\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9else\
\9\9\9\9for k, v in pairs( attributes ) do\
\9\9\9\9\9childView[k] = v\
\9\9\9\9end\
\9\9\9\9childView.interfaceProperties = attributes\
\9\9\9end\
\
\9\9\9local children = {}\
\9\9\9if childNode.body and #childNode.body > 0 then\
\9\9\9\9if not childClass:typeOf( Container ) then\
\9\9\9\9\9return nil, \"Class does not extend 'Container' but has children: \" .. childNode.type\
\9\9\9\9else\
\9\9\9\9\9for i, _childNode in ipairs( childNode.body ) do\
\9\9\9\9\9\9table.insert( children, loadChild( _childNode, childView ) )\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\
\9\9\9childView.event:handleEvent( loadedEvent )\
\
\9\9\9-- check for any nil values that aren't allowed to be nil\
\9\9\9local instanceProperties = childClass.instanceProperties\
\9\9\9for k, v in pairs( childClass.instanceDefinedProperties ) do\
\9\9\9\9if not RESERVED_NAMES[v] and k == v and not instanceProperties[k][TYPETABLE_ALLOWS_NIL] then -- i.e. it's not an alias\
\9\9\9\9\9if childView[k] == nil then -- TODO: maybe this should use instance[k] so getters are called\
\9\9\9\9\9\9error( childNode.type .. \".\" .. k .. \" was nil after initialisation and LoadedInterfaceEvent, but type does not specify .allowsNil\" )\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\
\9\9\9return childView\
\9\9end\
\
\9\9local container = loadChild( self.containerNode, nil, containerView )\
\9\9self.container = container\
\9end",
                    },
                    54,
                    {
                        {
                            allowsNil = true,
                            name = "containerView",
                        },
                    },
                    [ 6 ] = {
                        "containerView",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                containerNode = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                name = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                container = {
                    allowsNil = false,
                    link = false,
                    type = "Container",
                    readOnly = false,
                },
            },
        },
        className = "Interface",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    IToolbarPressableItem = {
        className = "IToolbarPressableItem",
        enums = {},
        isInterface = true,
        instance = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    ISerialiseable = {
        className = "ISerialiseable",
        enums = {},
        isInterface = true,
        instance = {
            functions = {
                serialise = {
                    {},
                },
            },
            properties = {},
            eventHandles = {},
        },
        static = {
            functions = {
                unserialise = {
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "serialisedContent",
                        },
                    },
                },
            },
            properties = {},
            eventHandles = {},
        },
    },
    ForwardSymbol = {
        fileEnvironment = 144,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"forward\"\
\9\
",
                width = "4\
\9\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 1, 1 )\
\9\9path:lineTo( 4, 4 )\
\9\9path:lineTo( 1, 7 )\
\9\9path:close()\
\9\9\
\9\9super( path )\
\9end",
                    },
                    9,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ForwardSymbol",
        fileName = "/src/classes/Symbols/ForwardSymbol.luo",
    },
    ProgramItem = {
        fileEnvironment = 15,
        enums = {},
        lineNumber = 4,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "TopBarItem",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    program = {
                        "(_C_self_passed,program)\
        self.program = program\
        self.needsDraw = true\
        self:updateThemeStyle()\
        self:event( ProgramInformationChangedInterfaceEvent, self.onProgramInformationChanged )\
    end",
                        84,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
        super( ... )\
        self:event( EnteredInterfaceMouseEvent, self.onMouseEntered )\
        self:event( ExitedInterfaceMouseEvent, self.onMouseExited )\
        self:event( MoveMouseEvent, self.onMouseMoved )\
    end",
                    },
                    10,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        local wasPressed = true--self.isPressed\
        super( event, phase )\
        if wasPressed and self:hitTestEvent( event ) then\
            local mouseButton = event.mouseButton\
            if self.isCloseActive or mouseButton == MouseEvent.mouseButtons.MIDDLE then\
                self.program:close()\
            elseif mouseButton == MouseEvent.mouseButtons.LEFT then\
                self.program:focus()\
                self:updateThemeStyle()\
            end\
        end\
    end",
                    },
                    128,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onMouseExited = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.needsDraw = true\
        self.isCloseActive = false\
        self:updateThemeStyle()\
    end",
                    },
                    91,
                    {
                        {
                            allowsNil = false,
                            type = "ExitedInterfaceMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
        super()\
        local width, height, theme, canvas, program = self.width, self.height, self.theme, self.canvas, self.program\
\
        local leftMargin, rightMargin, topMargin, bottomMargin, iconTitleMargin, titleStatusMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" ), theme:value( \"iconTitleMargin\" ), theme:value( \"titleStatusMargin\" )\
        local maxContentWidth = width - leftMargin - rightMargin\
\
        local titleFont, statusFont = theme:value( \"titleFont\" ), theme:value( \"statusFont\" )\
        local programTitle, programStatus = program.title, program.status or \"\"\
        local titleWidth, statusWidth = titleFont:getWidth( programTitle ), statusFont:getWidth( programStatus )\
        \
        local isMouseInView, closeWidth, closeLeftMargin, closeRightMargin, closeSymbol = self.isMouseInView, 0, 0, 0\
        if isMouseInView then\
            closeLeftMargin = theme:value( \"closeLeftMargin\" )\
            closeRightMargin = theme:value( \"closeRightMargin\" )\
            closeSymbol = theme:value( \"closeSymbol\" )\
            closeWidth = closeSymbol.width\
            maxContentWidth = maxContentWidth - closeLeftMargin - closeRightMargin - closeWidth\
        end\
\
        local configs = {\
            { ICON_WIDTH + iconTitleMargin + titleWidth + titleStatusMargin + statusWidth, true, true, true };\
            { titleWidth + titleStatusMargin + statusWidth, false, true, true };\
            statusWidth > 0 and { ICON_WIDTH + iconTitleMargin + statusWidth, true, false, true } or nil;\
            { ICON_WIDTH + iconTitleMargin + titleWidth, true, true, false };\
            { titleWidth, false, true, false };\
            { ICON_WIDTH, true, false, false };\
        }\
\
        local selectedConfig\
        for i, config in ipairs( configs ) do\
            if maxContentWidth >= config[1] then\
                selectedConfig = config\
                break\
            end\
        end\
        selectedConfig = selectedConfig or configs[#configs] -- none of them fit, revert to icon\
\
        local x = math.floor( ( width - selectedConfig[1] ) / 2 ) + 1\
        -- Icon\
        if selectedConfig[2] then\
            canvas:image( program.icon, x, topMargin, ICON_WIDTH, ICON_HEIGHT )\
            x = x + ICON_WIDTH + ((selectedConfig[3] or selectedConfig[4]) and iconTitleMargin or 0)\
        end\
\
        -- Title\
        if selectedConfig[3] then\
            canvas:fill( theme:value( \"titleColour\" ), TextMask( x, 1 + topMargin, titleWidth, titleFont.height, programTitle, titleFont ) )\
            x = x + titleWidth + (selectedConfig[4] and titleStatusMargin or 0)\
        end\
\
        -- Status\
        if selectedConfig[4] then\
            canvas:fill( theme:value( \"statusColour\" ), TextMask( x, 1 + topMargin, statusWidth, statusFont.height, programStatus, statusFont ) )\
        end\
\
        -- Close button\
        if isMouseInView then\
           canvas:fill( theme:value( \"closeFillColour\" ), RectangleMask( 1, 1, leftMargin + closeLeftMargin + closeWidth + closeRightMargin, height ) )\
            canvas:fill( theme:value( \"closeSymbolColour\" ), SymbolMask( 1 + leftMargin + closeLeftMargin, 1 + math.floor( ( self.height - closeSymbol.height ) / 2 ), closeSymbol ) )\
        end\
    end",
                    },
                    17,
                    {},
                    [ 6 ] = {},
                },
                onProgramInformationChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        if self.program == event.program then\
            self.needsDraw = true\
        end\
    end",
                    },
                    122,
                    {
                        {
                            allowsNil = false,
                            type = "ProgramInformationChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onMouseEntered = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        if not self:updateIsCloseActive( event.x ) then\
            self.needsDraw = true\
        end\
    end",
                    },
                    97,
                    {
                        {
                            allowsNil = false,
                            type = "EnteredInterfaceMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
        self.theme.style = self.isCloseActive and ( self.program.programView.isFocused and ( self.isPressed and \"closePressedFocused\" or \"closeHoverFocused\" ) or ( self.isPressed and \"closePressed\" or \"closeHover\" ) ) or ( self.isPressed and \"pressed\" or ( self.program.programView.isFocused and \"focused\" or \"default\" ) )\
    end",
                    },
                    80,
                    {},
                    [ 6 ] = {},
                },
                onMouseMoved = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self:updateIsCloseActive( event.x )\
    end",
                    },
                    103,
                    {
                        {
                            allowsNil = false,
                            type = "MoveMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                updateIsCloseActive = {
                    "(_C_self_passed,x)",
                    {
                        "\
        local theme = self.theme\
        local isCloseActive = x <= theme:value( \"leftMargin\" ) + theme:value( \"closeLeftMargin\" ) + theme:value( \"closeSymbol\" ).width + theme:value( \"closeRightMargin\" )\
        if isCloseActive ~= self.isCloseActive then\
            self.isCloseActive = isCloseActive\
            self:updateThemeStyle()\
            self.needsDraw = true\
            ",
                        {
                            " true\
",
                        },
                        "        end\
        ",
                        {
                            " false\
",
                        },
                        "    end",
                    },
                    107,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                    },
                    [ 6 ] = {
                        "x",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                program = {
                    allowsNil = false,
                    link = false,
                    type = "Program",
                    readOnly = false,
                },
                isCloseActive = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
    \
",
                },
                isActive = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "ProgramItem",
        fileName = "/System/classes/Program Managing/ProgramItem.luo",
    },
    DownSymbol = {
        fileEnvironment = 143,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"down\"\
\9\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 5, 1 )\
\9\9path:lineTo( 5, 1 )\
\9\9path:lineTo( 5, 4 )\
\9\9path:lineTo( 7, 4 )\
\9\9path:lineTo( 4, 7 )\
\9\9path:lineTo( 1, 4 )\
\9\9path:lineTo( 3, 4 )\
\9\9path:lineTo( 3, 1 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    8,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "DownSymbol",
        fileName = "/src/classes/Symbols/DownSymbol.luo",
    },
    SymbolMask = {
        fileEnvironment = 131,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "PathMask",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,symbol,width,height)",
                    {
                        "\
\9\9super( x, y, symbol.path, width, height )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Symbol",
                            name = "symbol",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                            defaultValue = "symbol.width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                            defaultValue = "symbol.height ",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "symbol",
                        "width",
                        "height",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "SymbolMask",
        fileName = "/src/classes/Graphics/SymbolMask.luo",
    },
    DragMouseEvent = {
        fileEnvironment = 75,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"mouse_drag\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "MouseEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,mouseButton,x,y)",
                    {
                        "\
\9\9self.mouseButton = mouseButton\
\9\9self.x = x\
\9\9self.y = y\
\9\9self.globalX = x\
\9\9self.globalY = y\
\9end",
                    },
                    14,
                    {
                        {
                            allowsNil = false,
                            type = "MouseEvent.mouseButtons",
                            name = "mouseButton",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "mouseButton",
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                mouseButton = {
                    allowsNil = false,
                    link = false,
                    type = "MouseEvent.mouseButtons",
                    readOnly = false,
                },
            },
        },
        className = "DragMouseEvent",
        fileName = "/src/classes/Events/Mouse Events/DragMouseEvent.luo",
    },
    CloseSymbol = {
        fileEnvironment = 142,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                width = "5\
\9\
\
\
\9\
",
                symbolName = "\"close\"\
\9\
",
                height = "5\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 1, 1 )\
\9\9path:lineTo( 5, 5 )\
\9\9path:lineTo( 3, 3 )\
\9\9path:lineTo( 5, 1 )\
\9\9path:lineTo( 5, 1 )\
\9\9path:lineTo( 1, 5 )\
\9\9path:lineTo( 3, 3 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    10,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "CloseSymbol",
        fileName = "/src/classes/Symbols/CloseSymbol.luo",
    },
    BackSymbol = {
        fileEnvironment = 141,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"back\"\
\9\
",
                width = "4\
\9\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 4, 1 )\
\9\9path:lineTo( 1, 4 )\
\9\9path:lineTo( 4, 7 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    9,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "BackSymbol",
        fileName = "/src/classes/Symbols/BackSymbol.luo",
    },
    KeyboardShortcutEvent = {
        fileEnvironment = 57,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_keyboard_shortcut\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Event",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,keys)",
                    {
                        "\
\9\9self.keys = keys\
\9end",
                    },
                    12,
                    {
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "keys",
                        },
                    },
                    [ 6 ] = {
                        "keys",
                    },
                },
                matchesKeys = {
                    "(_C_self_passed,keys)",
                    {
                        "\
\9\9local eventKeys = self.keys\
\9\9for i, keyString in ipairs( keys ) do\
\9\9\9if not eventKeys[keyString] then\
\9\9\9\9",
                        {
                            " false\
",
                        },
                        "\9\9\9end\
\9\9end\
\
\9\9local eventKeysLength = 0\
\9\9for keyString, _ in pairs( eventKeys ) do\
\9\9\9eventKeysLength = eventKeysLength + 1\
\9\9end\
\
\9\9",
                        {
                            " eventKeysLength == #keys\
",
                        },
                        "\9end",
                    },
                    23,
                    {
                        {
                            allowsNil = true,
                            name = "keys",
                        },
                    },
                    [ 6 ] = {
                        "keys",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                keys = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
            },
        },
        className = "KeyboardShortcutEvent",
        fileName = "/src/classes/Events/Interface Events/KeyboardShortcutEvent.luo",
    },
    Folder = {
        fileEnvironment = 109,
        enums = {},
        lineNumber = 23,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                make = {
                    "(_C_self_passed,path,overwrite)",
                    {
                        "\
\9\9path = resolve( path )\
\9\9local exists = fs.exists( path )\
\9\9if overwrite and exists then\
\9\9\9fs.delete( path )\
\9\9\9exists = false\
\9\9end\
\
\9\9if not exists then\
\9\9\9fs.makeDir( path )\
\9\9end\
\9\9",
                        {
                            " Folder( path )\
",
                        },
                        "\9end",
                    },
                    47,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                        {
                            allowsNil = true,
                            name = "overwrite",
                        },
                    },
                    [ 6 ] = {
                        "path",
                        "overwrite",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "FileSystemItem",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {
                    io = {
                        "(_C_self_passed)\
\9\9local _io = self.io\
\9\9if _io then return _io end\
\9\9_io = {\
\9\9\9input = io.input;\
\9\9\9output = io.output;\
\9\9\9type = io.type;\
\9\9\9close = io.close;\
\9\9\9write = io.write;\
\9\9\9flush = io.flush;\
\9\9\9lines = io.lines;\
\9\9\9read = io.read;\
\9\9}\
\
\9\9function _io.open( path, ... )\
\9\9\9return io.open( resolve( path), ... )\
\9\9end\
\
\9\9self.raw.io = _io\
\9\9return _io\
\9end",
                        283,
                    },
                    items = {
                        "(_C_self_passed)\
\9\9return self:getItems( false, false )\
\9end",
                        162,
                    },
                    size = {
                        "(_C_self_passed)\
\9\9local list, getSize, isDir = fs.list, fs.getSize, fs.isDir\
\9\9local function sizeDir( path )\
\9\9\9local size = 0\
\9\9\9for i, fileName in ipairs( list( path ) ) do\
\9\9\9\9local p = path .. \"/\" .. fileName\
\9\9\9\9if isDir( p ) then\
\9\9\9\9\9size = size + sizeDir( p )\
\9\9\9\9else\
\9\9\9\9\9size = size + getSize( p )\
\9\9\9\9end\
\9\9\9end\
\9\9\9return size\
\9\9end\
\9\9return sizeDir( self.path )\
\9end",
                        97,
                    },
                    folders = {
                        "(_C_self_passed)\
\9\9return self:getItems( true, false )\
\9end",
                        170,
                    },
                    icon = {
                        "(_C_self_passed)\
\9\9local cache = self.icon\
\9\9if cache then return cache end\
\
\9\9local icon = FolderIcon.static:fromFolder( self )\
\9\9self.icon = icon\
\9\9return icon\
\9end",
                        114,
                    },
                    fs = {
                        "(_C_self_passed)\
\9\9local _fs = self.fs\
\9\9if _fs then return _fs end\
\9\9_fs = {\
\9\9\9combine = fs.combine;\
\9\9\9getDir = fs.getDir;\
\9\9\9getName = fs.getName;\
\9\9\9getDrive = fs.getDrive;\
\9\9}\
\
\9\9local relativePath = self.path\
\9\9local function resolve( path )\
\9\9\9return relativePath .. tidy( \"/\" .. path )\
\9\9end\
\
\9\9local resolvefunctions = { \"list\"; \"exists\"; \"isDir\"; \"isReadOnly\"; \"getSize\"; \"getFreeSpace\"; \"makeDir\"; \"delete\"; \"open\"; \"find\"; } -- TODO: will find will work\
\9\9for i, name in ipairs( resolvefunctions ) do\
\9\9\9local func = fs[name]\
\9\9\9_fs[name] = function ( path, ... )\
\9\9\9\9path = path and resolve( path ) or path\
\9\9\9\9return func( path, ... )\
\9\9\9end\
\9\9end\
\
\9\9local doubleResolvefunctions = { \"copy\"; \"move\"; }\
\9\9for i, name in ipairs( doubleResolvefunctions ) do\
\9\9\9local func = fs[name]\
\9\9\9_fs[name] = function ( fromPath, toPath, ... )\
\9\9\9\9return func( resolve( fromPath ), resolve( toPath ), ... )\
\9\9\9end\
\9\9end\
\
\9\9-- function _fs.combine( partial, path, ... )\
\9\9--\9   return fs.combine( partial, resolve( path), ... )\
\9\9-- end\
\
\9\9self.raw.fs = _fs\
\9\9return _fs\
\9end",
                        243,
                    },
                    files = {
                        "(_C_self_passed)\
\9\9return self:getItems( false, true )\
\9end",
                        166,
                    },
                    openIcon = {
                        "(_C_self_passed)\
\9\9local cache = self.openIcon\
\9\9if cache then return cache end\
\
\9\9local openIcon = FolderIcon.static:fromFolder( self, true )\
\9\9self.openIcon = openIcon\
\9\9return openIcon\
\9end",
                        123,
                    },
                },
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                find = {
                    "(_C_self_passed,name,mimes,noSubfolders)",
                    {
                        "\
\9\9local items = self.items\
\9\9local folders = {}\
\9\9if type( mimes ) == \"string\" then mimes = { mimes } end\
\9\9for i, fileSystemItem in ipairs( items ) do\
\9\9\9if fileSystemItem:typeOf( IEditableFileSystemItem ) then\
\9\9\9\9if --[[(]] name == fileSystemItem.name --[[ or name == fileSystemItem.fullName )]] then\
\9\9\9\9\9local mime = fileSystemItem.metadata.mime\
\9\9\9\9\9for i, _mime in ipairs( mimes ) do\
\9\9\9\9\9\9if _mime == mime then\
\9\9\9\9\9\9\9",
                        {
                            " fileSystemItem\
",
                        },
                        "\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9\9if not noSubfolders and fileSystemItem:typeOf( Folder ) then\
\9\9\9\9-- look through folders last\
\9\9\9\9table.insert( folders, fileSystemItem )\
\9\9\9end\
\9\9end\
\
\9\9for i, folder in ipairs( folders ) do\
\9\9\9local found = folder:find( name, mimes )\
\9\9\9if found then\
\9\9\9\9",
                        {
                            " found\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    193,
                    {
                        {
                            allowsNil = true,
                            name = "name",
                        },
                        {
                            allowsNil = true,
                            name = "mimes",
                        },
                        {
                            allowsNil = true,
                            name = "noSubfolders",
                        },
                    },
                    [ 6 ] = {
                        "name",
                        "mimes",
                        "noSubfolders",
                    },
                },
                getItems = {
                    "(_C_self_passed,noFiles,noFolders)",
                    {
                        "\
\9\9local items = {}\
\9\9local path = self.path\
\9\9for i, name in ipairs( fs.list( path ) ) do\
\9\9\9if name ~= \".DS_Store\" and name ~= \".metadata\" then\
\9\9\9\9local item = FileSystemItem( path .. \"/\" .. name, self )\
\9\9\9\9if not ( noFolders and noFolders ) or ( noFiles and not item:typeOf( IEditableFileSystemItem ) ) or ( noFolders and not item:typeOf( Folder ) ) then\
\9\9\9\9\9table.insert( items, item )\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " items\
",
                        },
                        "\9end",
                    },
                    148,
                    {
                        {
                            allowsNil = true,
                            name = "noFiles",
                        },
                        {
                            allowsNil = true,
                            name = "noFolders",
                        },
                    },
                    [ 6 ] = {
                        "noFiles",
                        "noFolders",
                    },
                },
                itemFromPath = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9",
                        {
                            " FileSystemItem( self.path .. tidy( \"/\" .. path ) )\
",
                        },
                        "\9end",
                    },
                    174,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
                fileFromPath = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9",
                        {
                            " File( self.path .. tidy( \"/\" .. path ) )\
",
                        },
                        "\9end",
                    },
                    178,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
                makeSubfolder = {
                    "(_C_self_passed,path,overwrite)",
                    {
                        "\
\9\9",
                        {
                            " Folder.static:make( self.path .. tidy( \"/\" .. path ), overwrite )\
",
                        },
                        "\9end",
                    },
                    136,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "path",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "overwrite",
                            defaultValue = "false ",
                        },
                    },
                    [ 6 ] = {
                        "path",
                        "overwrite",
                    },
                },
                serialise = {
                    "(_C_self_passed,flatten,metadataProperties)",
                    {
                        "\
\9\9local allItems = {}\
\
\9\9local path = self.path\
\9\9for i, name in ipairs( fs.list( path ) ) do\
\9\9\9local item = FileSystemItem( path .. \"/\" .. name, self )\
\9\9\9if item then\
\9\9\9\9local itemName = item.name\
\9\9\9\9local isFolder = item:typeOf( Folder )\
\9\9\9\9if not isFolder or not flatten then\
\9\9\9\9\9if flatten and allItems[flatten and itemName or name] then\
\9\9\9\9\9\9allItems[flatten and itemName or name][item.metadata.mime] = item.contents\
\9\9\9\9\9else\
\9\9\9\9\9\9allItems[flatten and itemName or name] = flatten and {[item.metadata.mime] = item.contents} or { isFolder and {} or item.contents, item.metadata:serialise( metadataProperties ) }\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9if isFolder then\
\9\9\9\9\9local subItems = item:serialise( flatten, metadataProperties )\
\9\9\9\9\9if flatten and not item:typeOf( Bundle ) then\
\9\9\9\9\9\9for k, subItem in pairs( subItems ) do\
\9\9\9\9\9\9\9-- if flatten then\
\9\9\9\9\9\9\9\9allItems[k] = subItem--{ subItem., item.metadata:serialise() }\
\9\9\9\9\9\9\9-- else\
\9\9\9\9\9\9\9\9-- allItems[name][1][subItem.fullName] = { item, item.metadata:serialise() }\
\9\9\9\9\9\9\9-- end\
\9\9\9\9\9\9end\
\9\9\9\9\9else\
\9\9\9\9\9\9allItems[name][1] = subItems\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9",
                        {
                            " allItems\
",
                        },
                        "\9end",
                    },
                    61,
                    {
                        {
                            allowsNil = true,
                            name = "flatten",
                        },
                        {
                            allowsNil = true,
                            name = "metadataProperties",
                        },
                    },
                    [ 6 ] = {
                        "flatten",
                        "metadataProperties",
                    },
                },
                package = {
                    "(_C_self_passed,path,overwrite,isResourcePackage)",
                    {
                        "\
\9\9",
                        {
                            " Package.static:make( path, overwrite, self, isResourcePackage )\
",
                        },
                        "\9end",
                    },
                    305,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                        {
                            allowsNil = true,
                            name = "overwrite",
                        },
                        {
                            allowsNil = true,
                            name = "isResourcePackage",
                        },
                    },
                    [ 6 ] = {
                        "path",
                        "overwrite",
                        "isResourcePackage",
                    },
                },
                findAll = {
                    "(_C_self_passed,mime,noSubfolders)",
                    {
                        "\
\9\9local found = {}\
\9\9local n = 1\
\9\9for i, fileSystemItem in ipairs( self.items ) do\
\9\9\9if not noSubfolders and fileSystemItem:typeOf( Folder ) then\
\9\9\9\9for i, item in ipairs( fileSystemItem:findAll( mime ) ) do\
\9\9\9\9\9found[n] = item\
\9\9\9\9\9n = n + 1\
\9\9\9\9end\
\9\9\9end\
\9\9\9if fileSystemItem.metadata.mime == mime then\
\9\9\9\9found[n] = fileSystemItem\
\9\9\9\9n = n + 1\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " found\
",
                        },
                        "\9end",
                    },
                    225,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "mime",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "noSubfolders",
                            defaultValue = "false ",
                        },
                    },
                    [ 6 ] = {
                        "mime",
                        "noSubfolders",
                    },
                },
                folderFromPath = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9",
                        {
                            " Folder( self.path .. tidy( \"/\" .. path ) )\
",
                        },
                        "\9end",
                    },
                    182,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
                makeSubfile = {
                    "(_C_self_passed,path,mime,overwrite,contents)",
                    {
                        "\
\9\9",
                        {
                            " File.static:make( self.path .. tidy( \"/\" .. path ), mime, overwrite, contents )\
",
                        },
                        "\9end",
                    },
                    144,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "path",
                        },
                        {
                            allowsNil = false,
                            type = "Metadata.mimes",
                            name = "mime",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "overwrite",
                            defaultValue = "false",
                        },
                        {
                            allowsNil = true,
                            type = "String",
                            name = "contents",
                        },
                    },
                    [ 6 ] = {
                        "path",
                        "mime",
                        "overwrite",
                        "contents",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                items = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = true,
                },
                openIcon = {
                    allowsNil = true,
                    link = false,
                    type = "Any",
                    readOnly = true,
                },
                folders = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = true,
                },
                io = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = true,
                },
                fs = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = true,
                },
                files = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = true,
                },
                allItems = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = true,
                },
            },
        },
        className = "Folder",
        fileName = "/src/classes/File System/Folder.luo",
    },
    ConstructionClassException = {
        fileEnvironment = 87,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClassException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Error occured during class construction: \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "ConstructionClassException",
        fileName = "/src/classes/Exceptions/Class System/ConstructionClassException.luo",
    },
    LeftSymbol = {
        fileEnvironment = 146,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"left\"\
\9\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 4, 1 )\
\9\9path:lineTo( 4, 3 )\
\9\9path:lineTo( 7, 3 )\
\9\9path:lineTo( 7, 5 )\
\9\9path:lineTo( 4, 5 )\
\9\9path:lineTo( 4, 7 )\
\9\9path:lineTo( 1, 4 )\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    8,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "LeftSymbol",
        fileName = "/src/classes/Symbols/LeftSymbol.luo",
    },
    Image = {
        fileEnvironment = 137,
        implements = {},
        lineNumber = 448,
        enums = {
            ucgValues = {
                type = "Number",
                startLine = 457,
                values = "ucgValues\
\9\
",
            },
            scaleMethods = {
                type = "Number",
                startLine = 458,
                values = "scaleMethods\
\
\
\9\
",
            },
        },
        fileName = "/src/classes/Image.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    pixels = {
                        "(_C_self_passed,pixels)\
\9\9self.pixels = pixels\
\9\9\
\9\9local scaledCache, width, height = {}, self.width, self.height\
\9\9for k, v in pairs( scaleMethods ) do\
\9\9\9scaledCache[v .. \":\" .. width .. \":\" .. height] = { pixels, width, height };\
\9\9end\
\9\9self.scaledCache = scaledCache\
\9end",
                        1036,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,pixels,width,height,contents)",
                    {
                        "\
\9\9local newPixels = {}\
\9\9local maxLength = width * height\
\9\9for i, pixel in pairs( pixels ) do\
\9\9\9if i > maxLength then\
\9\9\9\9error( \"Image pixels must fit the given size\" )\
\9\9\9end\
\9\9\9newPixels[i] = pixel\
\9\9end\
\9\9self.width = width\
\9\9self.height = height\
\9\9self.pixels = newPixels\
\9\9self.contents = contents\
\9end",
                    },
                    461,
                    {
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "pixels",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = true,
                            type = "Any",
                            name = "contents",
                        },
                    },
                    [ 6 ] = {
                        "pixels",
                        "width",
                        "height",
                        "contents",
                    },
                },
                toPaintFormat = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local pixels = self.pixels\
\9\9local paintFormat = \"\"\
\9\9local width, height = self.width, self.height\
\9\9local i, n = 1, 1\
\9\9local t = {}\
\9\9for y = 1, height do\
\9\9\9for x = 1, width do\
\9\9\9\9t[n] = getHexOf( pixels[i] )\
\9\9\9\9i = i + 1\
\9\9\9\9n = n + 1\
\9\9\9end\
\9\9\9t[n] = \"\\n\"\
\9\9\9n = n + 1\
\9\9end\
\
\9\9",
                        {
                            " table.concat( t )\
",
                        },
                        "\9end",
                    },
                    554,
                    {},
                    [ 6 ] = {},
                },
                getScaledPixels = {
                    "(_C_self_passed,maximumWidth,maximumHeight,method)",
                    {
                        "\
\9\9maximumWidth = math.floor( maximumWidth + 0.5 )\
\9\9maximumHeight = math.floor( maximumHeight + 0.5 )\
\
\9\9local scaledCache = self.scaledCache\
\9\9local cache = scaledCache[method .. \":\" .. maximumWidth .. \":\" .. maximumHeight]\
\9\9if cache then\
\9\9\9",
                        {
                            " cache[1]",
                            " cache[2]",
                            " cache[3]\
",
                        },
                        "\9\9end\
\
\9\9local width, height, pixels = self.width, self.height, self.pixels\
\9\9local pixelsWidth, pixelsHeight = maximumWidth, maximumHeight\
\
\9\9local scaledPixels = {}\
\9\9local widthRatio = width / maximumWidth\
\9\9local heightRatio = height / maximumHeight\
\9\9local ceil = math.ceil\
\
\9\9local isFit, isCover = method == scaleMethods.FIT, method == scaleMethods.COVER\
\
\9\9if isFit or isCover then\
\9\9\9local ratio\
\9\9\9if isFit then\
\9\9\9\9ratio = math.max( widthRatio, heightRatio )\
\9\9\9else\
\9\9\9\9ratio = math.min( widthRatio, heightRatio )\
\9\9\9end\
\
\9\9\9widthRatio, heightRatio = ratio, ratio\
\9\9\9pixelsWidth, pixelsHeight = math.floor( width / ratio + 0.5 ), math.floor( height / ratio + 0.5 )\
\9\9end\
\
\9\9local i = 1\
\9\9for y = 1, pixelsHeight do\
\9\9\9for x = 1, pixelsWidth do\
\9\9\9\9scaledPixels[i] = pixels[ ceil( y * heightRatio - 1 ) * width + ceil( x * widthRatio ) ]\
\9\9\9\9i = i + 1\
\9\9\9end\
\9\9end\
\
\9\9scaledCache[method .. \":\" .. maximumWidth .. \":\" .. maximumHeight] = { scaledPixels, pixelsWidth, pixelsHeight }\
\
\9\9",
                        {
                            " scaledPixels, pixelsWidth, pixelsHeight\
",
                        },
                        "\9end",
                    },
                    1053,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "maximumWidth",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "maximumHeight",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "method",
                            defaultValue = "2 ",
                        },
                    },
                    [ 6 ] = {
                        "maximumWidth",
                        "maximumHeight",
                        "method",
                    },
                },
                copy = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9",
                        {
                            " Image( self.pixels, self.width, self.height, self.contents )\
",
                        },
                        "\9end",
                    },
                    1169,
                    {},
                    [ 6 ] = {},
                },
                appendImage = {
                    "(_C_self_passed,appendingImage,x,y)",
                    {
                        "\
\9\9local appendingWidth, appendingHeight, appendingPixels = appendingImage.width, appendingImage.height, appendingImage.pixels\
\9\9",
                        {
                            " self:appendPixels( appendingPixels, appendingWidth, appendingHeight, x, y )\
",
                        },
                        "\9end",
                    },
                    1104,
                    {
                        {
                            allowsNil = false,
                            type = "Image",
                            name = "appendingImage",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "appendingImage",
                        "x",
                        "y",
                    },
                },
                appendPixels = {
                    "(_C_self_passed,appendingPixels,appendingWidth,appendingHeight,x,y)",
                    {
                        "\
\9\9local selfWidth, selfHeight, selfPixels = self.width, self.height, self.pixels\
\9\9local xLimit, yLimit = math.min( selfWidth, appendingWidth + x - 1 ), math.min( selfHeight, appendingHeight + y - 1 )\
\9\9for _y = y, yLimit do\
\9\9\9for _x = x, xLimit do\
\9\9\9\9local appendingPixel = appendingPixels[(_y - y) * appendingWidth + (_x - x + 1)]\
\9\9\9\9if appendingPixel and appendingPixel ~= TRANSPARENT then\
\9\9\9\9\9selfPixels[(_y - 1) * selfWidth + _x] = appendingPixel\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9self.pixels = selfPixels\
\9end",
                    },
                    1109,
                    {
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "appendingPixels",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "appendingWidth",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "appendingHeight",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "appendingPixels",
                        "appendingWidth",
                        "appendingHeight",
                        "x",
                        "y",
                    },
                },
                toUniversalCompressedGraphics = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local w, h = self.width, self.height\
\9\9local pixels = self.pixels\
\
\
\9\9-- load the pixels in to the table format ardera's code uses\
\9\9local tImage = {}\
\9\9local i = 1\
\9\9for y = 1, h do\
\9\9\9local row = {}\
\9\9\9for x = 1, w do\
\9\9\9\9row[x] = pixels[i]\
\9\9\9\9i = i + 1\
\9\9\9end\
\9\9\9tImage[y] = row\
\9\9end\
\
\9\9-- Henceforth is ardera's code from libimg v1.2.7\
\
\9\9-- first, count colors\
\9\9local colorCounter={}\9\9\9\9-- stores the amount of pixels per color (index = color code; value = pixels using it)\
\9\9local lengthsCounter={}\9\9\9\9-- counts the uses of different lengths\
\9\9\
\9\9local numPixels=0\9\9\9\9\9-- number of colored pixels\
\9\9local numColors=0\9\9\9\9\9-- number of used colors\
\9\9local numLengths=0\9\9\9\9\9-- numbers of used lengths\
\9\9\
\9\9local simpleColorCodes={}\9\9\9-- the used huffman tree if numColors is less or equal 1\
\9\9local simpleLengthCodes={}\
\9\9\
\9\9local lengthImage={}\
\9\9\
\9\9if not w then\
\9\9\9w = 0\
\9\9\9for a = 1, #tImage do\
\9\9\9\9w = math.max(w, #tImage[a])\
\9\9\9end\
\9\9end\
\9\9if not h then\
\9\9\9h = #tImage\
\9\9end\
\9\9\
\9\9local color, colorBefore, length, imageLine, lengthImageLine\
\9\9for y=1, #tImage do\
\9\9\9imageLine = tImage[y]\
\9\9\9\
\9\9\9lengthImage[y] = {}\
\9\9\9lengthImageLine = lengthImage[y]\
\9\9\9\
\9\9\9colorBefore, length = nil, nil\
\9\9\9for x=1, w do\
\9\9\9\9color = imageLine[x] or 0\
\9\9\9\9\
\9\9\9\9if length == nil then\
\9\9\9\9\9colorBefore = color\
\9\9\9\9\9length = 0\
\9\9\9\9end\
\9\9\9\9\
\9\9\9\9if color == colorBefore then\
\9\9\9\9\9length = length +1\
\9\9\9\9else\
\9\9\9\9\9if not lengthsCounter[length] then\
\9\9\9\9\9\9if numLengths < 2 then\
\9\9\9\9\9\9\9simpleLengthCodes[length]={numLengths}\
\9\9\9\9\9\9end\
\9\9\9\9\9\9numLengths = numLengths +1\
\9\9\9\9\9end\
\9\9\9\9\9lengthImageLine[#lengthImageLine+1]={c=colorBefore, l=length}\
\9\9\9\9\9lengthsCounter[length] = (lengthsCounter[length] or 0) +1\
\9\9\9\9\9\
\9\9\9\9\9if not colorCounter[colorBefore] then\
\9\9\9\9\9\9if numColors < 2 then\
\9\9\9\9\9\9\9simpleColorCodes[colorBefore] = {numColors}\
\9\9\9\9\9\9end\
\9\9\9\9\9\9numColors = numColors +1\
\9\9\9\9\9end\
\9\9\9\9\9colorCounter[colorBefore] = (colorCounter[colorBefore] or 0) +1\
\9\9\9\9\9\
\9\9\9\9\9length = 1\
\9\9\9\9\9colorBefore = color\
\9\9\9\9end\
\9\9\9\9numPixels = numPixels +1\
\9\9\9end\
\9\9\9\
\9\9\9if not lengthsCounter[length] then\
\9\9\9\9if numLengths < 2 then\
\9\9\9\9\9simpleLengthCodes[length] = {numLengths}\
\9\9\9\9end\
\9\9\9\9numLengths = numLengths +1\
\9\9\9end\
\9\9\9lengthImageLine[#lengthImageLine+1]={c=colorBefore, l=length}\
\9\9\9lengthsCounter[length] = (lengthsCounter[length] or 0) +1\
\9\9\9\
\9\9\9if not colorCounter[colorBefore] then\
\9\9\9\9if numColors < 2 then\
\9\9\9\9\9simpleColorCodes[colorBefore] = {numColors}\
\9\9\9\9end\
\9\9\9\9numColors = numColors +1\
\9\9\9end\
\9\9\9colorCounter[colorBefore] = (colorCounter[colorBefore] or 0) +1\
\9\9end\
\9\9\
\9\9if w > 65535 or h > 65535 then\
\9\9\9",
                        {
                            " nil, \"image too large\"\
",
                        },
                        "\9\9end\
\9\9\
\9\9local buffer = newBuffer(\"w\")\
\9\9local writeByte, writeChar, writeBit, writeBits, writeNumber, finishByte, writeWord, writeInteger = \
\9\9\9buffer.writeByte, buffer.writeChar, buffer.writeBit, buffer.writeBits, buffer.writeNumber, buffer.finishByte, buffer.writeWord, buffer.writeInteger\
\9\9\
\9\9local function serCode(c, c2)\
\9\9\9local s = \"\"\
\9\9\9local c3 = c\
\9\9\9if c2 then\
\9\9\9\9c3 = {unpack(c)}\
\9\9\9\9c3[#c3 +1] = c2\
\9\9\9end\
\9\9\9for a = 1, #c3 do\
\9\9\9\9s = s..c3[a]\
\9\9\9end\
\9\9\9return s\
\9\9end\
\9\9\
\9\9local function generateHuffmanTree(c)\
\9\9\9local codes, low1p, low1v, low2p, low2v, lastkey = {}\
\9\9\9\9-- the huffman codes,\
\9\9\9\9-- the lowest probability of a color/node, the value of the color/node,\
\9\9\9\9-- the 2nd lowest probability of a color/node, the value of the color/node\
\9\9\9\
\9\9\9local numentries\
\9\9\9while true do\
\9\9\9\9low1p = nil\
\9\9\9\9low1v = -1\
\9\9\9\9low2p = nil\
\9\9\9\9low2v = -1\
\9\9\9\9\
\9\9\9\9numentries = 0\
\9\9\9\9for a, b in pairs(c) do\
\9\9\9\9\9if b then\
\9\9\9\9\9\9if (low1p == nil) or (b < low1p) then\
\9\9\9\9\9\9\9if (low2p == nil) or (low1p < low2p) then\
\9\9\9\9\9\9\9\9low2p = low1p\
\9\9\9\9\9\9\9\9low2v = low1v\
\9\9\9\9\9\9\9end\
\9\9\9\9\9\9\9low1p = b\
\9\9\9\9\9\9\9low1v = a\
\9\9\9\9\9\9elseif (low2p == nil) or (b < low2p) then\
\9\9\9\9\9\9\9low2p = b\
\9\9\9\9\9\9\9low2v = a\
\9\9\9\9\9\9end\
\9\9\9\9\9\9numentries = numentries +1\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9\
\9\9\9\9c[low1v] = nil\
\9\9\9\9c[low2v] = nil\
\9\9\9\9lastkey = {[0]=low2v, [1]=low1v}\
\9\9\9\9c[lastkey] = low1p+low2p\
\9\9\9\9\
\9\9\9\9if numentries <= 2 then\
\9\9\9\9\9break\
\9\9\9\9end\
\9\9\9end\
\9\9\9\
\9\9\9local touch;\
\9\9\9function touch(t, huffcode)\
\9\9\9\9if type(t) == \"number\" then\
\9\9\9\9\9codes[t] = {unpack(huffcode)}\
\9\9\9\9\9return\
\9\9\9\9else\
\9\9\9\9\9huffcode[#huffcode +1] = 0\
\9\9\9\9\9touch(t[0], huffcode)\
\9\9\9\9\9huffcode[#huffcode] = 1\
\9\9\9\9\9touch(t[1], huffcode)\
\9\9\9\9\9huffcode[#huffcode] = nil\
\9\9\9\9end\
\9\9\9end\
\9\9\9touch(lastkey, {})\
\9\9\9\
\9\9\9return codes, lastkey\
\9\9end\
\9\9\
\9\9local function writeHufftree(tree, writeValue)\
\9\9\9local towrite = {tree}\
\9\9\9if not tree[1] then\
\9\9\9\9writeBit(1)\
\9\9\9\9writeValue(tree[0])\
\9\9\9\9return\
\9\9\9else\
\9\9\9\9writeBit(0)\
\9\9\9end\
\9\9\9local towrite2, sub0, sub1\
\9\9\9while #towrite ~= 0 do\
\9\9\9\9towrite2 = {}\
\9\9\9\9for a = 1, #towrite do\
\9\9\9\9\9sub0, sub1 = towrite[a][0], towrite[a][1]\
\9\9\9\9\9if type(sub0) == \"number\" then\
\9\9\9\9\9\9writeBit(1)\
\9\9\9\9\9\9writeValue(sub0)\
\9\9\9\9\9else\
\9\9\9\9\9\9writeBit(0)\
\9\9\9\9\9\9towrite2[#towrite2 +1] = sub0\
\9\9\9\9\9end\
\9\9\9\9\9if type(sub1) == \"number\" then\
\9\9\9\9\9\9writeBit(1)\
\9\9\9\9\9\9writeValue(sub1)\
\9\9\9\9\9else\
\9\9\9\9\9\9writeBit(0)\
\9\9\9\9\9\9towrite2[#towrite2 +1] = sub1\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9towrite=towrite2\
\9\9\9end\
\9\9end\
\9\9\
\9\9local function writePalette(hufftree)\
\9\9\9writeHufftree(hufftree, function(v)\
\9\9\9\9if v == 0 then\
\9\9\9\9\9writeNumber(5, 16)\
\9\9\9\9else\
\9\9\9\9\9writeNumber(5, math.log(v)/math.log(2))\
\9\9\9\9end\
\9\9\9end)\
\9\9end\
\9\9\
\9\9local function writeLengthTree(hufftree)\
\9\9\9writeHufftree(hufftree, function(v)\
\9\9\9\9if v <= 12 then\
\9\9\9\9\9writeNumber(4, v)\
\9\9\9\9else\
\9\9\9\9\9local nbits = math.floor(math.log(v)/math.log(2)) +1\
\9\9\9\9\9if nbits <= 5 then\
\9\9\9\9\9\9writeNumber(4, 13)\
\9\9\9\9\9\9writeNumber(5, v)\
\9\9\9\9\9elseif nbits <= 8 then\
\9\9\9\9\9\9writeNumber(4, 14)\
\9\9\9\9\9\9writeNumber(8, v)\
\9\9\9\9\9else\
\9\9\9\9\9\9writeNumber(4, 15)\
\9\9\9\9\9\9writeNumber(16, v)\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end)\
\9\9end\
\9\9\
\9\9-- Header: 0xFF2137\
\9\9-- U is the 21st letter in the alphabet\
\9\9-- C is the 3rd letter in the alphabet\
\9\9-- G is the 7th letter in the alphabet\
\9\9writeByte(0xFF)\
\9\9writeByte(0x21)\
\9\9writeByte(0x37)\
\9\9writeByte(ucgValues.VERSION)\
\9\9\
\9\9-- flags currently unused\
\9\9flags = {0, 0, 0, 0, 0, 0, 0, 0}\
\9\9writeBits(flags)\
\9\9writeWord(w)\
\9\9writeWord(h)\
\9\9\
\9\9local monocolor = numColors == 1\
\9\9local colorcodes, colortree\
\9\9if numColors <= 2 then\
\9\9\9-- less or equal 2 colors, huffman tree algorithm would fail\
\9\9\9colorcodes = simpleColorCodes\
\9\9\9colortree = {}\
\9\9\9for a, b in pairs(simpleColorCodes) do\
\9\9\9\9colortree[b[1]] = a\
\9\9\9end\
\9\9else\
\9\9\9-- generate color huffman tree\
\9\9\9colorcodes, colortree = generateHuffmanTree(colorCounter)\
\9\9end\
\9\9writePalette(colortree)\
\9\9\
\9\9local monolength = numLengths == 1\
\9\9local lengthcodes, lengthtree\
\9\9if numLengths <= 2 then\
\9\9\9-- less or equal 2 lengths, huffman tree algorithm would fail\
\9\9\9lengthcodes = simpleLengthCodes\
\9\9\9lengthtree = {}\
\9\9\9for a, b in pairs(simpleLengthCodes) do\
\9\9\9\9lengthtree[b[1]] = a\
\9\9\9end\
\9\9else\
\9\9\9-- generate length huffman tree\
\9\9\9lengthcodes, lengthtree = generateHuffmanTree(lengthsCounter)\
\9\9end\
\9\9writeLengthTree(lengthtree)\
\9\9\
\9\9local cFace, cWrite\
\9\9if not monocolor then\
\9\9\9cFace = buffer.newVariableCodeInterface()\
\9\9\9cFace.loadCodes(colorcodes)\
\9\9\9cWrite = cFace.writeValue\
\9\9end\
\9\9\
\9\9local lFace, lWrite\
\9\9if not monolength then\
\9\9\9lFace = buffer.newVariableCodeInterface()\
\9\9\9lFace.loadCodes(lengthcodes)\
\9\9\9lWrite = lFace.writeValue\
\9\9end\
\9\9\
\9\9-- write image data\
\9\9for y = 1, h do\
\9\9\9local line = lengthImage[y]\
\9\9\9local dx = 0\
\9\9\9for x = 1, #line do\
\9\9\9\9local p = line[x]\
\9\9\9\9if not monocolor then\
\9\9\9\9\9cWrite(p.c)\
\9\9\9\9end\
\9\9\9\9if not monolength then\
\9\9\9\9\9lWrite(p.l)\
\9\9\9\9end\
\9\9\9\9dx = dx + p.l\
\9\9\9end\
\9\9end\
\9\9\
\9\9finishByte(0)\
\9\9\
\9\9",
                        {
                            " buffer.getBytes()\
",
                        },
                        "\9end",
                    },
                    711,
                    {},
                    [ 6 ] = {},
                },
                squareCentred = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height = self.width, self.height\
\9\9if width ~= height then\
\9\9\9local difference = math.abs( width - height )\
\9\9\9local differenceOne, differenceTwo = math.ceil( difference / 2 ), math.floor( difference / 2 )\
\9\9\9local pixels = self.pixels\
\9\9\9if width > height then\
\9\9\9\9-- we need to add rows to the bottom and top\
\9\9\9\9local insert = table.insert\
\9\9\9\9for i = 1, differenceOne * width do\
\9\9\9\9\9insert( pixels, TRANSPARENT )\
\9\9\9\9end\
\
\9\9\9\9local length = #pixels\
\9\9\9\9for i = 1, differenceTwo * width do\
\9\9\9\9\9length = length + 1\
\9\9\9\9\9pixels[length] = TRANSPARENT\
\9\9\9\9end\
\9\9\9\9self.height = width\
\9\9\9else\
\9\9\9\9-- we need to add columns to the left and right\
\9\9\9\9local n = 1\
\9\9\9\9local insert = table.insert\
\9\9\9\9for i = 1, height do\
\9\9\9\9\9for j = 1, differenceOne do\
\9\9\9\9\9\9insert( pixels, n, TRANSPARENT )\
\9\9\9\9\9\9n = n + 1\
\9\9\9\9\9end\
\9\9\9\9\9n = n + width\
\9\9\9\9\9for j = 1, differenceTwo do\
\9\9\9\9\9\9insert( pixels, n, TRANSPARENT )\
\9\9\9\9\9\9n = n + 1\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9self.width = height\
\9\9\9end\
\9\9\9self.scaledCache = {}\
\9\9end\
\9end",
                    },
                    1126,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                scaledCache = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                width = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                pixels = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                contents = {
                    allowsNil = true,
                    link = false,
                    type = "Any",
                    readOnly = false,
                },
                height = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
            },
        },
        className = "Image",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                isMIME = {
                    "(_C_self_passed,mime)",
                    {
                        "\
\9\9",
                        {
                            " mime and availableMimes[mime] or false\
",
                        },
                        "\9end",
                    },
                    479,
                    {
                        {
                            allowsNil = true,
                            type = "String",
                            name = "mime",
                        },
                    },
                    [ 6 ] = {
                        "mime",
                    },
                },
                fromResource = {
                    "(_C_self_passed,resource)",
                    {
                        "\
\9\9local mime = resource.mime\
\9\9if mime == mimes.UCG then\
\9\9\9",
                        {
                            " Image.static:fromUniversalCompressedGraphics( resource.binaryContents )\
\9\9elseif mime == mimes.SICON then\
\9\9\9return Icon.static:fromIcon( resource.binaryContents )\
\9\9elseif mime == mimes.IMAGE then\
\9\9\9return Image.static:fromPaintFormat( resource.contents )\
",
                        },
                        "\9\9end\
\9end",
                    },
                    522,
                    {
                        {
                            allowsNil = false,
                            type = "Resource",
                            name = "resource",
                        },
                    },
                    [ 6 ] = {
                        "resource",
                    },
                },
                fromPathInBundle = {
                    "(_C_self_passed,path,bundle)",
                    {
                        "\
\9\9",
                        {
                            " Image.static:fromFile( bundle:fileFromPath( path ) )\
",
                        },
                        "\9end",
                    },
                    514,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "path",
                        },
                        {
                            allowsNil = false,
                            type = "Any",
                            name = "bundle",
                        },
                    },
                    [ 6 ] = {
                        "path",
                        "bundle",
                    },
                },
                blank = {
                    "(_C_self_passed,width,height)",
                    {
                        "\
\9\9local TRANSPARENT = TRANSPARENT\
\9\9local pixels = {}\
\9\9for i = 1, width * height do\
\9\9\9pixels[i] = TRANSPARENT\
\9\9end\
\9\9",
                        {
                            " Image( pixels, width, height )\
",
                        },
                        "\9end",
                    },
                    483,
                    {
                        {
                            allowsNil = true,
                            name = "width",
                        },
                        {
                            allowsNil = true,
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "width",
                        "height",
                    },
                },
                fromFile = {
                    "(_C_self_passed,file)",
                    {
                        "\
\9\9local mime = file.metadata.mime\
\9\9if mime == mimes.UCG then\
\9\9\9",
                        {
                            " Image.static:fromUniversalCompressedGraphics( file.binaryContents )\
\9\9elseif mime == mimes.SICON then\
\9\9\9return Icon.static:fromIcon( file.binaryContents )\
\9\9elseif mime == mimes.IMAGE then\
\9\9\9return Image.static:fromPaintFormat( file.contents )\
",
                        },
                        "\9\9end\
\9end",
                    },
                    496,
                    {
                        {
                            allowsNil = false,
                            type = "File",
                            name = "file",
                        },
                    },
                    [ 6 ] = {
                        "file",
                    },
                },
                fromPath = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9",
                        {
                            " Image.static:fromFile( File( path ) )\
",
                        },
                        "\9end",
                    },
                    492,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
                fromPaintFormat = {
                    "(_C_self_passed,contents)",
                    {
                        "\
\9\9local lines = split( contents, \"\\n\" )\
\9\9local pixels = {}\
\9\9local width = 0\
\9\9for y, line in ipairs( lines ) do\
\9\9\9width = math.max( width, #line )\
\9\9end\
\
\9\9for y, line in pairs( lines ) do\
\9\9\9for x = 1, #line do\
\9\9\9\9pixels[(y - 1) * width + x] = getColourOf( line:sub( x, x ) )\
\9\9\9end\
\9\9end\
\
\9\9",
                        {
                            " Image( pixels, width, #lines, contents )\
",
                        },
                        "\9end",
                    },
                    537,
                    {
                        {
                            allowsNil = true,
                            name = "contents",
                        },
                    },
                    [ 6 ] = {
                        "contents",
                    },
                },
                fromUniversalCompressedGraphics = {
                    "(_C_self_passed,bytes)",
                    {
                        "\
\9\9-- Henceforth is ardera's code from libimg v1.2.7 with minor modifications\
\9\9local buffer = newBuffer(\"r\", bytes)\
\9\9local readNumber, readWord, readBits, readBit, readByte = buffer.readNumber, buffer.readWord, buffer.readBits, buffer.readBit, buffer.readByte\
\9\9\
\9\9if readNumber(24) ~= ucgValues.SIGNATURE then\
\9\9\9error( \"invalid signature! \"..tostring(n) )\
\9\9end\
\9\9\
\9\9local version = readByte()\
\9\9local w, h\
\9\9local pixels = {}\
\9\9if version == 3 then\
\9\9\9local flags = readBits(8)\
\9\9\9w, h = readWord(), readWord()\
\9\9\9\
\9\9\9local function serCode(c, c2)\
\9\9\9\9local s = \"\"\
\9\9\9\9local c3 = c\
\9\9\9\9if c2 then\
\9\9\9\9\9c3 = {unpack(c)}\
\9\9\9\9\9c3[#c3 +1] = c2\
\9\9\9\9end\
\9\9\9\9for a = 1, #c3 do\
\9\9\9\9\9s = s..c3[a]\
\9\9\9\9end\
\9\9\9\9return s\
\9\9\9end\
\9\9\9\
\9\9\9local function readHuffmanTree(readValue)\
\9\9\9\9local tricodes = {}\
\9\9\9\9local toread = {0}\
\9\9\9\9local toread2\
\9\9\9\9local depth = 0\
\9\9\9\9\
\9\9\9\9if readBit() == 1 then\
\9\9\9\9\9return readValue(), true\
\9\9\9\9end\
\9\9\9\9\
\9\9\9\9local ternary, digitValue, c0, c1\
\9\9\9\9while #toread > 0 do\
\9\9\9\9\9toread2 = {}\
\9\9\9\9\9digitValue = 3^depth\
\9\9\9\9\9\
\9\9\9\9\9for a = 1, #toread do\
\9\9\9\9\9\9ternary = toread[a]\
\9\9\9\9\9\9c0, c1 = ternary + digitValue, ternary + 2*digitValue\
\9\9\9\9\9\9\
\9\9\9\9\9\9if readBit() == 1 then\
\9\9\9\9\9\9\9local v = readValue()\
\9\9\9\9\9\9\9tricodes[c0] = v\
\9\9\9\9\9\9else\
\9\9\9\9\9\9\9toread2[#toread2 +1] = c0\
\9\9\9\9\9\9end\
\9\9\9\9\9\9\
\9\9\9\9\9\9if readBit() == 1 then\
\9\9\9\9\9\9\9local v = readValue()\
\9\9\9\9\9\9\9tricodes[c1] = v\
\9\9\9\9\9\9else\
\9\9\9\9\9\9\9toread2[#toread2 +1] = c1\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9\9depth = depth +1\
\9\9\9\9\9toread = toread2\
\9\9\9\9end\
\9\9\9\9\
\9\9\9\9return tricodes\
\9\9\9end\
\9\9\9\
\9\9\9local colorcodes, monocolor = readHuffmanTree(function()\
\9\9\9\9local b = readNumber(5)\
\9\9\9\9if b == 16 then\
\9\9\9\9\9return 0\
\9\9\9\9else\
\9\9\9\9\9return 2^b\
\9\9\9\9end\
\9\9\9end)\
\9\9\9\
\9\9\9local lengthcodes, monolength = readHuffmanTree(function()\
\9\9\9\9local b = readNumber(4)\
\9\9\9\9if b <= 12 then\
\9\9\9\9\9return b\
\9\9\9\9elseif b == 13 then\
\9\9\9\9\9return readNumber(5)\
\9\9\9\9elseif b == 14 then\
\9\9\9\9\9return readNumber(8)\
\9\9\9\9elseif b == 15 then\
\9\9\9\9\9return readNumber(16)\
\9\9\9\9end\
\9\9\9end)\
\9\9\9\
\9\9\9local debX, debY, debColor\
\9\9\9\
\9\9\9local function lexHuffcode(dictionary, nodedictionary)\
\9\9\9\9local ternary = 0\
\9\9\9\9local depth = 0\
\9\9\9\9local v\
\9\9\9\9while not v do\
\9\9\9\9\9local bi = readBit()\
\9\9\9\9\9ternary = ternary + (bi+1)*(3^depth)\
\9\9\9\9\9depth = depth +1\
\9\9\9\9\9v = dictionary[ternary]\
\9\9\9\9end\
\9\9\9\9return v\
\9\9\9end\
\9\9\9\
\9\9\9for y = 1, h do\
\9\9\9\9local x = 0\
\9\9\9\9while x < w do\
\9\9\9\9\9debX, debY = x, y\
\9\9\9\9\9local color\
\9\9\9\9\9if monocolor then\
\9\9\9\9\9\9color = colorcodes\
\9\9\9\9\9else\
\9\9\9\9\9\9color = lexHuffcode(colorcodes, colornodecodes)\
\9\9\9\9\9\9debColor = color\
\9\9\9\9\9end\
\9\9\9\9\9local len\
\9\9\9\9\9if monolength then\
\9\9\9\9\9\9len = lengthcodes\
\9\9\9\9\9else\
\9\9\9\9\9\9len = lexHuffcode(lengthcodes, lengthnodecodes)\
\9\9\9\9\9\9debX, debY, debColor = nil, nil, nil\
\9\9\9\9\9end\
\9\9\9\9\9for a = 1, len do\
\9\9\9\9\9\9pixels[(y - 1) * w + x + a] = color\
\9\9\9\9\9end\
\9\9\9\9\9x = x + len\
\9\9\9\9end\
\9\9\9end\
\9\9else\
\9\9\9error( \"unsupported version: \"..(tostring(version) or \"unknown\") )\
\9\9end\
\9\9",
                        {
                            " Image( pixels, w, h, bytes )\
",
                        },
                        "\9end",
                    },
                    575,
                    {
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "bytes",
                        },
                    },
                    [ 6 ] = {
                        "bytes",
                    },
                },
                fromNameInBundle = {
                    "(_C_self_passed,name,bundle)",
                    {
                        "\
\9\9",
                        {
                            " Image.static:fromFile( bundle:file( name, IMAGE_MIMES ) )\
",
                        },
                        "\9end",
                    },
                    518,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "name",
                        },
                        {
                            allowsNil = false,
                            type = "Any",
                            name = "bundle",
                        },
                    },
                    [ 6 ] = {
                        "name",
                        "bundle",
                    },
                },
                fromPixels = {
                    "(_C_self_passed,pixels,width,height)",
                    {
                        "\
\9\9",
                        {
                            " Image( pixels, width, height )\
",
                        },
                        "\9end",
                    },
                    533,
                    {
                        {
                            allowsNil = true,
                            name = "pixels",
                        },
                        {
                            allowsNil = true,
                            name = "width",
                        },
                        {
                            allowsNil = true,
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "pixels",
                        "width",
                        "height",
                    },
                },
                fromName = {
                    "(_C_self_passed,name)",
                    {
                        "\
\9\9local resource = Resource( name, IMAGE_MIMES )\
\9\9if resource then\
\9\9\9",
                        {
                            " Image.static:fromResource( resource )\
",
                        },
                        "\9\9end\
\9end",
                    },
                    507,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "name",
                        },
                    },
                    [ 6 ] = {
                        "name",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
    },
    MouseEvent = {
        fileEnvironment = 77,
        enums = {
            directions = {
                type = "Number",
                startLine = 14,
                values = "{\
\9\9UP = -1;\
\9\9DOWN = 1;\
\9}\
\
\9\
\
\
\
\9\
",
            },
            mouseButtons = {
                type = "Number",
                startLine = 8,
                values = "{\
\9\9LEFT = 1;\
\9\9MIDDLE = 3;\
\9\9RIGHT = 2;\
\9}\
\
\9\
",
            },
        },
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Event",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                makeRelative = {
                    "(_C_self_passed,view)",
                    {
                        "\
\9\9if not view then end\
\9\9local oldRelativeView = self.relativeView\
\9\9super( view )\
\9\9\
\9\9local x, y = self.x, self.y\
\
\9\9if oldRelativeView and oldRelativeView == view then\
\9\9\9-- return\
\9\9elseif oldRelativeView and oldRelativeView == view.parent then\
\9\9\9-- we are going 1 downward in to the stack\
\9\9\9x = x - view.x + 1\
\9\9\9y = y - view.y + 1\
\
\9\9elseif oldRelativeView and oldRelativeView.parent == view then\
\9\9\9-- we are going 1 upward in to the stack\
\9\9\9x = x + oldRelativeView.x - 1\
\9\9\9y = y + oldRelativeView.y - 1\
\9\9else\
\9\9\9-- we don't known exactly where the previous view was\
\9\9\9x, y = view:getCoordinates( self.globalX, self.globalY, self.application.container )\
\9\9end\
\9\9self.x = x\
\9\9self.y = y\
\9end",
                    },
                    23,
                    {
                        {
                            allowsNil = true,
                            name = "view",
                        },
                    },
                    [ 6 ] = {
                        "view",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                y = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0;\
\9\
",
                },
                x = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0;\
\9\
",
                },
                globalX = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                globalY = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\
\9\
",
                },
            },
        },
        className = "MouseEvent",
        fileName = "/src/classes/Events/Mouse Events/MouseEvent.luo",
    },
    UnknownTypeValidationException = {
        fileEnvironment = 98,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ValidationException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "UnknownTypeValidationException",
        fileName = "/src/classes/Exceptions/Validation/UnknownTypeValidationException.luo",
    },
    IAutomaticLayout = {
        className = "IAutomaticLayout",
        enums = {},
        isInterface = true,
        instance = {
            functions = {
                updateLayout = {
                    {
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "dontAnimate",
                        },
                    },
                },
            },
            properties = {
                needsLayoutUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
            },
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    TextMask = {
        fileEnvironment = 132,
        enums = {},
        lineNumber = 15,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Mask",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,width,height,text,font,alignment)",
                    {
                        "\
\9\9local fontWidth = font:getWidth( text )\
\9\9local width = width or fontWidth\
\9\9local fontHeight = font.height\
\9\9local height = height or fontHeight\
\9\9local pixels = {}\
\9\9local hasEllipsis = false\
\9\9local scale, characters, desiredHeight, spacing = font.scale, font.characters, font.desiredHeight, font.spacing\
\
\9\9while fontWidth > width and #text > 1 do\
\9\9\9text = text:sub( 1, #text - 1 )\
\9\9\9fontWidth = font:getWidth( text .. \"...\" )\
\9\9\9hasEllipsis = true\
\9\9end\
\
\9\9if hasEllipsis then\
\9\9\9text = text .. \"...\"\
\9\9end\
\
\9\9local xShift = 0\
\9\9if alignment == alignments.LEFT then\
\9\9elseif alignment == alignments.CENTRE then\
\9\9\9xShift = math.floor( (width - fontWidth ) / 2 )\
\9\9elseif alignment == alignments.RIGHT then\
\9\9\9xShift = width - fontWidth\
\9\9end\
\
\9\9for i = 1, #text do\
\9\9\9local char = text:byte( i )\
\9\9\9local bitmap\
\9\9\9if characters[char] then\
\9\9\9\9bitmap = characters[char]\
\9\9\9else\
\9\9\9\9bitmap = NO_CHAR_MAP\
\9\9\9\9scale = desiredHeight / 6\
\9\9\9end\
\
\9\9\9local bitmapWidth = bitmap.width\
\9\9\9local characterWidth = floor( bitmapWidth * scale + 0.5 )\
\9\9\9if scale < 1 then\
\9\9\9\9-- a scaled down character\
\9\9\9\9for _x = 1, bitmapWidth do\
\9\9\9\9\9for _y = 1, fontHeight do\
\9\9\9\9\9\9if character[_y] and character[_y][_x] then\
\9\9\9\9\9\9\9pixels[ ( ceil( _y * scale - 0.5 ) - 1 ) * width + ceil( ( _x + xShift ) * scale - 0.5 ) ] = true\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9else\
\9\9\9\9-- TODO: why is ceil used not rounding for font scaling?\
\9\9\9\9for _y = 1, desiredHeight do\
\9\9\9\9\9local bitmapRow = bitmap[ceil( _y / scale )]\
\9\9\9\9\9if bitmapRow then\
\9\9\9\9\9\9for _x = 1, characterWidth do\
\9\9\9\9\9\9\9if bitmapRow[ceil( _x / scale )] then\
\9\9\9\9\9\9\9\9pixels[ ( _y - 1 ) * width + ( _x + xShift ) ] = true\
\9\9\9\9\9\9\9end\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9\9xShift = xShift + characterWidth + spacing * scale\
\9\9end\
\9   \
\9\9super( x, y, width, height, pixels )\
\9end",
                    },
                    17,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "height",
                        },
                        {
                            allowsNil = false,
                            type = "String",
                            name = "text",
                        },
                        {
                            allowsNil = false,
                            type = "Font",
                            name = "font",
                            defaultValue = "Font.static.systemFont",
                        },
                        {
                            allowsNil = false,
                            type = "Font.alignments",
                            name = "alignment",
                            defaultValue = "Font.alignments.LEFT ",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "width",
                        "height",
                        "text",
                        "font",
                        "alignment",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "TextMask",
        fileName = "/src/classes/Graphics/TextMask.luo",
    },
    SeparatorMask = {
        fileEnvironment = 129,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Mask",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y,width,height)",
                    {
                        "\
\9\9local pixels = {}\
\9\9local i = 1\
\9\9for y = 1, height do\
\9\9\9if y % 2 == 1 then\
\9\9\9\9for x = 1, width do\
\9\9\9\9\9pixels[(y - 1) * width + x] = x % 2 == 1\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9super( x, y, width, height, pixels )\
\9end",
                    },
                    6,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "width",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "height",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                        "width",
                        "height",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "SeparatorMask",
        fileName = "/src/classes/Graphics/SeparatorMask.luo",
    },
    TreeNode = {
        fileEnvironment = 200,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "ITreeChild",
            "IDragDropDestination",
        },
        extends = "LayoutContainer",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self:updateThemeStyle()\
\9end",
                        50,
                    },
                    isPressed = {
                        "(_C_self_passed,isPressed)\
\9\9self.isPressed = isPressed\
\9\9self:updateThemeStyle()\
\9end",
                        55,
                    },
                    width = {
                        "(_C_self_passed,width)\
\9    super:super( width )\
\9\9local childrenMarginLeft = self.theme:value( \"childrenMarginLeft\" )\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9childView.width = width - childrenMarginLeft\
\9\9end\
\9end",
                        173,
                    },
                    isFolded = {
                        "(_C_self_passed,isFolded)\
\9    self.isFolded = isFolded\
\9\9self:updateThemeStyle()\
\9    local height = isFolded and self.minHeight or self.maxHeight\
\9    if height then\
\9\9    local theme = self.theme\
\9\9\9self:animate( \"height\", height, theme:value( \"animationDuration\" ), nil, theme:value( \"animationEasing\" ) )\
\9\9end\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9parent.needsLayoutUpdate = true\
\9\9end\
\9end",
                        92,
                    },
                    needsLayoutUpdate = {
                        "(_C_self_passed,needsLayoutUpdate)\
\9    self.needsLayoutUpdate = needsLayoutUpdate\
\9\9local parent = self.parent\
\9\9if parent then\
\9\9\9parent.needsLayoutUpdate = true\
\9\9end\
\9end",
                        106,
                    },
                    height = {
                        "(_C_self_passed,height)\
\9    super:super( height )\
\9end",
                        181,
                    },
                    text = {
                        "(_C_self_passed,text)\
\9\9self.text = text\
\9\9self.needsDraw = true\
\9end",
                        38,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self:event( DownMouseEvent, self.onMouseDown )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9\9-- self:event( HeldMouseEvent, self.onMouseHeld )\
\9    self:event( EnteredInterfaceMouseEvent, self.onMouseEnteredOrMoved )\
\9    self:event( MoveMouseEvent, self.onMouseEnteredOrMoved )\
\9end",
                    },
                    17,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9local theme = self.theme\
\9\9\9if event.y <= self.minHeight then\
\9\9\9\9self.isPressed = not self.isPressed\
\9\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    114,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = false\
\9\9\9if self.isEnabled and self:hitTestEvent( event ) then\
\9\9\9\9self.isFolded = not self.isFolded\
\9\9\9\9self.eventManager:handleEvent( ActionInterfaceEvent( self ) )\
\9\9\9\9local result = self.eventManager:handleEvent( event )\
\9\9\9\9",
                        {
                            " result == nil and true or result\
",
                        },
                        "\9\9\9end\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    79,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                dragDropMoved = {
                    "(_C_self_passed,data,dragView,x,y)",
                    {
                        "\
\9\9if not self.removingIndex then\
\9\9\9local _, selfY = self:getPosition()\
\9\9\9local treeItem = data.treeItem\
\9\9\9local children = self.children\
\9\9\9local index = math.max( math.min( math.floor( ( dragView.y - selfY - self.minHeight - self.theme:value( \"childrenMarginTop\" ) ) / treeItem.height + 1.5 ), #children), 1 )\
\9\9\9if treeItem.index ~= index then\
\9\9\9\9treeItem.index = index\
\9\9\9\9self.needsLayoutUpdate = true\
\9\9\9end\
\9\9end\
\9end",
                    },
                    141,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "dragView",
                        "x",
                        "y",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, theme, canvas, font = self.width, self.theme, self.canvas\
\9\9local font, leftMargin, rightMargin, topMargin, bottomMargin = theme:value( \"font\" ), theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" )\
\9\9local height = topMargin + font.height + bottomMargin\
\
\9\9canvas:fill( theme:value( \"textColour\" ),  TextMask( leftMargin + 1, topMargin + 1, width - leftMargin - rightMargin, height - topMargin - bottomMargin, self.text, font ) )\
\
\9\9local symbol = theme:value( \"symbol\" )\
\9    canvas:fill( theme:value( \"symbolColour\" ), SymbolMask( 1 + theme:value( \"leftSymbolMargin\" ), 1 + math.floor( ( height - symbol.height ) / 2 ), symbol ) )\
\9end",
                    },
                    27,
                    {},
                    [ 6 ] = {},
                },
                dragDropDropped = {
                    "(_C_self_passed,data,isMove,x,y)",
                    {
                        "\
\9end",
                    },
                    162,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isMove",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "isMove",
                        "x",
                        "y",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local theme = self.theme\
\9\9theme.style = self.isEnabled and ( self.isFolded and ( self.isPressed and \"foldedPressed\" or \"folded\" ) or ( self.isPressed and \"pressed\" or \"default\" ) ) or \"disabled\"\
\9\9self.minHeight = theme:value( \"topMargin\" ) + theme:value( \"font\" ).height + theme:value( \"bottomMargin\" )\
\9\9self.needsLayoutUpdate = true\
\9end",
                    },
                    43,
                    {},
                    [ 6 ] = {},
                },
                updateLayout = {
                    "(_C_self_passed,dontAnimate)",
                    {
                        "\
\9\9local width, theme = self.width, self.theme\
\9\9local childrenMarginLeft = theme:value( \"childrenMarginLeft\" )\
\9\9local childTopMargin, childBottomMargin = theme:value( \"childTopMargin\" ), theme:value( \"childBottomMargin\" )\
\9\9local y = 1 + self.minHeight + theme:value( \"childrenMarginTop\" )\
\
\9\9local time, easing\
\9\9if not dontAnimate then\
\9\9\9time = theme:value( \"animationDuration\" )\
\9\9\9easing = theme:value( \"animationEasing\" )\
\9\9end\
\9\9for i, childView in ipairs( self.children ) do\
\9\9\9if dontAnimate then\
\9\9\9\9childView.y = y + childTopMargin\
\9\9\9else\
\9\9\9\9childView:animate( \"y\", y + childTopMargin, time, nil, easing )\
\9\9\9end\
\9\9\9childView.x = 1 + childrenMarginLeft\
\9\9\9childView.width = width - childrenMarginLeft\
\9\9\9y = y + ( childView:typeOf( TreeNode ) and ( ( childView.isFolded and childView.minHeight or childView.maxHeight) or 0 ) or childView.height ) + childTopMargin + childBottomMargin\
\9\9end\
\
\9\9local maxHeight = y + theme:value( \"bottomMargin\" ) - 1 + theme:value( \"childrenMarginBottom\" )\
\9\9self.maxHeight = maxHeight\
\9\9local height = self.isFolded and self.minHeight or maxHeight\
\9\9if dontAnimate then\
\9\9\9self.height = height\
\9\9else\
\9\9\9self:animate( \"height\", height, time, nil, easing )\
\9\9end\
\
\9\9self.dontAnimateLayoutUpdate = false\
\9\9self.needsLayoutUpdate = false\
\9end",
                    },
                    185,
                    {
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "dontAnimate",
                            defaultValue = "self.dontAnimateLayoutUpdate ",
                        },
                    },
                    [ 6 ] = {
                        "dontAnimate",
                    },
                },
                canAcceptDragDrop = {
                    "(_C_self_passed,data,isMove)",
                    {
                        "\
\9\9",
                        {
                            " self.canRearrange and data:typeOf( TreeClipboardData )\
",
                        },
                        "\9end",
                    },
                    124,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isMove",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "isMove",
                    },
                },
                onChildAdded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if not event.childView:typeOf( ITreeChild ) then\
\9\9\9error( \"Attempted to add view '\" .. tostring( event.childView ) .. \"' that does not extend ITreeChild to '\" .. tostring( self ) .. \"'\", 0 )\
\9\9end\
\9\9self.needsLayoutUpdate = true\
\9\9self.dontAnimateLayoutUpdate = true\
\9end",
                    },
                    165,
                    {
                        {
                            allowsNil = false,
                            type = "ChildAddedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                dragDropExited = {
                    "(_C_self_passed,data,dragView,x,y)",
                    {
                        "\
\9\9if self.canRemove then\
\9\9\9self.removingIndex = dragView.index\
\9\9\9self:remove( data.treeItem )\
\9\9\9dragView.cursor = DeleteCursor.static\
\9\9end\
\9end",
                    },
                    154,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "dragView",
                        "x",
                        "y",
                    },
                },
                onMouseEnteredOrMoved = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local currentCursor = self.cursor\
\9\9local newCursor = cursor\
\9\9if event.y <= self.minHeight then\
\9\9\9newCursor = clickableCursor\
\9\9end\
\9\9if currentCursor ~= newCursor then\
\9\9\9self.cursor = newCursor\
\9\9end\
\9end",
                    },
                    60,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                dragDropEntered = {
                    "(_C_self_passed,data,dragView,x,y)",
                    {
                        "\
\9\9if self.canRemove then\
\9\9\9local removingIndex = self.removingIndex\
\9\9\9if removingIndex then\
\9\9\9\9self:insert( data.treeItem, removingInde )\
\9\9\9\9self.dontAnimateLayoutUpdate = false\
\9\9\9\9dragView.cursor = nil\
\9\9\9end\
\
\9\9\9self.removingIndex = nil\
\9\9end\
\9end",
                    },
                    128,
                    {
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "DragView",
                            name = "dragView",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "data",
                        "dragView",
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                canRearrange = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
                maxHeight = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                removingIndex = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                minHeight = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                text = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                dropStyle = {
                    allowsNil = false,
                    link = false,
                    type = "DragDropManager.dropStyles",
                    readOnly = false,
                    defaultValue = "DragDropManager.dropStyles.RETURN\
\
\
\9\
",
                },
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                isFolded = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                canRemove = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
            },
        },
        className = "TreeNode",
        fileName = "/src/classes/Views/Containers/Tree/TreeNode.luo",
    },
    KeyEvent = {
        fileEnvironment = 71,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Event",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,keyCode)",
                    {
                        "\
\9\9self.keyCode = keyCode\
\9\9self.keyString = KeyboardShortcutManager.static:convert( keyCode )\
\9\9-- TODO: this needs testing\
\9\9self.isCharacter = (2 <= keyCode and keyCode <= 13) or (16 <= keyCode and keyCode <= 27) or (30 <= keyCode and keyCode <= 41) or (44 <= keyCode and keyCode <= 53)\
\9end",
                    },
                    12,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "keyCode",
                        },
                    },
                    [ 6 ] = {
                        "keyCode",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                keyCode = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                isCharacter = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
                keyString = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "KeyEvent",
        fileName = "/src/classes/Events/Keyboard Events/KeyEvent.luo",
    },
    Font = {
        fileEnvironment = 115,
        implements = {},
        lineNumber = 29,
        enums = {
            alignments = {
                type = "Number",
                startLine = 37,
                values = "{\
\9\9LEFT = 0;\
\9\9CENTER = 1;\
\9\9CENTRE = 1;\
\9\9RIGHT = 2;\
\9\9JUSTIFIED = 3;\
\9}\
\
\9\
\9\
",
            },
        },
        fileName = "/src/classes/Font/Font.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,name,desiredHeight,reload)",
                    {
                        "\
\9\9local characters, height\
\9\9desiredHeight = desiredHeight or 8\
\9\9if cache[name] and cache[name][desiredHeight] and not reload then\
\9\9\9characters, height = cache[name][desiredHeight][1], cache[name][desiredHeight][2]\
\9\9else\
\9\9\9local resource = Resource( name, Metadata.mimes.SFONT, \"fonts\" )\
\9\9\9characters, height = BitmapFont.static:decodeResource( resource )\
\9\9\9cache[name] = cache[name] or {}\
\9\9\9cache[name][desiredHeight] = { characters, height }\
\9\9end\
\9\9self.characters = characters\
\9\9self.height = height\
\9\9self.desiredHeight = desiredHeight or height\
\9\9self.scale = ( desiredHeight or height ) / height\
\9end",
                    },
                    57,
                    {
                        {
                            allowsNil = true,
                            name = "name",
                        },
                        {
                            allowsNil = true,
                            name = "desiredHeight",
                        },
                        {
                            allowsNil = true,
                            name = "reload",
                        },
                    },
                    [ 6 ] = {
                        "name",
                        "desiredHeight",
                        "reload",
                    },
                },
                getRawWidth = {
                    "(_C_self_passed,text)",
                    {
                        "\
\9\9if not text then ",
                        {
                            " 0 ",
                        },
                        "end\
\9\9local width = 0\
\9\9local scale, characters, desiredHeight, spacing = self.scale, self.characters, self.desiredHeight, self.spacing\
\9\9for i = 1, #text do\
\9\9\9local char = text:byte( i )\
\9\9\9local scale, bitmap = scale -- localise scale so it can be changed if the character isn't defined\
\9\9\9if characters[char] then\
\9\9\9\9bitmap = characters[char]\
\9\9\9else\
\9\9\9\9bitmap = NO_CHAR_MAP\
\9\9\9\9scale = desiredHeight / 6\
\9\9\9end\
\9\9\9width = width + bitmap.width * scale\
\9\9end\
\9\9",
                        {
                            " width\
",
                        },
                        "\9end",
                    },
                    211,
                    {
                        {
                            allowsNil = true,
                            name = "text",
                        },
                    },
                    [ 6 ] = {
                        "text",
                    },
                },
                getWidth = {
                    "(_C_self_passed,text,withLastSpace)",
                    {
                        "\
\9\9if not text then ",
                        {
                            " 0 ",
                        },
                        "end\
\9\9local width = 0\
\9\9local scale, characters, desiredHeight, spacing = self.scale, self.characters, self.desiredHeight, self.spacing\
\9\9for i = 1, #text do\
\9\9\9local char = text:byte( i )\
\9\9\9local scale, bitmap = scale -- localise scale so it can be changed if the character isn't defined\
\9\9\9if characters[char] then\
\9\9\9\9bitmap = characters[char]\
\9\9\9else\
\9\9\9\9bitmap = NO_CHAR_MAP\
\9\9\9\9scale = desiredHeight / 6\
\9\9\9end\
\9\9\9width = width + bitmap.width * scale + spacing * scale\
\9\9end\
\9\9",
                        {
                            " width - ( withLastSpace and 0 or spacing * scale )\
",
                        },
                        "\9end",
                    },
                    193,
                    {
                        {
                            allowsNil = true,
                            name = "text",
                        },
                        {
                            allowsNil = true,
                            name = "withLastSpace",
                        },
                    },
                    [ 6 ] = {
                        "text",
                        "withLastSpace",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                desiredHeight = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                scale = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                characters = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                height = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "0\
\9\
",
                },
                spacing = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "1\
\9\
",
                },
            },
        },
        className = "Font",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                encodeHandle = {
                    "(_C_self_passed,h,characters,height,metadata)",
                    {
                        "\
\9\9if h then\
\9\9\9for k, v in pairs( metadata or {} ) do\
\9\9\9\9h.write( 0 )\
\9\9\9\9writestring( h, tostring( k ) )\
\9\9\9\9h.write( 0 )\
\9\9\9\9writestring( h, tostring( v ) )\
\9\9\9\9h.write( 0 )\
\9\9\9end\
\9\9\9h.write( 1 )\
\9\9\9h.write( height )\
\9\9\9local bytes\
\9\9\9if metadata.fontType == \"vector\" then\
\9\9\9\9bytes = VectorFont.static:encodeSet( characters, height )\
\9\9\9else\
\9\9\9\9bytes = BitmapFont.static:encodeSet( characters, height )\
\9\9\9end\
\9\9\9for _, byte in ipairs( bytes ) do\
\9\9\9\9h.write( byte )\
\9\9\9end\
\9\9\9h.close()\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    112,
                    {
                        {
                            allowsNil = true,
                            name = "h",
                        },
                        {
                            allowsNil = true,
                            name = "characters",
                        },
                        {
                            allowsNil = true,
                            name = "height",
                        },
                        {
                            allowsNil = true,
                            name = "metadata",
                        },
                    },
                    [ 6 ] = {
                        "h",
                        "characters",
                        "height",
                        "metadata",
                    },
                },
                encodeFile = {
                    "(_C_self_passed,file,characters,height,metadata)",
                    {
                        "\
\9\9local h = fs.open( file, \"wb\" )\
\9\9",
                        {
                            " Font.encodeHandle( handle, characters, height, metadata)\
",
                        },
                        "\9end",
                    },
                    107,
                    {
                        {
                            allowsNil = true,
                            name = "file",
                        },
                        {
                            allowsNil = true,
                            name = "characters",
                        },
                        {
                            allowsNil = true,
                            name = "height",
                        },
                        {
                            allowsNil = true,
                            name = "metadata",
                        },
                    },
                    [ 6 ] = {
                        "file",
                        "characters",
                        "height",
                        "metadata",
                    },
                },
                initialisePresets = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9-- TODO: make this come from the theme\
\9\9-- Font.systemFont = Font( \"Napier\" )\
\9\9Font.static.systemFont = Font.static:fromName( \"Auckland\", \"systemFont\" )\
\9end",
                    },
                    86,
                    {},
                    [ 6 ] = {},
                },
                decodeFile = {
                    "(_C_self_passed,file)",
                    {
                        "\
\9\9local h = fs.open( file, \"rb\" )\
\9\9",
                        {
                            " Font.static:decodeHandle( h )\
",
                        },
                        "\9end",
                    },
                    161,
                    {
                        {
                            allowsNil = true,
                            name = "file",
                        },
                    },
                    [ 6 ] = {
                        "file",
                    },
                },
                decodeHandle = {
                    "(_C_self_passed,h)",
                    {
                        "\
\9\9if h then\
\9\9\9local metadata = {}\
\9\9\9local v = h.read()\
\9\9\9while v == 0 do\
\9\9\9\9local key, value = readstring( h ), readstring( h )\
\9\9\9\9metadata[key] = value\
\9\9\9\9v = h.read()\
\9\9\9end\
\9\9\9local height = h.read()\
\9\9\9local bytes = {}\
\9\9\9for byte in h.read do\
\9\9\9\9bytes[#bytes + 1] = byte\
\9\9\9end\
\
\9\9\9local fontType = metadata.fontType\
\9\9\9local characters\
\
\9\9\9if fontType == \"bitmap\" then\
\9\9\9\9characters = BitmapFont.static:decodeSet( bytes, height )\
\9\9\9else\
\9\9\9\9characters = VectorFont.static:decodeSet( bytes, height )\
\9\9\9end\
\9\9\9",
                        {
                            " characters, height, metadata\
",
                        },
                        "\9\9end\
\9end",
                    },
                    166,
                    {
                        {
                            allowsNil = true,
                            name = "h",
                        },
                    },
                    [ 6 ] = {
                        "h",
                    },
                },
                decodeResource = {
                    "(_C_self_passed,resource)",
                    {
                        "\
\9\9-- log(resource)\
\9\9local contents = resource.contents\
\9\9-- log(resource.path)\
\9\9-- log(contents)\
\9\9if contents then\
\9\9\9local i = 1\
\9\9\9local contentsLen = #contents\
\9\9\9local b = string.byte\
\9\9\9local sub = string.sub\
\9\9\9local h = {}\
\
\9\9\9function h.read()\
\9\9\9\9if i <= contentsLen then\
\9\9\9\9\9local value = b( sub( contents, i, i ) )\
\9\9\9\9\9i = i + 1\
\9\9\9\9\9return value\
\9\9\9\9end\
\9\9\9end\
\
\9\9\9",
                        {
                            " Font.static:decodeHandle( h )\
",
                        },
                        "\9\9end\
\9end",
                    },
                    137,
                    {
                        {
                            allowsNil = true,
                            name = "resource",
                        },
                    },
                    [ 6 ] = {
                        "resource",
                    },
                },
                readMetadata = {
                    "(_C_self_passed,file)",
                    {
                        "\
\9\9local h = fs.open( file, \"rb\" )\
\9\9if h then\
\9\9\9local metadata = {}\
\9\9\9local v = h.read()\
\9\9\9while v == 0 do\
\9\9\9\9local key, value = readstring( h ), readstring( h )\
\9\9\9\9metadata[key] = value\
\9\9\9\9v = h.read()\
\9\9\9end\
\9\9\9h.close()\
\9\9\9",
                        {
                            " metadata\
",
                        },
                        "\9\9end\
\9end",
                    },
                    92,
                    {
                        {
                            allowsNil = true,
                            name = "file",
                        },
                    },
                    [ 6 ] = {
                        "file",
                    },
                },
                fromName = {
                    "(_C_self_passed,name,alias)",
                    {
                        "\
\9\9local cache = self.cache\
\9\9local cacheValue = cache[name]\
\9\9if cacheValue then ",
                        {
                            " cacheValue ",
                        },
                        "end\
\9\9local font = Font( name )\
\9\9cache[name] = font\
\9\9if alias then\
\9\9\9cache[alias] = font\
\9\9end\
\9\9",
                        {
                            " font\
",
                        },
                        "\9end",
                    },
                    74,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "name",
                        },
                        {
                            allowsNil = true,
                            type = "String",
                            name = "alias",
                        },
                    },
                    [ 6 ] = {
                        "name",
                        "alias",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                cache = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
\
\9\
\
\
\
\
\
\
\9\
",
                },
                systemFont = {
                    allowsNil = false,
                    link = false,
                    type = "Font",
                    readOnly = false,
                },
            },
        },
    },
    Bundle = {
        fileEnvironment = 106,
        enums = {},
        lineNumber = 22,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Folder",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    path = {
                        "(_C_self_passed,path)\
\9\9path = resolve( path )\
\9\9super( path )\
\
\9\9local configFile = self:find( \"bundle\", Metadata.mimes.SCONFIG, true )\
\9\9if not configFile then\
\9\9\9error( \"Bundle is corrupt (no bundle.sconfig or file mime is incorrect).\" )\
\9\9end\
\
\9\9local config = configFile.serialisedContents\
\9\9if not config then\
\9\9\9error( \"Bundle is corrupt (bundle.sconfig could not be parsed).\" )\
\9\9end\
\
\9\9self.config = config\
\9end",
                        40,
                    },
                },
            },
            functions = {},
            instanceVariables = {},
            properties = {
                config = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
            },
        },
        className = "Bundle",
        fileName = "/src/classes/File System/Bundle.luo",
    },
    ScreenCanvas = {
        fileEnvironment = 128,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Canvas",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\9\9self:fill( Graphics.colours.BLACK )\
\9end",
                    },
                    7,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                drawToScreen = {
                    "(_C_self_passed,screen)",
                    {
                        "\
\9\9if Quartz then\
\9\9\9Quartz:redraw( self.pixels )\
\9\9else\
\9\9\9local pixels, width, height, screenBuffer = self.pixels, self.width, self.height, self.screenBuffer\
\9\9\9-- draw the blacked out corners. this could be done using a Mask if the performance isn't too bad (considering it will be called every single draw)\
\9\9\9local corner = { \
\9\9\9\9[1] = { [1] = true, [2] = true, [3] = true, [4] = true, [height - 3] = true, [height - 2] = true, [height - 1] = true, [height] = true },\
\9\9\9\9[2] = { [1] = true, [2] = true, [height - 1] = true, [height] = true },\
\9\9\9\9[3] = { [1] = true, [height] = true },\
\9\9\9\9[4] = { [1] = true, [height] = true },\
\9\9\9\9[width - 3] = { [1] = true, [height] = true },\
\9\9\9\9[width - 2] = { [1] = true, [height] = true },\
\9\9\9\9[width - 1] = { [1] = true, [2] = true, [height - 1] = true, [height] = true },\
\9\9\9\9[width] = { [1] = true, [2] = true, [3] = true, [4] = true, [height - 3] = true, [height - 2] = true, [height - 1] = true, [height] = true },\
\9\9\9}\
\9\9\9local blackColour = Graphics.colours.BLACK\
\9\9\9for x, v in pairs( corner ) do\
\9\9\9\9for y, v in pairs( v ) do\
\9\9\9\9\9pixels[ ( y - 1 ) * width + x ] = blackColour\
\9\9\9\9end\
\9\9\9end\
\
\9\9\9local blit = term.blit\
\9\9\9local hexes = { \
\9\9\9\9[2^0] = \"0\",\
\9\9\9\9[2^1] = \"1\",\
\9\9\9\9[2^2] = \"2\",\
\9\9\9\9[2^3] = \"3\",\
\9\9\9\9[2^4] = \"4\",\
\9\9\9\9[2^5] = \"5\",\
\9\9\9\9[2^6] = \"6\",\
\9\9\9\9[2^7] = \"7\",\
\9\9\9\9[2^8] = \"8\",\
\9\9\9\9[2^9] = \"9\",\
\9\9\9\9[2^10] = \"a\",\
\9\9\9\9[2^11] = \"b\",\
\9\9\9\9[2^12] = \"c\",\
\9\9\9\9[2^13] = \"d\",\
\9\9\9\9[2^14] = \"e\",\
\9\9\9\9[2^15] = \"f\"\
\9\9\9}\
\9\9\9local currentLength, currentX, currentY, currentColour\
\
\9\9\9local sBC, sCP, w = term.setBackgroundColour, term.setCursorPos, term.write\
\9\9\9local function draw()\
\9\9\9\9if currentLength == 0 then return end\
\9\9\9\9sBC( currentColour )\
\9\9\9\9sCP( currentX, currentY )\
\9\9\9\9w( (\" \"):rep( currentLength ) )\
\9\9\9end\
\
\9\9\9for y = 1, self.height do\
\9\9\9\9currentY = y\
\9\9\9\9currentLength = 0\
\9\9\9\9currentColour = nil\
\9\9\9\9for x = 1, width do\
\9\9\9\9 local p = ( y - 1 ) * width + x\
\9\9\9\9 local c = pixels[p] or colour\
\9\9\9\9 if c ~= screenBuffer[p] then\
\9\9\9\9\9 screenBuffer[p] = c\
\9\9\9\9\9 if currentColour == c then\
\9\9\9\9\9\9 currentLength = currentLength + 1\
\9\9\9\9\9 else\
\9\9\9\9\9\9 draw()\
\9\9\9\9\9\9 currentLength = 1\
\9\9\9\9\9\9 currentX = x\
\9\9\9\9\9\9 currentColour = c\
\9\9\9\9\9 end\
\9\9\9\9 elseif currentLength ~= 0 then\
\9\9\9\9\9 draw()\
\9\9\9\9\9 currentLength = 0\
\9\9\9\9\9 currentColour = nil\
\9\9\9\9 else\
\9\9\9\9\9 currentColour = nil\
\9\9\9\9 end\
\9\9\9\9end\
\9\9\9\9draw()\
\9\9\9\9-- local changed = false\
\9\9\9\9-- local str = \"\"\
\9\9\9\9-- for x = 1, width do\
\9\9\9\9--\9   local p = ( y - 1 ) * width + x\
\9\9\9\9--\9   local c = pixels[p] or blackColour\
\9\9\9\9--\9   str = str .. hexes[c]\
\9\9\9\9--\9   if not changed and c ~= screenBuffer[p] then\
\9\9\9\9--\9\9   changed = true\
\9\9\9\9--\9   end\
\9\9\9\9-- end\
\9\9\9\9-- if changed then\
\9\9\9\9--\9   term.setCursorPos(1,y)\
\9\9\9\9--\9   blit(str)\
\9\9\9\9-- end\
\9\9\9end\
\9\9end\
\9end",
                    },
                    12,
                    {
                        {
                            allowsNil = true,
                            name = "screen",
                        },
                    },
                    [ 6 ] = {
                        "screen",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                drawsCorners = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
                screenBuffer = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\
\
\9\
",
                },
            },
        },
        className = "ScreenCanvas",
        fileName = "/src/classes/Graphics/ScreenCanvas.luo",
    },
    QuartzSettings = {
        fileEnvironment = 24,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Settings",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    backgroundImagePath = {
                        "(_C_self_passed,backgroundImagePath)\
        local container = self.application.container\
        if container then\
            local homeContainer = container.homeContainer \
            if homeContainer then\
                homeContainer.backgroundImage = Image.static:fromPath( backgroundImagePath )\
            end\
        end\
    end",
                        8,
                    },
                },
            },
            functions = {},
            instanceVariables = {},
            properties = {
                isClockTwentyFourHour = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                backgroundImagePath = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                    defaultValue = "\"/system/resources/Wallpapers/Europe/Arc de Triomphe.ucg\"\
\
\
    \
",
                },
                isClockAnalogue = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
            },
        },
        className = "QuartzSettings",
        fileName = "/System/classes/QuartzSettings.luo",
    },
    MoveMouseEvent = {
        fileEnvironment = 78,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"mouse_move\";\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "MouseEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y)",
                    {
                        "\
\9\9self.x = x\
\9\9self.y = y\
\9\9self.globalX = x\
\9\9self.globalY = y\
\9end",
                    },
                    5,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "MoveMouseEvent",
        fileName = "/src/classes/Events/Mouse Events/MoveMouseEvent.luo",
    },
    SplashApplicationContainer = {
        fileEnvironment = 25,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ApplicationContainer",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9    super( ... )\
\9    self:event( ReadyInterfaceEvent, self.onReady)\
\9end",
                    },
                    4,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9    -- self:animate( 'fillColour', { Graphics.colours.BLACK, Graphics.colours.GREY, Graphics.colours.LIGHT_GREY, Graphics.colours.WHITE }, 0.5, nil, Animation.easings.IN_SINE)\
\9    -- self.fillColour = colours.red\
\9    -- self.application:schedule(self.splashView.firstJump, 0.2, self.splashView)\
\9    -- self.application.interfaceName = \"quartz\"\
\9end",
                    },
                    9,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "SplashApplicationContainer",
        fileName = "/System/classes/Splash/SplashApplicationContainer.luo",
    },
    HomeItem = {
        fileEnvironment = 5,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "TopBarItem",
        instance = {
            defaultValues = {
                size = "29\
\
    \
",
                pin = "TopBarItem.pins.LEFT\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
        super( ... )\
        self:event( ActionInterfaceEvent, self.onAction )\
        self:event( ReadyInterfaceEvent, self.onReady )\
    end",
                    },
                    7,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onAction = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
       self.homeContainer:focus() \
    end",
                    },
                    25,
                    {
                        {
                            allowsNil = false,
                            type = "ActionInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.homeContainer = self.application.container.homeContainer\
    end",
                    },
                    13,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
        super()\
        local canvas, theme = self.canvas, self.theme\
        local symbol = theme:value( \"symbol\" )\
        local leftMargin = theme:value( \"leftMargin\" )\
        canvas:fill( theme:value( \"contentColour\" ), SymbolMask( 1 + leftMargin, 1 + math.floor( ( self.height - symbol.height ) / 2 ), symbol ) )\
    end",
                    },
                    17,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                homeContainer = {
                    allowsNil = true,
                    link = false,
                    type = "HomeContainer",
                    readOnly = false,
                },
            },
        },
        className = "HomeItem",
        fileName = "/System/classes/Home/HomeItem.luo",
    },
    DragDropManager = {
        fileEnvironment = 33,
        implements = {},
        lineNumber = 4,
        enums = {
            dropStyles = {
                type = "Number",
                startLine = 16,
                values = "{\
\9\9DISAPPEAR = 0;\
\9\9SHRINK = 1;\
\9\9RETURN = 2;\
\9}\
\
\9\
\
\
\
\9\
",
            },
        },
        fileName = "/src/classes/Clipboard/Drag and Drop/DragDropManager.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,owner)",
                    {
                        "\
\9\9self.owner = owner\
\9\9owner:event( DragMouseEvent, self.onMouseDrag, nil, nil, self )\
\9\9owner:event( UpMouseEvent, self.onMouseUp, nil, nil, self )\
\9end",
                    },
                    26,
                    {
                        {
                            allowsNil = true,
                            name = "owner",
                        },
                    },
                    [ 6 ] = {
                        "owner",
                    },
                },
                cancel = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local dragView = self.dragView\
\9\9if dragView then\
\9\9\9local time, easing = 0.3, Animation.easings.OUT_SINE\
\9\9\9local isMove, completion = self.isMove, self.completion\
\9\9\9local x, y = dragView.x + self.relativeX - 1, dragView.y + self.relativeY - 1\
\9\9\9local sourceViews, data = self.sourceViews, self.data\
\9\9\9for i, view in ipairs( sourceViews ) do\
\9\9\9\9view:dragDropCancelled( data, dragView, x, y )\
\9\9\9end\
\9\9\9\
\9\9\9local dragViewParent = dragView.parent\
\9\9\9if dragViewParent then\
\9\9\9\9local ownerContainer = self.owner.container\
\9\9\9\9local originalX, originalY = ownerContainer.width, ownerContainer.height\
\9\9\9\9for i, view in ipairs( sourceViews ) do\
\9\9\9\9\9local viewX, viewY = view:getPosition()\
\9\9\9\9\9originalX = math.min( originalX, viewX )\
\9\9\9\9\9originalY = math.min( originalY, viewY )\
\9\9\9\9end\
\9\9\9\9dragView:animate( \"x\", originalX, time, nil, easing )\
\9\9\9\9dragView:animate( \"y\", originalY, time, nil, easing )\
\9\9\9\9dragView:animate( \"shadowSize\", 0, time, function()\
\9\9\9\9\9for i, view in ipairs( sourceViews ) do\
\9\9\9\9\9\9if isMove then\
\9\9\9\9\9\9\9view.isVisible = true\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9\9dragView.parent:remove( dragView )\
\9\9\9\9\9if completion then completion() end\
\9\9\9\9end, easing )\
\9\9\9end\
\9\9\9self.dragView = nil\
\9\9end\
\9end",
                    },
                    95,
                    {},
                    [ 6 ] = {},
                },
                updateDestination = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local dragView = self.dragView\
\9\9if dragView then\
\9\9\9local ownerContainer = self.owner.container\
\9\9\9local data, isMove = self.data, self.isMove\
\
\9\9\9local function lookInView( view, x, y )\
\9\9\9\9if view:typeOf( Container ) then\
\9\9\9\9\9local children = view.children\
\9\9\9\9\9for i = #children, 1, -1 do\
\9\9\9\9\9\9local childView = children[i]\
\9\9\9\9\9\9if childView:hitTest( x, y ) then\
\9\9\9\9\9\9\9local destination = lookInView( childView, x - childView.x + 1, y - childView.y + 1 )\
\9\9\9\9\9\9\9if destination then\
\9\9\9\9\9\9\9\9return destination\
\9\9\9\9\9\9\9end\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\
\9\9\9\9if view:typeOf( IDragDropDestination ) and view:canAcceptDragDrop( data, isMove ) then\
\9\9\9\9\9return view\
\9\9\9\9end\
\
\9\9\9\9return nil\
\9\9\9end\
\
\9\9\9local oldDestination = self.destination\
\9\9\9local x, y = dragView.x + self.relativeX - 1, dragView.y + self.relativeY - 1\
\9\9\9local destinationX, destinationY\
\9\9\9local destination = lookInView( ownerContainer, x, y )\
\9\9\9if destination then\
\9\9\9\9destinationX, destinationY = destination:getCoordinates( x, y )\
\9\9\9end\
\
\9\9\9if oldDestination ~= destination then\
\9\9\9\9if oldDestination then\
\9\9\9\9\9local oldDestinationX, oldDestinationY = oldDestination:getCoordinates( x, y )\
\9\9\9\9\9oldDestination:dragDropExited( self.data, dragView, oldDestinationX, oldDestinationY )\
\9\9\9\9end\
\9\9\9\9if destination then\
\9\9\9\9\9destination:dragDropEntered( self.data, dragView, destinationX, destinationY )\
\9\9\9\9end\
\9\9\9\9self.destination = destination\
\9\9\9end\
\9\9\9if destination then\
\9\9\9\9destination:dragDropMoved( self.data, dragView, destinationX, destinationY )\
\9\9\9end\
\9\9else\
\9\9\9self.destination = nil\
\9\9end\
\9end",
                    },
                    211,
                    {},
                    [ 6 ] = {},
                },
                onMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local dragView = self.dragView\
\9\9if dragView then\
\9\9\9local destination = self.destination\
\9\9\9if not destination then\
\9\9\9\9self:cancel()\
\9\9\9\9dragView.x = event.globalX - self.relativeX + 1\
\9\9\9\9dragView.y = event.globalY - self.relativeY + 1\
\9\9\9else\
\9\9\9\9local isMove = self.isMove\
\9\9\9\9local x, y = dragView.x + self.relativeX - 1, dragView.y + self.relativeY - 1\
\9\9\9\9destination:dragDropDropped( self.data, isMove, x, y )\
\9\9\9\9local dropStyle = destination.dropStyle\
\9\9\9\9local dropStyles = DragDropManager.dropStyles\
\9\9\9\9local function done()\
\9\9\9\9\9if isMove then\
\9\9\9\9\9\9for i, view in ipairs( self.sourceViews ) do\
\9\9\9\9\9\9\9view.isVisible = true\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9\9dragView.parent:remove( dragView )\
\9\9\9\9\9local completion = self.completion\
\9\9\9\9\9if completion then completion( destination ) end\
\9\9\9\9end\
\9\9\9\9if dropStyle == dropStyles.SHRINK then\
\9\9\9\9\9local time, easing = 0.2, Animation.easings.OUT_SINE\
\9\9\9\9\9dragView:animate( \"width\", 1, time, done, easing )\
\9\9\9\9\9dragView:animate( \"height\", 1, time, nil, easing )\
\9\9\9\9\9dragView:animate( \"x\", x, time, nil, easing )\
\9\9\9\9\9dragView:animate( \"y\", y, time, nil, easing )\
\9\9\9\9\9dragView.shadowSize = 0\
\9\9\9\9elseif dropStyle == dropStyles.RETURN then\
\9\9\9\9\9local time, easing = 0.2, Animation.easings.OUT_SINE\
\9\9\9\9\9local originalX, originalY = self.owner.container.width, self.owner.container.height\
\9\9\9\9\9for i, view in ipairs( self.sourceViews ) do\
\9\9\9\9\9\9local viewX, viewY = view:getPosition()\
\9\9\9\9\9\9originalX = math.min( originalX, viewX )\
\9\9\9\9\9\9originalY = math.min( originalY, viewY )\
\9\9\9\9\9end\
\9\9\9\9\9dragView:animate( \"x\", originalX, time, done, easing )\
\9\9\9\9\9dragView:animate( \"y\", originalY, time, nil, easing )\
\9\9\9\9\9dragView:animate( \"shadowSize\", 0, time, nil, easing )\
\9\9\9\9else\
\9\9\9\9\9done()\
\9\9\9\9end\
\9\9\9\9self.dragView = nil\
\9\9\9\9self.destination = nil\
\9\9\9end\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    156,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                start = {
                    "(_C_self_passed,views,data,relativeX,relativeY,isMove,completion)",
                    {
                        "\
\9\9local x, y, x2, y2 = self.owner.container.width, self.owner.container.height, 1, 1\
\9\9local images = {}\
\9\9for i, view in ipairs( views ) do\
\9\9\9if not view:typeOf( IDraggableView ) then\
\9\9\9\9error( \"Drag and drop can only be used on Views the implement IDraggableView.\", 4 )\
\9\9\9end\
\
\9\9\9local viewX, viewY = view:getPosition()\
\9\9\9local viewWidth, viewHeight = view.width, view.height\
\9\9\9x = math.min( x, viewX )\
\9\9\9y = math.min( y, viewY )\
\9\9\9x2 = math.max( x2, viewX + viewWidth - 1 )\
\9\9\9y2 = math.max( y2, viewY + viewHeight - 1 )\
\9\9\9table.insert( images, { viewX, viewY, view.canvas:toImage(), view.shadowMask } )\
\
\9\9\9if isMove then\
\9\9\9\9view.isVisible = false\
\9\9\9end\
\9\9end\
\
\9\9local width, height = x2 - x + 1, y2 - y + 1\
\9\9local image = Image.static:blank( width, height )\
\9\9local shadowMask = Mask( 1, 1, width, height )\
\9\9for i, imageData in ipairs( images ) do\
\9\9\9local _x, _y = imageData[1] - x + 1, imageData[2] - y + 1\
\9\9\9image:appendImage( imageData[3], _x, _y )\
\9\9\9shadowMask = shadowMask:add( imageData[4], _x, _y )\
\9\9end\
\
\9\9self:cancel()\
\9\9local dragView = DragView( {\
\9\9\9width = width;\
\9\9\9height = height;\
\9\9\9x = x;\
\9\9\9y = y;\
\9\9\9image = image;\
\9\9\9shadowMask = shadowMask;\
\9\9} )\
\9\9self.owner.container:insert( dragView )\
\9\9self.dragView = dragView\
\9\9self.data = data\
\9\9self.relativeX = relativeX - x + 1\
\9\9self.relativeY = relativeY - y + 1\
\9\9self.isMove = isMove\
\9\9self.completion = completion\
\9\9self.sourceViews = views\
\9\9dragView:animate( \"shadowSize\", MAX_SHADOW_SIZE, 0.2, nil, Animation.easings.IN_SINE )\
\9end",
                    },
                    41,
                    {
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "views",
                        },
                        {
                            allowsNil = false,
                            type = "ClipboardData",
                            name = "data",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "relativeX",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "relativeY",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isMove",
                            defaultValue = "true",
                        },
                        {
                            allowsNil = true,
                            type = "Function",
                            name = "completion",
                        },
                    },
                    [ 6 ] = {
                        "views",
                        "data",
                        "relativeX",
                        "relativeY",
                        "isMove",
                        "completion",
                    },
                },
                onMouseDrag = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9local dragView = self.dragView\
\9\9if dragView then\
\9\9\9dragView.x = event.x - self.relativeX + 1\
\9\9\9dragView.y = event.y - self.relativeY + 1\
\9\9\9self:updateDestination()\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    141,
                    {
                        {
                            allowsNil = false,
                            type = "Event",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                sourceViews = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                owner = {
                    allowsNil = false,
                    link = false,
                    type = "Application",
                    readOnly = false,
                },
                dragView = {
                    allowsNil = true,
                    link = false,
                    type = "DragView",
                    readOnly = false,
                },
                data = {
                    allowsNil = true,
                    link = false,
                    type = "ClipboardData",
                    readOnly = false,
                },
                isMove = {
                    allowsNil = true,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
                relativeY = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                completion = {
                    allowsNil = true,
                    link = false,
                    type = "Function",
                    readOnly = false,
                },
                relativeX = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                destination = {
                    allowsNil = true,
                    link = false,
                    type = "View",
                    readOnly = false,
                },
            },
        },
        className = "DragDropManager",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    TextChangedInterfaceEvent = {
        fileEnvironment = 67,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_text\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,text,oldText)",
                    {
                        "\
\9\9self.text = text\
\9\9self.oldText = oldText\
\9end",
                    },
                    8,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "text",
                        },
                        {
                            allowsNil = false,
                            type = "String",
                            name = "oldText",
                        },
                    },
                    [ 6 ] = {
                        "text",
                        "oldText",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                oldText = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                text = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "TextChangedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/TextChangedInterfaceEvent.luo",
    },
    TopBarContainer = {
        fileEnvironment = 27,
        enums = {},
        lineNumber = 5,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Container",
        instance = {
            defaultValues = {
                interfaceName = "\"topbarcontainer\"\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    activeView = {
                        "(_C_self_passed,activeView)\
        local oldView = self.activeView\
        if not activeView then\
            local focusedSwitchableView = self.application:focusesOfType( ISwitchableView )[1]\
            activeView = self.switchableItems[focusedSwitchableView]\
        end\
        activeView:updateThemeStyle()\
        self.activeView = activeView\
        local separatorView = self.separatorView\
        local pin = activeView.pin\
        local x, width = activeView.x + (pin == pins.RIGHT and 1 or 0), activeView.width - 1\
        separatorView:animate( \"activeX\", x, ANIMATION_TIME, nil, ANIMATION_EASING )\
        separatorView:animate( \"activeWidth\", width, ANIMATION_TIME, nil, ANIMATION_EASING )\
    end",
                        31,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
        super( ... )\
        self:event( ReadyInterfaceEvent, self.onReady )\
        self:event( ChildAddedInterfaceEvent, self.onChildAdded )\
        self:event( ChildRemovedInterfaceEvent, self.onChildRemoved )\
        self:event( FocusesChangedInterfaceEvent, self.onFocusesChanged )\
        self:event( ProgramOpenedInterfaceEvent, self.onProgramOpened )\
        self:event( ProgramClosedInterfaceEvent, self.onProgramClosed )\
    end",
                    },
                    14,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onFocusesChanged = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        local oldFocusedSwitchableViews = self.application:focusesOfType( ISwitchableView, event.oldFocuses )\
        local focusedSwitchableViews = self.application:focusesOfType( ISwitchableView, event.newFocuses )\
\
        if #focusedSwitchableViews > 0 then\
            local oldSwitchableView = oldFocusedSwitchableViews[1]\
            local switchableView = focusedSwitchableViews[1]\
            if switchableView ~= oldSwitchableView then\
                if oldSwitchableView then\
                    self.switchableItems[oldSwitchableView]:updateThemeStyle()\
                end\
                self.activeView = self.switchableItems[switchableView]\
            end\
        else\
            self.activeView = nil\
        end\
    end",
                    },
                    155,
                    {
                        {
                            allowsNil = false,
                            type = "FocusesChangedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onChildRemoved = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.needsLayoutUpdate = true\
    end",
                    },
                    151,
                    {
                        {
                            allowsNil = false,
                            type = "ChildRemovedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                updateLayout = {
                    "(_C_self_passed,dontAnimate)",
                    {
                        "\
        local width = self.width\
        local remainingWidth = width + 1 -- add one to hide the last separator between the left and right pinned items\
        local leftX, rightX = 1, -1\
        local dynamicItems = {}\
        local activeIndex\
        local activeView, separatorView = self.activeView, self.separatorView\
\
        local function updateFrame( childView, x, width )\
            local isVisible = dontAnimate and true or childView.isVisible\
\
            local separatorX, separatorWidth = x + (pin == pins.RIGHT and 1 or 0), width - 1\
            if dontAnimate or not isVisible then\
                childView.x = x\
                childView.width = width\
                if not isVisible then\
                    childView:animate( \"y\", 1, ANIMATION_TIME, function() childView.isSeparatorVisible = true end, Animation.easings.IN_SINE )\
                    childView.isVisible = true\
                end\
            else\
                childView:animate( \"x\", x, ANIMATION_TIME, nil, ANIMATION_EASING )\
                childView:animate( \"width\", width, ANIMATION_TIME, nil, ANIMATION_EASING )\
            end\
            if childView == activeView then\
                separatorView:animate( \"activeX\", separatorX, ANIMATION_TIME, nil, ANIMATION_EASING )\
                separatorView:animate( \"activeWidth\", separatorWidth, ANIMATION_TIME, nil, ANIMATION_EASING )\
            end\
        end\
\
        for i, childView in ipairs( self.children ) do\
            if not childView:typeOf( SeparatorView ) and not childView.isRemoving then\
                local pin, size = childView.pin, childView.size\
                if size then\
                    if pin == pins.LEFT then\
                        updateFrame( childView, leftX, size )\
                        remainingWidth = remainingWidth - size\
                        leftX = leftX + size\
                    elseif pin == pins.RIGHT then\
                        rightX = rightX + size\
                        updateFrame( childView, width - rightX, size )\
                        remainingWidth = remainingWidth - size\
                    end\
                else\
                    if not activeIndex and childView.isActive then\
                        activeIndex = #dynamicItems + 1\
                    end\
                    table.insert( dynamicItems, childView )\
                end\
            end\
        end\
\
        activeIndex = activeIndex or 1\
\
        local itemCount = #dynamicItems\
        if itemCount > 0 then\
            local eachWidthDecimal = remainingWidth / itemCount\
            local standardWidth = math.ceil( eachWidthDecimal )\
            local activeWidth = remainingWidth - (itemCount - 1) * standardWidth\
\
            for i, childView in ipairs( dynamicItems) do\
                local size = activeIndex == i and activeWidth or standardWidth\
                updateFrame( childView, leftX, size )\
                leftX = leftX + size\
            end\
        end\
\
        self.needsLayoutUpdate = false\
    end",
                    },
                    46,
                    {
                        {
                            allowsNil = true,
                            name = "dontAnimate",
                        },
                    },
                    [ 6 ] = {
                        "dontAnimate",
                    },
                },
                onReady = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self.switchableItems[self.application.container.homeContainer] = self.homeItem\
        self:updateLayout( true )\
        self:animate( \"y\", 1, 0.6, nil, Animation.easings.OUT_QUART, 0.5 )\
    end",
                    },
                    24,
                    {
                        {
                            allowsNil = false,
                            type = "ReadyInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onProgramOpened = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        local program = event.program\
        self.switchableItems[program.programView] = self:insert( ProgramItem( { program = program } ) )\
    end",
                    },
                    129,
                    {
                        {
                            allowsNil = false,
                            type = "ProgramOpenedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                animateRemove = {
                    "(_C_self_passed,childView)",
                    {
                        "\
        childView:animate( \"y\", 1 - childView.height, ANIMATION_TIME, function() self:remove( childView )  end, ANIMATION_EASING )\
        childView.isRemoving = true\
        childView.isSeparatorVisible = false\
        self.needsLayoutUpdate = true\
    end",
                    },
                    122,
                    {
                        {
                            allowsNil = true,
                            name = "childView",
                        },
                    },
                    [ 6 ] = {
                        "childView",
                    },
                },
                onChildAdded = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        local childView = event.childView\
        if childView:typeOf( ProgramItem ) then\
            childView.y = self.height + 1\
            childView.isVisible = false\
            childView.isSeparatorVisible = false\
            childView.isRemoving = false\
        end\
\
        self.needsLayoutUpdate = true\
        self:sendToFront( self.separatorView )\
    end",
                    },
                    138,
                    {
                        {
                            allowsNil = false,
                            type = "ChildAddedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
        super( deltaTime )\
        if self.needsLayoutUpdate then\
            self:updateLayout()\
        end\
    end",
                    },
                    115,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                onProgramClosed = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        self:animateRemove( self.switchableItems[event.program.programView] )\
    end",
                    },
                    134,
                    {
                        {
                            allowsNil = false,
                            type = "ProgramClosedInterfaceEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                separatorView = {
                    allowsNil = false,
                    link = true,
                    type = "TopBarSeparatorView",
                    readOnly = false,
                },
                homeItem = {
                    allowsNil = false,
                    link = true,
                    type = "HomeItem",
                    readOnly = false,
                },
                switchableItems = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\
    \
",
                },
                needsLayoutUpdate = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                activeView = {
                    allowsNil = true,
                    link = false,
                    type = "TopBarItem",
                    readOnly = false,
                },
            },
        },
        className = "TopBarContainer",
        fileName = "/System/classes/TopBar/TopBarContainer.luo",
    },
    SilicaProgramEnvironment = {
        fileEnvironment = 21,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ProgramEnvironment",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "SilicaProgramEnvironment",
        fileName = "/System/classes/Program Managing/SilicaProgramEnvironment.luo",
    },
    EnteredInterfaceMouseEvent = {
        fileEnvironment = 60,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_mouse_entered\";\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Event",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,x,y)",
                    {
                        "\
\9\9self.x = x\
\9\9self.y = y\
\9end",
                    },
                    10,
                    {
                        {
                            allowsNil = true,
                            name = "x",
                        },
                        {
                            allowsNil = true,
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                y = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                x = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
            },
        },
        className = "EnteredInterfaceMouseEvent",
        fileName = "/src/classes/Events/Interface Events/MouseEnteredInterfaceEvent.luo",
    },
    SiblingRemovedInterfaceEvent = {
        fileEnvironment = 66,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_sibling_removed\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,view)",
                    {
                        "\
\9\9self.view = view\
\9end",
                    },
                    8,
                    {
                        {
                            allowsNil = false,
                            type = "View",
                            name = "view",
                        },
                    },
                    [ 6 ] = {
                        "view",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                view = {
                    allowsNil = false,
                    link = false,
                    type = "View",
                    readOnly = false,
                },
            },
        },
        className = "SiblingRemovedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/SiblingRemovedInterfaceEvent.luo",
    },
    Package = {
        fileEnvironment = 112,
        enums = {},
        lineNumber = 104,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                make = {
                    "(_C_self_passed,path,overwrite,folder,isResourcePackage)",
                    {
                        "\
\9\9local contents = \"\"\
\9\9if isResourcePackage then\
\9\9\9local folders = {}\
\9\9\9for i, item in ipairs( folder.items ) do\
\9\9\9\9local itemName = item.fullName\
\9\9\9\9if RESOURCE_PACKAGE_FOLDERS[itemName] and item:typeOf( Folder ) then\
\9\9\9\9\9folders[itemName] = item:serialise( true )\
\9\9\9\9end\
\9\9\9end\
\9\9\9contents = \"local files = \" .. serialise(folders, {}) .. RESOURCE_PACKAGE_TEMPLATE\
\9\9\9-- contents = textutils.serialize(folders)\
\9\9else\
\9\9\9local allItems = folder:serialise( false )\
\9\9\9contents = serialise(allItems, {})\
\9\9\9-- contents = textutils.serialize(allItems)\
\9\9end\
\9\9-- log(contents)\
\9\9-- log( serialise( allItems, {} ) )\
\9\9",
                        {
                            " super( path, isResourcePackage and Metadata.mimes.RESOURCEPKG or Metadata.mimes.PACKAGE, overwrite, contents )\
",
                        },
                        "\9end",
                    },
                    107,
                    {
                        {
                            allowsNil = true,
                            name = "path",
                        },
                        {
                            allowsNil = true,
                            name = "overwrite",
                        },
                        {
                            allowsNil = false,
                            type = "Folder",
                            name = "folder",
                        },
                        {
                            allowsNil = true,
                            name = "isResourcePackage",
                        },
                    },
                    [ 6 ] = {
                        "path",
                        "overwrite",
                        "folder",
                        "isResourcePackage",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "File",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "Package",
        fileName = "/src/classes/File System/Package.luo",
    },
    PseudoReferenceClassException = {
        fileEnvironment = 91,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClassException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Incorrect usage of PseudoReferences: \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "PseudoReferenceClassException",
        fileName = "/src/classes/Exceptions/Class System/PseudoReferenceClassException.luo",
    },
    ValueTypeClassException = {
        fileEnvironment = 93,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClassException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Incorrect usage of ValueTypes: \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "ValueTypeClassException",
        fileName = "/src/classes/Exceptions/Class System/ValueTypeClassException.luo",
    },
    TextCursor = {
        fileEnvironment = 44,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Cursor",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "TextCursor",
        fileName = "/src/classes/Cursors/TextCursor.luo",
    },
    FocusesChangedInterfaceEvent = {
        fileEnvironment = 55,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_focuses_changed\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,newFocuses,oldFocuses)",
                    {
                        "\
\9\9self.newFocuses = newFocuses\
\9\9self.oldFocuses = oldFocuses\
\9end",
                    },
                    8,
                    {
                        {
                            allowsNil = false,
                            type = "{View}",
                            name = "newFocuses",
                        },
                        {
                            allowsNil = false,
                            type = "{View}",
                            name = "oldFocuses",
                        },
                    },
                    [ 6 ] = {
                        "newFocuses",
                        "oldFocuses",
                    },
                },
                contains = {
                    "(_C_self_passed,view)",
                    {
                        "\
\9\9",
                        {
                            " self.newFocuses[view] ~= nil\
",
                        },
                        "\9end",
                    },
                    18,
                    {
                        {
                            allowsNil = false,
                            type = "View",
                            name = "view",
                        },
                    },
                    [ 6 ] = {
                        "view",
                    },
                },
                didContain = {
                    "(_C_self_passed,view)",
                    {
                        "\
\9\9",
                        {
                            " self.oldFocuses[view] ~= nil\
",
                        },
                        "\9end",
                    },
                    27,
                    {
                        {
                            allowsNil = false,
                            type = "View",
                            name = "view",
                        },
                    },
                    [ 6 ] = {
                        "view",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                oldFocuses = {
                    allowsNil = false,
                    link = false,
                    type = "{View}",
                    readOnly = false,
                },
                newFocuses = {
                    allowsNil = false,
                    link = false,
                    type = "{View}",
                    readOnly = false,
                },
            },
        },
        className = "FocusesChangedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/FocusesChangedInterfaceEvent.luo",
    },
    UpMouseEvent = {
        fileEnvironment = 80,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"mouse_up\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "MouseEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,mouseButton,x,y)",
                    {
                        "\
\9\9self.mouseButton = mouseButton\
\9\9self.x = x\
\9\9self.y = y\
\9\9self.globalX = x\
\9\9self.globalY = y\
\9end",
                    },
                    14,
                    {
                        {
                            allowsNil = false,
                            type = "MouseEvent.mouseButtons",
                            name = "mouseButton",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "mouseButton",
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                mouseButton = {
                    allowsNil = false,
                    link = false,
                    type = "MouseEvent.mouseButtons",
                    readOnly = false,
                },
            },
        },
        className = "UpMouseEvent",
        fileName = "/src/classes/Events/Mouse Events/UpMouseEvent.luo",
    },
    MathParser = {
        fileEnvironment = 37,
        implements = {},
        lineNumber = 440,
        enums = {},
        fileName = "/src/classes/Constraints/MathParser.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,str)",
                    {
                        "\
\9\9local tokens = lex( str )\
\9\9parseRelativeIndexes( tokens )\
\9\9parseMathConstants( tokens )\
\9\9self.tokens = group( checkfunctionCalls( parse( tokens ) ) )\
\9end",
                    },
                    444,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "str",
                        },
                    },
                    [ 6 ] = {
                        "str",
                    },
                },
                value = {
                    "(_C_self_passed,percentageValue,referencePropertyName,references)",
                    {
                        "\
\9\9local knownList = MathParser.static:resolve( self.tokens, percentageValue, referencePropertyName, references )\
\9\9",
                        {
                            " eval.knownList( knownList )\
",
                        },
                        "\9end",
                    },
                    534,
                    {
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "percentageValue",
                        },
                        {
                            allowsNil = true,
                            type = "String",
                            name = "referencePropertyName",
                        },
                        {
                            allowsNil = true,
                            type = "Table",
                            name = "references",
                        },
                    },
                    [ 6 ] = {
                        "percentageValue",
                        "referencePropertyName",
                        "references",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                tokens = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
            },
        },
        className = "MathParser",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                resolve = {
                    "(_C_self_passed,tokens,percentageValue,referencePropertyName,references)",
                    {
                        "\
\9\9local knownList = {}\
\9\9for i = 1, #tokens do\
\9\9\9local token = tokens[i]\
\9\9\9if type( token ) == \"number\" or type( token ) == \"string\" then -- these will be raw numbers\
\9\9\9\9knownList[#knownList + 1] = token\
\9\9\9else\
\9\9\9\9local tokenType = token.type\
\9\9\9\9if tokenType == \"constant\" then -- these will be raw numbers\
\9\9\9\9\9knownList[#knownList + 1] = token.value\
\9\9\9\9elseif tokenType == \"percentage\" then -- these will be raw numbers\
\9\9\9\9\9knownList[#knownList + 1] = token.value * percentageValue\
\9\9\9\9elseif tokenType == \"bracket\" then -- this will be a bracket token\
\9\9\9\9\9knownList[#knownList + 1] = {\
\9\9\9\9\9\9type = \"bracket\";\
\9\9\9\9\9\9value = MathParser.static:resolve( token.value, percentageValue, references )\
\9\9\9\9\9}\
\9\9\9\9elseif tokenType == \"call\" then -- this will be a call token\
\9\9\9\9\9local parameters = {}\
\9\9\9\9\9for i, v in ipairs( token.value.parameters ) do\
\9\9\9\9\9\9parameters[i] = MathParser.static:resolve( v, percentageValue, references )\
\9\9\9\9\9end\
\9\9\9\9\9knownList[#knownList + 1] = {\
\9\9\9\9\9\9type = \"call\";\
\9\9\9\9\9\9value = {\
\9\9\9\9\9\9\9func = token.value.func;\
\9\9\9\9\9\9\9parameters = parameters;\
\9\9\9\9\9\9}\
\9\9\9\9\9}\
\9\9\9\9elseif tokenType == \"relative\" then -- this will be a raw number\
\9\9\9\9\9local identifier, index = token.value.parent, token.value.index\
\9\9\9\9\9local value = 0\
\
\9\9\9\9\9if identifier == \"self\" and referencePropertyName == index then\
\9\9\9\9\9\9error( \"Cannot use recursive constraint index. (tried to use self.\" .. index .. \" within self.\" .. index .. \")\", 0 )\
\9\9\9\9\9else\
\9\9\9\9\9\9local reference = references[identifier]\
\9\9\9\9\9\9if reference then\
\9\9\9\9\9\9\9value = reference[index]\
\9\9\9\9\9\9else\
\9\9\9\9\9\9\9error( \"Could not find view '\" .. identifier .. \"'\", 0 )\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9\9knownList[#knownList + 1] = value\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " knownList\
",
                        },
                        "\9end",
                    },
                    481,
                    {
                        {
                            allowsNil = false,
                            type = "Table",
                            name = "tokens",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "percentageValue",
                        },
                        {
                            allowsNil = true,
                            type = "String",
                            name = "referencePropertyName",
                        },
                        {
                            allowsNil = true,
                            type = "Table",
                            name = "references",
                        },
                    },
                    [ 6 ] = {
                        "tokens",
                        "percentageValue",
                        "referencePropertyName",
                        "references",
                    },
                },
                simplify = {
                    "(_C_self_passed,tokens)",
                    {
                        "\
\9\9for i = 1, #tokens do\
\9\9\9if type( tokens[i] ) ~= \"string\" then\
\9\9\9\9if isKnownValue( tokens[i] ) then\
\9\9\9\9\9tokens[i] = eval.knownValue( tokens[i] )\
\9\9\9\9elseif tokens[i].type == \"bracket\" then\
\9\9\9\9\9tokens[i].value = MathParser.static:simplify( tokens[i].value )\
\9\9\9\9elseif tokens[i].type == \"call\" then\
\9\9\9\9\9local p = tokens[i].value.parameters\
\9\9\9\9\9for i = 1, #p do\
\9\9\9\9\9\9p[i] = MathParser.static:simplify( p[i] )\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9for i = 1, #tokens do\
\9\9\9if type( tokens[i] ) == \"table\" and tokens[i].type == \"constant\" then\
\9\9\9\9tokens[i] = tokens[i].value\
\9\9\9end\
\9\9end\
\9\9for i = 1, #tokens do\
\9\9\9if i % 2 == 1 and not isKnownValue( tokens[i] ) then\
\9\9\9\9",
                        {
                            " tokens\
",
                        },
                        "\9\9\9end\
\9\9end\
\9\9",
                        {
                            " { eval.knownList( tokens ) }\
",
                        },
                        "\9end",
                    },
                    451,
                    {
                        {
                            allowsNil = true,
                            name = "tokens",
                        },
                    },
                    [ 6 ] = {
                        "tokens",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
    },
    SiblingAddedInterfaceEvent = {
        fileEnvironment = 65,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_sibling_added\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,view)",
                    {
                        "\
\9\9self.view = view\
\9end",
                    },
                    8,
                    {
                        {
                            allowsNil = false,
                            type = "View",
                            name = "view",
                        },
                    },
                    [ 6 ] = {
                        "view",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                view = {
                    allowsNil = false,
                    link = false,
                    type = "View",
                    readOnly = false,
                },
            },
        },
        className = "SiblingAddedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/SiblingAddedInterfaceEvent.luo",
    },
    DownMouseEvent = {
        fileEnvironment = 74,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"mouse_click\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "MouseEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,mouseButton,x,y)",
                    {
                        "\
\9\9self.mouseButton = mouseButton\
\9\9self.x = x\
\9\9self.y = y\
\9\9self.globalX = x\
\9\9self.globalY = y\
\9end",
                    },
                    14,
                    {
                        {
                            allowsNil = false,
                            type = "MouseEvent.mouseButtons",
                            name = "mouseButton",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                    },
                    [ 6 ] = {
                        "mouseButton",
                        "x",
                        "y",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                mouseButton = {
                    allowsNil = false,
                    link = false,
                    type = "MouseEvent.mouseButtons",
                    readOnly = false,
                },
            },
        },
        className = "DownMouseEvent",
        fileName = "/src/classes/Events/Mouse Events/DownMouseEvent.luo",
    },
    HeldMouseEvent = {
        fileEnvironment = 76,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"mouse_held\"\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "MouseEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\
\9\
\
\
\
\
\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,mouseButton,x,y,globalX,globalY)",
                    {
                        "\
\9\9self.mouseButton = mouseButton\
\9\9self.x = x\
\9\9self.y = y\
\9\9self.globalX = globalX\
\9\9self.globalY = globalY\
\9end",
                    },
                    15,
                    {
                        {
                            allowsNil = false,
                            type = "MouseEvent.mouseButtons",
                            name = "mouseButton",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "x",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "y",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "globalX",
                        },
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "globalY",
                        },
                    },
                    [ 6 ] = {
                        "mouseButton",
                        "x",
                        "y",
                        "globalX",
                        "globalY",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                mouseButton = {
                    allowsNil = false,
                    link = false,
                    type = "MouseEvent.mouseButtons",
                    readOnly = false,
                },
            },
        },
        className = "HeldMouseEvent",
        fileName = "/src/classes/Events/Mouse Events/HeldMouseEvent.luo",
    },
    ChildRemovedInterfaceEvent = {
        fileEnvironment = 51,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"interface_child_removed\";\
\9\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "InterfaceEvent",
        instance = {
            defaultValues = {
                isSentToChildren = "false\
\9\
",
                isSentToParents = "true\
\
\9\
\
\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,childView,container)",
                    {
                        "\
\9\9self.childView = childView\
\9\9self.container = container\
\9end",
                    },
                    15,
                    {
                        {
                            allowsNil = false,
                            type = "View",
                            name = "childView",
                        },
                        {
                            allowsNil = false,
                            type = "Container",
                            name = "container",
                        },
                    },
                    [ 6 ] = {
                        "childView",
                        "container",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                container = {
                    allowsNil = false,
                    link = false,
                    type = "Container",
                    readOnly = false,
                },
                childView = {
                    allowsNil = false,
                    link = false,
                    type = "View",
                    readOnly = false,
                },
            },
        },
        className = "ChildRemovedInterfaceEvent",
        fileName = "/src/classes/Events/Interface Events/ChildRemovedInterfaceEvent.luo",
    },
    TopBarItem = {
        fileEnvironment = 28,
        enums = {
            pins = {
                type = "Number",
                startLine = 8,
                values = "{\
        LEFT = 0;\
        RIGHT = 1;\
    }\
    \
\9\
",
            },
        },
        lineNumber = 6,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                height = "14\
\9\
",
                cursor = "ClickableCursor.static\
\
\
    \
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isPressed = {
                        "(_C_self_passed,isPressed)\
        self.isPressed = isPressed\
        self:updateThemeStyle()\
    end",
                        51,
                    },
                    isSeparatorVisible = {
                        "(_C_self_passed,isSeparatorVisible)\
        self.isSeparatorVisible = isSeparatorVisible    \
        self.needsDraw = true\
    end",
                        42,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
        super( ... )\
        self:event( DownMouseEvent, self.onMouseDown )\
        self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
    end",
                    },
                    23,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
        self.theme.style = self.isPressed and \"pressed\" or \"default\"\
    end",
                    },
                    47,
                    {},
                    [ 6 ] = {},
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
            local parent = self.parent\
            if parent.activeView == self then\
                parent.activeView = nil\
            end\
            self.isPressed = false\
            if self:hitTestEvent( event ) then\
                self.eventManager:handleEvent( ActionInterfaceEvent( self, event ) )\
                local result = self.eventManager:handleEvent( event )\
                ",
                        {
                            " result == nil and true or result\
",
                        },
                        "            end\
        end\
    end",
                    },
                    64,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
        super()\
        local width, height, theme, canvas, isPinnedRight = self.width, self.height, self.theme, self.canvas, self.pin == pins.RIGHT\
\
        local rectangleMask = RectangleMask( isPinnedRight and 2 or 1, 1, width - 1, height )\
        canvas:fill( theme:value( \"fillColour\" ), rectangleMask )\
\
        if self.isSeparatorVisible then\
            local separatorTopMargin, separatorBottomMargin = theme:value( \"separatorTopMargin\" ), theme:value( \"separatorBottomMargin\" )\
            canvas:fill( theme:value( \"separatorColour\" ), theme:value( \"separatorIsDashed\" ) and SeparatorMask( isPinnedRight and 1 or width, 1 + separatorTopMargin, 1, height - separatorTopMargin - separatorBottomMargin ) or RectangleMask( isPinnedRight and 1 or width, 1 + separatorTopMargin, 1, separatorHeight ) )\
        end\
    end",
                    },
                    29,
                    {},
                    [ 6 ] = {},
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
        if event.mouseButton == MouseEvent.mouseButtons.LEFT then\
            self.isPressed = true\
            self.parent.activeView = self\
        end\
        ",
                        {
                            " true\
",
                        },
                        "    end",
                    },
                    56,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                size = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                isRemoving = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                isSeparatorVisible = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\
    \
",
                },
                pin = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                    defaultValue = "TopBarItem.pins.LEFT\
\9\
",
                },
            },
        },
        className = "TopBarItem",
        fileName = "/System/classes/TopBar/TopBarItem.luo",
    },
    KeyboardShortcut = {
        fileEnvironment = 139,
        implements = {},
        lineNumber = 8,
        enums = {},
        fileName = "/src/classes/KeyboardShortcut.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9self.keys = { ... }\
\9end",
                    },
                    17,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                matchesEvent = {
                    "(_C_self_passed,event)",
                    {
                        "\
\9\9",
                        {
                            " event:matchesKeys( self.keys )\
",
                        },
                        "\9end",
                    },
                    62,
                    {
                        {
                            allowsNil = true,
                            name = "event",
                        },
                    },
                    [ 6 ] = {
                        "event",
                    },
                },
                symbols = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local symbols = \"\"\
\9\9local static = KeyboardShortcutManager.static\
\9\9for i, keyString in ipairs( self.keys ) do\
\9\9\9symbols = symbols .. static:symbol( keyString )\
\9\9end\
\9\9",
                        {
                            " symbols\
",
                        },
                        "\9end",
                    },
                    25,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                keys = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\
\9\
\
\
\
\
\9\
",
                },
            },
        },
        className = "KeyboardShortcut",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                fromString = {
                    "(_C_self_passed,str)",
                    {
                        "\
\9\9local parts = split( str, \" \" )\
\9\9local keys = {}\
\
\9\9local static = KeyboardShortcutManager.static\
\9\9for i, key in ipairs( parts ) do\
\9\9\9if #key > 0 then\
\9\9\9\9if static:isValid( key ) then\
\9\9\9\9\9table.insert( keys, key )\
\9\9\9\9else\
\9\9\9\9\9error( \"Invalid keyboard shortcut '\" .. str ..\"'. The key '\" .. key .. \"' is not valid. Omit sides (i.e. leftShift is just shift) and use the character where possible (i.e. / not slash)\", 0 )\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\
\9\9",
                        {
                            " KeyboardShortcut( unpack( keys ) )\
",
                        },
                        "\9end",
                    },
                    39,
                    {
                        {
                            allowsNil = true,
                            name = "str",
                        },
                    },
                    [ 6 ] = {
                        "str",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
    },
    Button = {
        fileEnvironment = 166,
        enums = {},
        lineNumber = 3,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "View",
        instance = {
            defaultValues = {
                isCanvasHitTested = "true\
\
\9\
",
                width = "36\
\9\
",
                isFocused = "false\
\9\
",
                isFocusDismissable = "true\
\9\
",
                height = "16\
\9\
",
                cursor = "ClickableCursor.static\
\
\9\
\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    isFocused = {
                        "(_C_self_passed,isFocused)\
\9\9self.isFocused = isFocused\
\9\9self:updateThemeStyle()\
\9end",
                        98,
                    },
                    isEnabled = {
                        "(_C_self_passed,isEnabled)\
\9\9self.isEnabled = isEnabled\
\9\9self.cursor = isEnabled and ClickableCursor.static or Cursor.static\
\9\9self:updateThemeStyle()\
\9end",
                        87,
                    },
                    isPressed = {
                        "(_C_self_passed,isPressed)\
\9\9self.isPressed = isPressed\
\9\9self:updateThemeStyle()\
\9end",
                        93,
                    },
                    text = {
                        "(_C_self_passed,text)\
\9\9self.text = text\
\9\9self.needsDraw = true\
\9\9self.needsAutosize = true\
\9end",
                        53,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9super( ... )\
\
\9\9self:event( DownMouseEvent, self.onMouseDown )\
\9\9self:event( DownKeyEvent, self.onKeyDown )\
\9\9self:event( UpKeyEvent, self.onKeyUp )\
\9\9self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalMouseUp, Event.phases.BEFORE )\
\9end",
                    },
                    21,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                onMouseDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = true\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    124,
                    {
                        {
                            allowsNil = false,
                            type = "DownMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onGlobalMouseUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then\
\9\9\9self.isPressed = false\
\9\9\9if self.isEnabled and self:hitTestEvent( event ) then\
\9\9\9\9self.eventManager:handleEvent( ActionInterfaceEvent( self ) )\
\9\9\9\9local result = self.eventManager:handleEvent( event )\
\9\9\9\9",
                        {
                            " result == nil and true or result\
",
                        },
                        "\9\9\9end\
\9\9end\
\9end",
                    },
                    108,
                    {
                        {
                            allowsNil = false,
                            type = "UpMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onKeyDown = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and self.isFocused and event.keyCode == keys.enter then\
\9\9\9self.isPressed = true\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    136,
                    {
                        {
                            allowsNil = false,
                            type = "DownKeyEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
                onDraw = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local width, height, theme, canvas, isPressed = self.width, self.height, self.theme, self.canvas, self.isPressed\
\
\9\9-- get all the shadow size details so we can adjust the compression as needed\
\9\9local defaultShadowSize = theme:value( \"shadowSize\", \"default\" )\
\9\9local shadowPressedSize = theme:value( \"shadowSize\", \"pressed\" )\
\9\9local shadowSize = theme:value( \"shadowSize\" )\
\9\9local shadowOffset = defaultShadowSize - shadowSize\
\9\9local shadowPressedOffset = defaultShadowSize - shadowPressedSize\
\9\9local shadowX = math.floor( shadowOffset * SHADOW_RATIO + 0.5 )\
\
\9\9-- background shape\
\9\9local roundedRectangle = RoundedRectangleMask( shadowX + 1, shadowOffset + 1, width - math.floor( shadowPressedOffset * SHADOW_RATIO + 0.5 ), height - shadowPressedOffset, theme:value( \"cornerRadius\" ) )\
\9\9canvas:fill( theme:value( \"fillColour\" ), roundedRectangle )\
\9\9canvas:outline( theme:value( \"outlineColour\" ), roundedRectangle, theme:value( \"outlineThickness\" ) )\
\
\9\9local leftMargin, rightMargin, topMargin, bottomMargin = theme:value( \"leftMargin\" ), theme:value( \"rightMargin\" ), theme:value( \"topMargin\" ), theme:value( \"bottomMargin\" )\
\9\9-- text\
\9\9canvas:fill( theme:value( \"textColour\" ),  TextMask( leftMargin + shadowX + 1, topMargin + 1 + shadowOffset, width - leftMargin - rightMargin, height - topMargin - bottomMargin, self.text, theme:value( \"font\" ) ) )\
\
\9\9self.shadowSize = shadowSize\
\9end",
                    },
                    30,
                    {},
                    [ 6 ] = {},
                },
                updateThemeStyle = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9self.theme.style = self.isEnabled and ( self.isPressed and \"pressed\" or ( self.isFocused and \"focused\" or \"default\" ) ) or \"disabled\"\
\9end",
                    },
                    83,
                    {},
                    [ 6 ] = {},
                },
                autosize = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if self.isAutosized then\
\9\9\9local text, theme = self.text, self.theme\
\9\9\9local font = theme:value( \"font\" )\
\9\9\9local defaultShadowSize = theme:value( \"shadowSize\", \"default\" )\
\9\9\9local shadowSize = theme:value( \"shadowSize\", \"pressed\" )\
\9\9\9local shadowOffset = defaultShadowSize - shadowSize\
\9\9\9local shadowX = math.floor( shadowOffset * SHADOW_RATIO + 0.5 )\
\9\9\9self.width = font:getWidth( self.text ) + theme:value( \"leftMargin\" ) + theme:value( \"rightMargin\" ) + shadowX\
\9\9\9self.height = font.height + theme:value( \"topMargin\" ) + theme:value( \"bottomMargin\" ) + shadowOffset\
\9\9end\
\9\9self.needsAutosize = false\
\9end",
                    },
                    69,
                    {},
                    [ 6 ] = {},
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9super( deltaTime )\
\9\9if self.needsAutosize then\
\9\9\9self:autosize()\
\9\9end\
\9end",
                    },
                    59,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
                onKeyUp = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and self.isPressed and self.isFocused and event.keyCode == keys.enter then\
\9\9\9self.isPressed = false\
\9\9\9self.eventManager:handleEvent( ActionInterfaceEvent( self ) )\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9end\
\9end",
                    },
                    148,
                    {
                        {
                            allowsNil = false,
                            type = "UpKeyEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isAutosized = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
                isPressed = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                needsAutosize = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "true\
\9\
",
                },
                text = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                    defaultValue = "\"\"\
\
\9\
",
                },
            },
        },
        className = "Button",
        fileName = "/src/classes/Views/Button.luo",
    },
    ValidationException = {
        fileEnvironment = 99,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Exception",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Value validation exception: \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    6,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "ValidationException",
        fileName = "/src/classes/Exceptions/Validation/ValidationException.luo",
    },
    IEditableFileSystemItem = {
        className = "IEditableFileSystemItem",
        enums = {},
        isInterface = true,
        instance = {
            functions = {},
            properties = {
                contents = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
            eventHandles = {},
        },
        static = {
            functions = {},
            properties = {},
            eventHandles = {},
        },
    },
    Application = {
        fileEnvironment = 31,
        implements = {},
        lineNumber = 4,
        enums = {},
        fileName = "/src/classes/Application.luo",
        instance = {
            defaultValues = {},
            eventHandles = {
                updateTimer = {
                    "(_C_self_passed,event)",
                    "\
\9\9if event.timer and event.timer == self.updateTimer then\
\9\9\9self:update()\
\9\9\9return true\
\9\9end\
\9end",
                    346,
                    "TimerEvent",
                    [ 6 ] = "event",
                },
            },
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {
                    interfaceName = {
                        "(_C_self_passed,interfaceName)\
\9\9if interfaceName and self.interfaceName ~= interfaceName then\
\9\9\9self.interfaceName = interfaceName\
\9\9\9self:reloadInterface()\
\9\9end\
\9end",
                        143,
                    },
                },
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9class.setApplication( self )\
\9\9if Quartz then\
\9\9\9Quartz.silicaApplication = self\
\9\9end\
\9\9local userDataParentFolder\
\9\9local userDataPath\
\9\9if Quartz then\
\9\9\9userDataPath = Quartz.userDataPath\
\9\9\9self.userDataPath = userDataPath\
\9\9else\
\9\9\9userDataPath = self.userDataPath\
\9\9end\
\9\9self.arguments = { ... }\
\9\9self.userDataFolder = Folder( userDataPath ) or Folder.static:make( userDataPath )\
\9\9self:initialiseSettings()\
\9\9self:initialiseFileAssociations()\
\9\9self.eventManager = ApplicationEventManager( self )\
\9\9self.keyboardShortcutManager = KeyboardShortcutManager( self )\
\9\9self.dragDropManager = DragDropManager( self )\
\
\9\9Font.static:initialisePresets()\
\9\9Cursor.static:setupAll()\
\9\9\
\9\9self:reloadInterface()\
\
\9\9FileSystemItem.static:purgeCached()\
\9\9local function purge()\
\9\9\9FileSystemItem.static:purgeOldCache()\
\9\9\9self:schedule( purge, 30 )\
\9\9end\
\9\9self:schedule( purge, 30 )\
\
\9\9self.eventManager:connect( TimerEvent, self.onTimer )\
\9end",
                    },
                    66,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                focus = {
                    "(_C_self_passed,newFocus,filter)",
                    {
                        "\
\9\9local focuses = self.focuses\
\9\9local oldFocuses = {}\
\9\9local hadOtherFocus = false\
\9\9for oldFocus, _ in pairs( focuses ) do\
\9\9\9if oldFocus ~= newFocus then\
\9\9\9\9oldFocuses[oldFocus] = true\
\9\9\9\9if (not filter or oldFocus:typeOf( filter )) then\
\9\9\9\9\9hadOtherFocus = true\
\9\9\9\9\9focuses[oldFocus] = nil\
\9\9\9\9\9oldFocus.isFocused = false\
\9\9\9\9end\
\9\9\9end\
\9\9end\
\9\9if hadOtherFocus or not focuses[newFocus] then\
\9\9\9if not focuses[newFocus] then\
\9\9\9\9focuses[newFocus] = true\
\9\9\9\9newFocus.isFocused = true\
\9\9\9end\
\9\9\9self.eventManager:handleEvent( FocusesChangedInterfaceEvent( focuses, oldFocuses ) )\
\9\9end\
\9end",
                    },
                    218,
                    {
                        {
                            allowsNil = true,
                            name = "newFocus",
                        },
                        {
                            allowsNil = true,
                            name = "filter",
                        },
                    },
                    [ 6 ] = {
                        "newFocus",
                        "filter",
                    },
                },
                initialiseFileAssociations = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9if Quartz then\
\9\9\9-- if we're running in Quartz we'll need to extract all the file associations from it\
\9\9else\
\9\9\9-- as we're not running in Quartz we can't actually open any of the default files, so we'll need to make 'fake' ones so most files have icons, and the OS isn't feeding us our own file formats, so we'll need to load those ourself\
\9\9\9FileAssociationManager.static:registerAssociation( FakeFileAssociation( \"folder\", Icon.static:fromFile( \"folder\" ) ) )\
\9\9\9-- FakeFileAssociation( \"text/plain\", Icon.static:fromFile( \"text\" ), { \"txt\", \"text\" } )\
\9\9end\
\9end",
                    },
                    105,
                    {},
                    [ 6 ] = {},
                },
                unfocus = {
                    "(_C_self_passed,oldFocus)",
                    {
                        "\
\9\9local focuses = self.focuses\
\9\9if focuses[oldFocus] then\
\9\9\9local oldFocuses = {}\
\9\9\9for k, _ in pairs( focuses ) do\
\9\9\9\9oldFocuses[k] = true\
\9\9\9end\
\9\9\9focuses[oldFocus] = nil\
\9\9\9oldFocus.isFocused = false\
\9\9\9self.eventManager:handleEvent( FocusesChangedInterfaceEvent( focuses, oldFocuses ) )\
\9\9end\
\9end",
                    },
                    265,
                    {
                        {
                            allowsNil = true,
                            name = "oldFocus",
                        },
                    },
                    [ 6 ] = {
                        "oldFocus",
                    },
                },
                focusesOfType = {
                    "(_C_self_passed,_type,searchFocuses)",
                    {
                        "\
\9\9local focuses = {}\
\9\9for view, _ in pairs( searchFocuses or self.focuses ) do\
\9\9\9if view:typeOf( _type ) then\
\9\9\9\9table.insert( focuses, view )\
\9\9\9end\
\9\9end\
\9\9",
                        {
                            " focuses\
",
                        },
                        "\9end",
                    },
                    195,
                    {
                        {
                            allowsNil = true,
                            name = "_type",
                        },
                        {
                            allowsNil = true,
                            name = "searchFocuses",
                        },
                    },
                    [ 6 ] = {
                        "_type",
                        "searchFocuses",
                    },
                },
                unfocusAll = {
                    "(_C_self_passed,filter)",
                    {
                        "\
\9\9local focuses = self.focuses\
\9\9local oldFocuses = {}\
\9\9for oldFocus, _ in pairs( focuses ) do\
\9\9\9if not filter or oldFocus:typeOf( filter ) then\
\9\9\9\9oldFocuses[oldFocus] = true\
\9\9\9\9focuses[oldFocus] = nil\
\9\9\9\9oldFocus.isFocused = false\
\9\9\9end\
\9\9end\
\9\9self.eventManager:handleEvent( FocusesChangedInterfaceEvent( focuses, oldFocuses ) )\
\9end",
                    },
                    282,
                    {
                        {
                            allowsNil = true,
                            name = "filter",
                        },
                    },
                    [ 6 ] = {
                        "filter",
                    },
                },
                schedule = {
                    "(_C_self_passed,func,time,...)",
                    {
                        "\
\9\9time = time or 0.05\
\9\9local schedules = self.schedules\
\9\9table.insert( schedules, { func, os.clock() + time, ... } )\
\9\9",
                        {
                            " #schedules\
",
                        },
                        "\9end",
                    },
                    303,
                    {
                        {
                            allowsNil = true,
                            name = "func",
                        },
                        {
                            allowsNil = true,
                            name = "time",
                        },
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "func",
                        "time",
                        "...",
                    },
                },
                run = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9self.isRunning = true\
\9\9try( function()\
\9\9\9self:update()\
\
\9\9\9while self.isRunning do\
\9\9\9\9local event = Event.static:create( coroutine.yield() )\
\9\9\9\9event.relativeView = self.container\
\9\9\9\9self.eventManager:handleEvent( event )\
\9\9\9end\
\9\9end ) {\
\
\9\9\9catch( FatalException, function( extension )\
\9\9\9\9print( extension.message )\
\9\9\9end )\
\
\9\9}\
\9end",
                    },
                    120,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                addFocus = {
                    "(_C_self_passed,newFocus)",
                    {
                        "\
\9\9local focuses = self.focuses\
\9\9local oldFocuses = {}\
\9\9if not focuses[newFocus] then\
\9\9\9for focusedView, _ in pairs( focuses ) do\
\9\9\9\9oldFocuses[focusedView] = true\
\9\9\9\9if focusedView.isSingleFocusOnly then\
\9\9\9\9\9focuses[focusedView] = nil\
\9\9\9\9end\
\9\9\9end\
\9\9\9focuses[newFocus] = true\
\9\9\9newFocus.isFocused = true\
\9\9\9self.eventManager:handleEvent( FocusesChangedInterfaceEvent( focuses, oldFocuses ) )\
\9\9end\
\9end",
                    },
                    245,
                    {
                        {
                            allowsNil = true,
                            name = "newFocus",
                        },
                    },
                    [ 6 ] = {
                        "newFocus",
                    },
                },
                reloadInterface = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local interfaceName = self.interfaceName\
\
\9\9local oldContainer = self.container\
\9\9if oldContainer then\
\9\9\9oldContainer:dispose()\
\9\9end\
\
\9\9if interfaceName then\
\9\9\9local interface = Interface( interfaceName )\
\9\9\9self.container = interface.container\
\9\9\9interface:ready()\
\9\9else\
\9\9\9local container = ApplicationContainer()\
\9\9\9self.container = container\
\9\9\9container:handleEvent( ReadyInterfaceEvent() )\
\9\9end\
\9end",
                    },
                    153,
                    {},
                    [ 6 ] = {},
                },
                unschedule = {
                    "(_C_self_passed,scheduleId)",
                    {
                        "\
\9\9local schedules = self.schedules\
\9\9if schedules[scheduleId] then\
\9\9\9schedules[scheduleId] = nil\
\9\9\9",
                        {
                            " true\
",
                        },
                        "\9\9else ",
                        {
                            " false ",
                        },
                        "end\
\9end",
                    },
                    315,
                    {
                        {
                            allowsNil = true,
                            name = "scheduleId",
                        },
                    },
                    [ 6 ] = {
                        "scheduleId",
                    },
                },
                initialiseSettings = {
                    "(_C_self_passed)",
                    {
                        "\
\9end",
                    },
                    102,
                    {},
                    [ 6 ] = {},
                },
                checkScheduled = {
                    "(_C_self_passed,lastUpdate)",
                    {
                        "\
\9\9local now = os.clock()\
\9\9local schedules = self.schedules\
\9\9for scheduleId, task in pairs( schedules ) do\
\9\9\9if task[2] <= now then\
\9\9\9\9local func = task[1]\
\9\9\9\9table.remove( task, 2 )\
\9\9\9\9table.remove( task, 1 )\
\9\9\9\9func( unpack( task ) )\
\9\9\9\9schedules[scheduleId] = nil\
\9\9\9end\
\9\9end\
\9end",
                    },
                    327,
                    {
                        {
                            allowsNil = true,
                            name = "lastUpdate",
                        },
                    },
                    [ 6 ] = {
                        "lastUpdate",
                    },
                },
                update = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9-- TODO: not exactally sure how to handle deltaTime for the first one. for now it's one 60th\
\9\9local clock = os.clock()\
\9\9local lastUpdate = self.lastUpdate or ( clock - 1/60 )\
\9\9local deltaTime = clock - lastUpdate\
\9\9self.lastUpdate = clock\
\9\9if not Quartz then\
\9\9\9self.updateTimer = os.startTimer( 1/60 )\
\9\9end\
\
\9\9self:checkScheduled( lastUpdate )\
\9\9self.container:update( deltaTime )\
\9end",
                    },
                    175,
                    {},
                    [ 6 ] = {},
                },
                hasFocus = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9",
                        {
                            " next( self.focuses ) ~= nil\
",
                        },
                        "\9end",
                    },
                    209,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {
                settings = {
                    allowsNil = true,
                    link = false,
                    type = "Settings",
                    readOnly = false,
                },
                arguments = {
                    allowsNil = true,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
                userDataPath = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                    defaultValue = "\"userdata\"\
\9\
",
                },
                eventManager = {
                    allowsNil = false,
                    link = false,
                    type = "ApplicationEventManager",
                    readOnly = false,
                },
                focuses = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                keyboardShortcutManager = {
                    allowsNil = false,
                    link = false,
                    type = "KeyboardShortcutManager",
                    readOnly = false,
                },
                name = {
                    allowsNil = false,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                userDataFolder = {
                    allowsNil = false,
                    link = false,
                    type = "Folder",
                    readOnly = false,
                },
                dragDropManager = {
                    allowsNil = false,
                    link = false,
                    type = "DragDropManager",
                    readOnly = false,
                },
                path = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
                schedules = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{}\
\9\
",
                },
                updateTimer = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                isRunning = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\9\
",
                },
                lastUpdate = {
                    allowsNil = true,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                document = {
                    allowsNil = true,
                    link = false,
                    type = "Document",
                    readOnly = false,
                },
                container = {
                    allowsNil = false,
                    link = false,
                    type = "Container",
                    readOnly = false,
                },
                interfaceName = {
                    allowsNil = true,
                    link = false,
                    type = "String",
                    readOnly = false,
                },
            },
        },
        className = "Application",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,...)",
                    {
                        "\
\9\9self.resourceTables = __resourceTables or {}\
\9\9_G.__resourceTables = nil\
\
\9end",
                    },
                    34,
                    {
                        {
                            name = "...",
                            isVarArg = true,
                        },
                    },
                    [ 6 ] = {
                        "...",
                    },
                },
                load = {
                    "(_C_self_passed,path)",
                    {
                        "\
\9\9local folder = Folder( path )\
\9\9if folder then\
\9\9\9table.insert( self.resourceFolders, folder )\
\9\9\9local classesFolder = folder:folderFromPath( \"classes\" )\
\9\9\9if classesFolder then\
\9\9\9\9table.insert( class.folders, classesFolder )\
\9\9\9\9local SLUA = Metadata.mimes.SLUA\
\9\9\9\9local function loadFolder( folder )\
\9\9\9\9\9for i, fileSystemItem in ipairs( folder.items ) do\
\9\9\9\9\9\9if fileSystemItem.metadata.mime == SLUA then\
\9\9\9\9\9\9\9class.get( fileSystemItem.name, fileSystemItem.contents )\
\9\9\9\9\9\9elseif fileSystemItem:typeOf( Folder ) then\
\9\9\9\9\9\9\9loadFolder( fileSystemItem )\
\9\9\9\9\9\9end\
\9\9\9\9\9end\
\9\9\9\9end\
\9\9\9\9loadFolder( classesFolder )\
\9\9\9end\
\9\9end\
\9end",
                    },
                    44,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "path",
                        },
                    },
                    [ 6 ] = {
                        "path",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                resourceFolders = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                    defaultValue = "{} \
\9\
",
                },
                resourceTables = {
                    allowsNil = false,
                    link = false,
                    type = "Table",
                    readOnly = false,
                },
            },
        },
    },
    MenuNotSpecifiedException = {
        fileEnvironment = 100,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Exception",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "MenuNotSpecifiedException",
        fileName = "/src/classes/Exceptions/Views/MenuNotSpecifiedException.luo",
    },
    DownKeyEvent = {
        fileEnvironment = 70,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                eventType = "\"key\"\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "KeyEvent",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,keyCode,isRepeat)",
                    {
                        "\
\9\9super( keyCode )\
\9\9self.isRepeat = isRepeat\
\9end",
                    },
                    7,
                    {
                        {
                            allowsNil = false,
                            type = "Number",
                            name = "keyCode",
                        },
                        {
                            allowsNil = false,
                            type = "Boolean",
                            name = "isRepeat",
                        },
                    },
                    [ 6 ] = {
                        "keyCode",
                        "isRepeat",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                isRepeat = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                },
            },
        },
        className = "DownKeyEvent",
        fileName = "/src/classes/Events/Keyboard Events/DownKeyEvent.luo",
    },
    HomeSearchBox = {
        fileEnvironment = 7,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "IHomeItem",
        },
        extends = "SearchBox",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "HomeSearchBox",
        fileName = "/System/classes/Home/HomeSearchBox.luo",
    },
    StyleClassException = {
        fileEnvironment = 92,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "ClassException",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,message,level)",
                    {
                        "\
\9\9message = \"Naming/code styling was incorrect (the Silica code style should consistent across all programs and developers): \" .. message\
\9\9super( message, level )\
\9end",
                    },
                    4,
                    {
                        {
                            allowsNil = false,
                            type = "String",
                            name = "message",
                        },
                        {
                            allowsNil = true,
                            type = "Number",
                            name = "level",
                        },
                    },
                    [ 6 ] = {
                        "message",
                        "level",
                    },
                },
            },
            instanceVariables = {},
            properties = {},
        },
        className = "StyleClassException",
        fileName = "/src/classes/Exceptions/Class System/StyleClassException.luo",
    },
    Animation = {
        fileEnvironment = 30,
        implements = {},
        lineNumber = 63,
        enums = {
            easings = {
                type = "Function",
                startLine = 131,
                values = "{\
\9\9\
\9\9LINEAR = function( t, b, c, d )\
\9\9\9return c * t / d + b\
\9\9end;\
\
\9\9\
\9\9IN_QUAD = function( t, b, c, d )\
\9\9\9return c * pow(t / d, 2) + b\
\9\9end;\
\
\9\9OUT_QUAD = function( t, b, c, d )\
\9\9\9t = t / d\
\9\9\9return -c * t * (t - 2) + b\
\9\9end;\
\
\9\9IN_OUT_QUAD = function( t, b, c, d )\
\9\9\9t = t / d * 2\
\9\9\9if t < 1 then return c / 2 * pow(t, 2) + b end\
\9\9\9return -c / 2 * ((t - 1) * (t - 3) - 1) + b\
\9\9end;\
\
\9\9OUT_IN_QUAD = function( t, b, c, d )\
\9\9\9if t < d / 2 then return outQuad(t * 2, b, c / 2, d) end\
\9\9\9return inQuad((t * 2) - d, b + c / 2, c / 2, d)\
\9\9end;\
\
\9\9\
\9\9IN_CUBIC = function ( t, b, c, d )\
\9\9\9return c * pow(t / d, 3) + b\
\9\9end;\
\
\9\9OUT_CUBIC = function( t, b, c, d )\
\9\9\9return c * (pow(t / d - 1, 3) + 1) + b\
\9\9end;\
\
\9\9IN_OUT_CUBIC = function( t, b, c, d )\
\9\9\9t = t / d * 2\
\9\9\9if t < 1 then return c / 2 * t * t * t + b end\
\9\9\9t = t - 2\
\9\9\9return c / 2 * (t * t * t + 2) + b\
\9\9end;\
\
\9\9OUT_IN_CUBIC = function( t, b, c, d )\
\9\9\9if t < d / 2 then return outCubic(t * 2, b, c / 2, d) end\
\9\9\9return inCubic((t * 2) - d, b + c / 2, c / 2, d)\
\9\9end;\
\
\9\9\
\9\9IN_QUART = function( t, b, c, d )\
\9\9\9return c * pow(t / d, 4) + b\
\9\9end;\
\
\9\9OUT_QUART = function( t, b, c, d )\
\9\9\9return -c * (pow(t / d - 1, 4) - 1) + b\
\9\9end;\
\
\9\9IN_OUT_QUART = function( t, b, c, d )\
\9\9\9t = t / d * 2\
\9\9\9if t < 1 then return c / 2 * pow(t, 4) + b end\
\9\9\9return -c / 2 * (pow(t - 2, 4) - 2) + b\
\9\9end;\
\
\9\9OUT_IN_QUART = function( t, b, c, d )\
\9\9\9if t < d / 2 then return outQuart(t * 2, b, c / 2, d) end\
\9\9\9return inQuart((t * 2) - d, b + c / 2, c / 2, d)\
\9\9end;\
\
\9\9\
\9\9IN_QUINT = function( t, b, c, d )\
\9\9\9return c * pow(t / d, 5) + b\
\9\9end;\
\
\9\9OUT_QUINT = function( t, b, c, d )\
\9\9\9return c * (pow(t / d - 1, 5) + 1) + b\
\9\9end;\
\
\9\9IN_OUT_QUINT = function( t, b, c, d )\
\9\9\9t = t / d * 2\
\9\9\9if t < 1 then return c / 2 * pow(t, 5) + b end\
\9\9\9return c / 2 * (pow(t - 2, 5) + 2) + b\
\9\9end;\
\
\9\9OUT_IN_QUINT = function( t, b, c, d )\
\9\9\9if t < d / 2 then return outQuint(t * 2, b, c / 2, d) end\
\9\9\9return inQuint((t * 2) - d, b + c / 2, c / 2, d)\
\9\9end;\
\
\9\9\
\9\9IN_SINE = function( t, b, c, d )\
\9\9\9return -c * cos(t / d * (pi / 2)) + c + b\
\9\9end;\
\
\9\9OUT_SINE = function( t, b, c, d )\
\9\9\9return c * sin(t / d * (pi / 2)) + b\
\9\9end;\
\
\9\9IN_OUT_SINE = function( t, b, c, d )\
\9\9\9return -c / 2 * (cos(pi * t / d) - 1) + b\
\9\9end;\
\
\9\9OUT_IN_SINE = function( t, b, c, d )\
\9\9\9if t < d / 2 then return outSine(t * 2, b, c / 2, d) end\
\9\9\9return inSine((t * 2) -d, b + c / 2, c / 2, d)\
\9\9end;\
\
\9\9\
\9\9IN_EXPO = function( t, b, c, d )\
\9\9\9if t == 0 then return b end\
\9\9\9return c * pow(2, 10 * (t / d - 1)) + b - c * 0.001\
\9\9end;\
\
\9\9OUT_EXPO = function( t, b, c, d )\
\9\9\9if t == d then return b + c end\
\9\9\9return c * 1.001 * (-pow(2, -10 * t / d) + 1) + b\
\9\9end;\
\
\9\9IN_OUT_EXPO = function( t, b, c, d )\
\9\9\9if t == 0 then return b end\
\9\9\9if t == d then return b + c end\
\9\9\9t = t / d * 2\
\9\9\9if t < 1 then return c / 2 * pow(2, 10 * (t - 1)) + b - c * 0.0005 end\
\9\9\9return c / 2 * 1.0005 * (-pow(2, -10 * (t - 1)) + 2) + b\
\9\9end;\
\
\9\9OUT_IN_EXPO = function( t, b, c, d )\
\9\9\9if t < d / 2 then return outExpo(t * 2, b, c / 2, d) end\
\9\9\9return inExpo((t * 2) - d, b + c / 2, c / 2, d)\
\9\9end;\
\
\9\9\
\9\9IN_CIRC = function( t, b, c, d )\
\9\9\9return(-c * (sqrt(1 - pow(t / d, 2)) - 1) + b)\
\9\9end;\
\
\9\9OUT_CIRC = function( t, b, c, d )\
\9\9\9return(c * sqrt(1 - pow(t / d - 1, 2)) + b)\
\9\9end;\
\
\9\9IN_OUT_CIRC = function( t, b, c, d )\
\9\9\9t = t / d * 2\
\9\9\9if t < 1 then return -c / 2 * (sqrt(1 - t * t) - 1) + b end\
\9\9\9t = t - 2\
\9\9\9return c / 2 * (sqrt(1 - t * t) + 1) + b\
\9\9end;\
\
\9\9OUT_IN_CIRC = function( t, b, c, d )\
\9\9\9if t < d / 2 then return outCirc(t * 2, b, c / 2, d) end\
\9\9\9return inCirc((t * 2) - d, b + c / 2, c / 2, d)\
\9\9end;\
\
\9\9\
\9\9CALCULATE_P_A_S = function( p,a,c,d )\
\9\9\9p, a = p or d * 0.3, a or 0\
\9\9\9if a < abs( c ) then return p, c, p / 4 end \
\9\9\9return p, a, p / (2 * pi) * asin( c/a ) \
\9\9end;\
\
\9\9IN_ELASTIC = function( t, b, c, d, a, p )\
\9\9\9local s\
\9\9\9if t == 0 then return b end\
\9\9\9t = t / d\
\9\9\9if t == 1 then return b + c end\
\9\9\9p,a,s = calculatePAS( p,a,c,d )\
\9\9\9t = t - 1\
\9\9\9return -(a * pow(2, 10 * t) * sin((t * d - s) * (2 * pi) / p)) + b\
\9\9end;\
\
\9\9OUT_ELASTIC = function( t, b, c, d, a, p )\
\9\9\9local s\
\9\9\9if t == 0 then return b end\
\9\9\9t = t / d\
\9\9\9if t == 1 then return b + c end\
\9\9\9p,a,s = calculatePAS( p,a,c,d )\
\9\9\9return a * pow(2, -10 * t) * sin((t * d - s) * (2 * pi) / p) + c + b\
\9\9end;\
\
\9\9IN_OUT_ELASTIC = function( t, b, c, d, a, p )\
\9\9\9local s\
\9\9\9if t == 0 then return b end\
\9\9\9t = t / d * 2\
\9\9\9if t == 2 then return b + c end\
\9\9\9p,a,s = calculatePAS( p,a,c,d )\
\9\9\9t = t - 1\
\9\9\9if t < 0 then return -0.5 * (a * pow(2, 10 * t) * sin((t * d - s) * (2 * pi) / p)) + b end\
\9\9\9return a * pow(2, -10 * t) * sin((t * d - s) * (2 * pi) / p ) * 0.5 + c + b\
\9\9end;\
\
\9\9OUT_IN_ELASTIC = function( t, b, c, d, a, p )\
\9\9\9if t < d / 2 then return outElastic(t * 2, b, c / 2, d, a, p) end\
\9\9\9return inElastic((t * 2) - d, b + c / 2, c / 2, d, a, p)\
\9\9end;\
\
\9\9\
\9\9IN_BACK = function( t, b, c, d, s )\
\9\9\9s = s or 1.70158\
\9\9\9t = t / d\
\9\9\9return c * t * t * ((s + 1) * t - s) + b\
\9\9end;\
\
\9\9OUT_BACK = function( t, b, c, d, s )\
\9\9\9s = s or 1.70158\
\9\9\9t = t / d - 1\
\9\9\9return c * (t * t * ((s + 1) * t + s) + 1) + b\
\9\9end;\
\
\9\9IN_OUT_BACK = function( t, b, c, d, s )\
\9\9\9s = (s or 1.70158) * 1.525\
\9\9\9t = t / d * 2\
\9\9\9if t < 1 then return c / 2 * (t * t * ((s + 1) * t - s)) + b end\
\9\9\9t = t - 2\
\9\9\9return c / 2 * (t * t * ((s + 1) * t + s) + 2) + b\
\9\9end;\
\
\9\9OUT_IN_BACK = function( t, b, c, d, s )\
\9\9\9if t < d / 2 then return outBack(t * 2, b, c / 2, d, s) end\
\9\9\9return inBack((t * 2) - d, b + c / 2, c / 2, d, s)\
\9\9end;\
\
\9\9\
\9\9OUT_BOUNCE = function( t, b, c, d )\
\9\9\9t = t / d\
\9\9\9if t < 1 / 2.75 then return c * (7.5625 * t * t) + b end\
\9\9\9if t < 2 / 2.75 then\
\9\9\9\9t = t - (1.5 / 2.75)\
\9\9\9\9return c * (7.5625 * t * t + 0.75) + b\
\9\9\9elseif t < 2.5 / 2.75 then\
\9\9\9\9t = t - (2.25 / 2.75)\
\9\9\9\9return c * (7.5625 * t * t + 0.9375) + b\
\9\9\9end\
\9\9\9t = t - (2.625 / 2.75)\
\9\9\9return c * (7.5625 * t * t + 0.984375) + b\
\9\9end;\
\
\9\9IN_BOUNCE = function( t, b, c, d )\
\9\9\9return c - outBounce(d - t, 0, c, d) + b\
\9\9end;\
\
\9\9IN_OUT_BOUNCE = function( t, b, c, d )\
\9\9\9if t < d / 2 then return inBounce(t * 2, 0, c, d) * 0.5 + b end\
\9\9\9return outBounce(t * 2 - d, 0, c, d) * 0.5 + c * .5 + b\
\9\9end;\
\
\9\9OUT_IN_BOUNCE = function( t, b, c, d )\
\9\9\9if t < d / 2 then return outBounce(t * 2, b, c / 2, d) end\
\9\9\9return inBounce((t * 2) - d, b + c / 2, c / 2, d)\
\9\9end;\
\9}\
\
",
            },
        },
        fileName = "/src/classes/Animation.luo",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed,duration,subject,targetValues,easingFunc,round)",
                    {
                        "\
\9\9self.duration = duration\
\9\9self.subject = subject\
\9\9self.targetValues = targetValues\
\9\9self.easingFunc = easingFunc\
\9\9self.round = round\
\9\9self.initialValues = copyTables( {}, targetValues, subject )\
\9\9self.time = 0\
\9end",
                    },
                    79,
                    {
                        {
                            allowsNil = true,
                            name = "duration",
                        },
                        {
                            allowsNil = true,
                            name = "subject",
                        },
                        {
                            allowsNil = true,
                            name = "targetValues",
                        },
                        {
                            allowsNil = true,
                            name = "easingFunc",
                        },
                        {
                            allowsNil = true,
                            name = "round",
                        },
                    },
                    [ 6 ] = {
                        "duration",
                        "subject",
                        "targetValues",
                        "easingFunc",
                        "round",
                    },
                },
                reset = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9",
                        {
                            " self:setTime( 0 )\
",
                        },
                        "\9end",
                    },
                    117,
                    {},
                    [ 6 ] = {},
                },
                setTime = {
                    "(_C_self_passed,time)",
                    {
                        "\
\9\9assert( type(time ) == \"number\" and time >= 0, \"time must be a positive number or 0\")\
\
\9\9local duration = self.duration\
\
\9\9if time <= 0 then\
\9\9\9self.time = 0\
\9\9\9copyTables(self.subject, self.initialValues)\
\9\9elseif time >= duration then -- the tween has expired\
\9\9\9self.time = duration\
\9\9\9copyTables(self.subject, self.targetValues)\
\9\9else\
\9\9\9self.time = time\
\9\9\9performEasingOnSubject(self.subject, self.targetValues, self.initialValues, self.time, duration, self.easingFunc, self.round)\
\9\9end\
\
\9\9",
                        {
                            " self.time >= duration\
",
                        },
                        "\9end",
                    },
                    94,
                    {
                        {
                            allowsNil = true,
                            name = "time",
                        },
                    },
                    [ 6 ] = {
                        "time",
                    },
                },
                update = {
                    "(_C_self_passed,deltaTime)",
                    {
                        "\
\9\9",
                        {
                            " self:setTime( self.time + deltaTime )\
",
                        },
                        "\9end",
                    },
                    126,
                    {
                        {
                            allowsNil = true,
                            name = "deltaTime",
                        },
                    },
                    [ 6 ] = {
                        "deltaTime",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                subject = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                duration = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                round = {
                    allowsNil = false,
                    link = false,
                    type = "Boolean",
                    readOnly = false,
                    defaultValue = "false\
\
\9\
\
\
\
\
\
\
\9\
",
                },
                targetValues = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                easingFunc = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
                time = {
                    allowsNil = false,
                    link = false,
                    type = "Number",
                    readOnly = false,
                },
                initialValues = {
                    allowsNil = true,
                    link = false,
                    readOnly = false,
                },
            },
        },
        className = "Animation",
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
    },
    TreeItem = {
        fileEnvironment = 199,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        implements = {
            "ITreeChild",
        },
        extends = "ListItem",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                onMouseHeld = {
                    "(_C_self_passed,event,phase)",
                    {
                        "\
\9\9if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT and ( self.parent.canRearrange or self.parent.canRemove) then\
\9\9\9self.isSelected = true\
\9\9\9self.originalParent = self.parent\
\9\9\9self:startDragDrop( event, TreeClipboardData( self ), true, function()self.originalParent = nil self.isSelected = false end )\
\9\9end\
\9\9",
                        {
                            " true\
",
                        },
                        "\9end",
                    },
                    6,
                    {
                        {
                            allowsNil = false,
                            type = "HeldMouseEvent",
                            name = "event",
                        },
                        {
                            allowsNil = false,
                            type = "Event.phases",
                            name = "phase",
                        },
                    },
                    [ 6 ] = {
                        "event",
                        "phase",
                    },
                },
            },
            instanceVariables = {},
            properties = {
                originalParent = {
                    allowsNil = true,
                    link = false,
                    type = "TreeNode",
                    readOnly = false,
                },
            },
        },
        className = "TreeItem",
        fileName = "/src/classes/Views/Containers/Tree/TreeItem.luo",
    },
    ThumbnailSymbol = {
        fileEnvironment = 154,
        enums = {},
        lineNumber = 1,
        static = {
            defaultValues = {
                symbolName = "\"thumbnail\"\
\
\9\
",
            },
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {
                initialise = {
                    "(_C_self_passed)",
                    {
                        "\
\9\9local path = Path( self.width, self.height, 1, 1 )\
\9\9path:lineTo( 3, 1 )\
\9\9path:lineTo( 3, 3 )\
\9\9path:lineTo( 1, 3 )\
\
\9\9path:moveTo( 5, 1 )\
\9\9path:lineTo( 7, 1 )\
\9\9path:lineTo( 7, 3 )\
\9\9path:lineTo( 5, 3 )\
\9\9\
\9\9path:moveTo( 5, 5 )\
\9\9path:lineTo( 7, 5 )\
\9\9path:lineTo( 7, 7 )\
\9\9path:lineTo( 5, 7 )\
\9\9\
\9\9path:moveTo( 1, 5 )\
\9\9path:lineTo( 3, 5 )\
\9\9path:lineTo( 3, 7 )\
\9\9path:lineTo( 1, 7 )\
\
\9\9path:close()\
\
\9\9super( path )\
\9end",
                    },
                    5,
                    {},
                    [ 6 ] = {},
                },
            },
            instanceVariables = {},
            properties = {},
        },
        implements = {},
        extends = "Symbol",
        instance = {
            defaultValues = {},
            eventHandles = {},
            propertyMethods = {
                get = {},
                willSet = {},
                didSet = {},
                set = {},
            },
            functions = {},
            instanceVariables = {},
            properties = {},
        },
        className = "ThumbnailSymbol",
        fileName = "/src/classes/Symbols/ThumbnailSymbol.luo",
    },
}