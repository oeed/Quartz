fs.open("log", "w").close()

local _print = print
function _G.print( ... )
	_print( ... )
	log(tostring(... or ""))
end

function _G.log( text )
	local h = fs.open("log", "a")
	h.write( tostring(text ) .. '\n')
	h.close()	
end

function _G.log2( text )
	local h = fs.open("log2", "a")
	h.write( tostring(text ) .. '\n')
	h.close()	
end

local _error = error
function _G.logtraceback( level )
	level = 2 + ( level or 1 )
	local traceback, trace, source, line = {}
	repeat
		traceback[#traceback + 1] = trace
		trace = select( 2, pcall( _error, "@", level ) ):match "^(.+) @"
		if trace and trace:find "^.+%.lua:%d+:$" then
			trace = trace:match "^(.+)%.lua:%d+:$" .. " on line " .. trace:match "^.+%.lua:(%d+):$"
		end
		level = level + 1
		if trace == "startup:55:" then
			break
		end
	until not trace
	log( "Start of traceback:\n" .. ("-"):rep( 20 ) .. "\nin " .. table.concat( traceback, "\nin ") .. "\n" .. ("-"):rep( 20 ) .. "\nEnd of traceback" )
end

term.redirect(term.native())
-- Everything above here is development only
-- dofile( "system/Silica" )
-- dofile( "system/Silica.resourcepkg" )
function _G.error(message, level)   
   _error(message, level)      
end        

-- if fs.exists("system/Silica.resourcepkg") then
--     log("Using built package")
--     local _, err = pcall(function() dofile( "system/Silica.resourcepkg" ) end)
--     fs.delete("system/OldSilica.resourcepkg")
--     fs.move("system/Silica.resourcepkg","system/OldSilica.resourcepkg")
--     if err then error(err,2) end
-- else
--     log("Using old style package")
--     shell.run( "package /src Silica" )
--     log("Packaged")
--     dofile( "Silica" )

--     log("Building")
--     local folder = Folder( "/src" )
--     log(folder)
--     local package = folder:package( "/system/Silica.resourcepkg", true, true )
--     log("packaged!")
--     os.reboot()
-- end

loadfile("/luo")("/build.lua", "/System/classes", "/src/classes")
dofile("/build.lua")
dofile("test")
print("\n")

os.queueEvent("damn_emulator")
os.pullEvent("damn_emulator")

Application.static:load( "" )


QuartzApplication( ... ):run()
