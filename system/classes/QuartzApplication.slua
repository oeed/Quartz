
class QuartzApplication extends Application {
	
	name = String( "Quartz" );
	interfaceName = String( "quartz" ).allowsNil;
	programManager = ProgramManager;

}

-- For the demo the below code isn't really needed, it's just for debug

--[[
	@constructor
	@desc Initialise the custom application
]]
function QuartzApplication:initialise()
	self:super()
	self.programManager = ProgramManager( self )
	self:event( CharacterEvent, self.onChar )
	self:event( FileAssociationRegisteredInterfaceEvent, self.onFileAssociationRegistered )
	self.programManager:run( Program.static:fromBundle( Bundle( "/applications/Files.application" ) ) )
end

function QuartzApplication:initialiseSettings()
	self.settings = QuartzSettings()
end

function QuartzApplication:initialiseFileAssociations()
	-- scan over all of the programs
	local configKeys = Program.configKeys
	local root = Folder( "/" )
	local programs = root:findAll( Metadata.mimes.APPLICATION )
	for i, programBundle in ipairs( programs ) do
		if programBundle:typeOf( Bundle ) then
			local supportedMimes = programBundle.config[configKeys.MIMES]
			if supportedMimes and type( supportedMimes ) == "table" then
				for mime, options in pairs( supportedMimes ) do
					if type( mime ) == "string" then
						local name, iconPath, extensions, argumentFormat = options[configKeys.MIME_NAME], options[configKeys.MIME_ICON_PATH], options[configKeys.MIME_EXTENSIONS], options[configKeys.MIME_ARGUMENT_FORMAT]
						if type( name ) == "string" then
							local icon
							if iconPath then
								local iconFile = programBundle:fileFromPath( iconPath )
								if iconFile then
									icon = Icon.static:fromFile( iconFile )
								end
							end
							extensions = type( extensions ) == "table" and extensions or {}
							argumentFormat = type( argumentFormat ) == "table" and argumentFormat
							FileAssociationManager.static:registerAssociation( FileAssociation( name, mime, icon, extensions, argumentFormat, programBundle ) )
						end
					end
				end
			end
		end
	end
end

function QuartzApplication:update()
	self:super()
	self.programManager:update()
end

function QuartzApplication:onFileAssociationRegistered( FileAssociationRegisteredInterfaceEvent event, Event.phases phase )
	local fileAssociation = event.fileAssociation
	for i, program in ipairs( self.programManager.programs ) do
		program:bridgeFileAssociation( fileAssociation )
	end
end

--[[
	@instance
	@desc React to a character being fired
	@param [Event] event -- description
	@return [boolean] stopPropagation
]]
function QuartzApplication:onChar( CharacterEvent event, Event.phases phase )
	if event.character == 'r' then
		-- self.programManager:run( Program( Bundle( "/applications/Test.application" ) ) )
		-- self.programManager:run( SilicaProgram( Bundle( "/applications/Files.application" ) ) )
		FileAssociationManager.static:open( File( "/system/resources/Wallpapers/Europe/Arc de Triomphe.ucg" ) )
	elseif event.character == '\\' then
		os.reboot()
	end
	return false
end