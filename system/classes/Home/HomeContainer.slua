
local ANIMATION_FLY_TIME = 0.4
local ANIMATION_FLY_UP_TIME = 0.3
local ANIMATION_SCALE_TIME = 0.3
local ANIMATION_FLY_DELAY = 0.05
local ANIMATION_FLY_EASING = Animation.easings.IN_SINE
local ANIMATION_SCALE_EASING = Animation.easings.OUT_SINE
local ANIMATION_SCALE = 0.8
local ANIMATION_OVERLAP_TIME = 0.20

class HomeContainer extends Container implements ISwitchableView {
	
	isFocusDismissable = Boolean( false );
	isOpening = Boolean( true );
	scale = Number( 1 );
	hadFirstFocus = Boolean( false );
	
}

function HomeContainer:initialiseCanvas()
	self.canvas = ScaleableCanvas( self.width, self.height, self )
end

function HomeContainer.scale:set( scale )
	self.scale = scale
	local canvas = self.canvas
	canvas.scaleX = scale
	canvas.scaleY = scale
	local parent = self.parent
	if parent then
		parent.needsDraw = true
	end
end

function HomeContainer.isFocused:set( isFocused )
	self:super( isFocused )
	if not self.hadFirstFocus then
		if isFocused then
			self.hadFirstFocus = true
		end
	elseif isFocused then
		self:flyInFocused()
	else
		self:flyOutFocused()
	end
end

function HomeContainer:flyInFocused( fromLeft )
	self.scale = ANIMATION_SCALE
	self.x = -self.width
	self:animate( "x", 1, ANIMATION_FLY_TIME, nil, ANIMATION_FLY_EASING, ANIMATION_FLY_TIME / 2 - 0.1 )
	self:animate( "scale", 1, ANIMATION_SCALE_TIME, nil, ANIMATION_SCALE_EASING, ANIMATION_FLY_TIME - 0.1, false )
end

function HomeContainer:flyOutFocused( toRight )
	self:animate( "x", -self.width, ANIMATION_FLY_TIME, nil, ANIMATION_FLY_EASING, ANIMATION_FLY_TIME/2 - 0.1 )
	self:animate( "scale", ANIMATION_SCALE, ANIMATION_SCALE_TIME, nil, ANIMATION_SCALE_EASING, nil, false )
end