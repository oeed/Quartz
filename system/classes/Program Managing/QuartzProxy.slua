
class QuartzProxy {

    screenBuffer = Table.allowsNil;
    silicaApplication = Table.allowsNil; -- we have to use table because the Application class will be different, we just have to presume it's an Application
    _program = Program;
    _programView = ProgramView.allowsNil;
    fs = Table( fs ); -- TODO: .isReadOnly

    userDataPath = String;

    status = String.allowsNil;
    fileAssociationBridge = Function.allowsNil;
    cursor = Table.allowsNil;
    
}

function QuartzProxy:initialise( Program program )
    self._program = program
    self._programView = program.programView
    local applicationUserDataFolder = self.application.userDataFolder
    local identifier = program.identifier
    local folder = applicationUserDataFolder:folderFromPath( identifier )
    if not folder then
        folder = applicationUserDataFolder:makeSubfolder( identifier )
    end

    self.userDataPath = folder.path
end

--[[
    @desc Opens a file in the appropriate program. Paths are relative to the program, but absolute paths are recommended.
]]
function QuartzProxy:open( String path, Number.allowsNil id )
    path = FileSystemItem.static:resolve( path, self._program.bundle.path )
    FileAssociationManager.static:open( FileSystemItem( path ), nil, id )
end

function QuartzProxy:redraw( Table.allowsNil pixels )
    local programView = self._program.programView
    if pixels then
        programView.buffer = pixels
    end
    programView.needsDraw = true
end

function QuartzProxy.status:get()
    return self._program.status
end

function QuartzProxy.status:set( status )
    self._program.status = status
end

local bridgedCursorStatic = BridgedCursor.static
function QuartzProxy.cursor:set( cursor )
    self.cursor = cursor
    local _programView = self._programView
    if _programView and _programView.isFocused then
        bridgedCursorStatic:updateBridge( cursor )
    end
end
